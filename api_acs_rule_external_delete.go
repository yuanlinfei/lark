// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// DeleteACSRuleExternal 删除权限组
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/rule_external/delete
func (r *ACSService) DeleteACSRuleExternal(ctx context.Context, request *DeleteACSRuleExternalReq, options ...MethodOptionFunc) (*DeleteACSRuleExternalResp, *Response, error) {
	if r.cli.mock.mockACSDeleteACSRuleExternal != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] ACS#DeleteACSRuleExternal mock enable")
		return r.cli.mock.mockACSDeleteACSRuleExternal(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "ACS",
		API:                 "DeleteACSRuleExternal",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/acs/v1/rule_external",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(deleteACSRuleExternalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSDeleteACSRuleExternal mock ACSDeleteACSRuleExternal method
func (r *Mock) MockACSDeleteACSRuleExternal(f func(ctx context.Context, request *DeleteACSRuleExternalReq, options ...MethodOptionFunc) (*DeleteACSRuleExternalResp, *Response, error)) {
	r.mockACSDeleteACSRuleExternal = f
}

// UnMockACSDeleteACSRuleExternal un-mock ACSDeleteACSRuleExternal method
func (r *Mock) UnMockACSDeleteACSRuleExternal() {
	r.mockACSDeleteACSRuleExternal = nil
}

// DeleteACSRuleExternalReq ...
type DeleteACSRuleExternalReq struct {
	RuleID string `query:"rule_id" json:"-"` // 权限组id, 示例值: 7298933941867135276
}

// DeleteACSRuleExternalResp ...
type DeleteACSRuleExternalResp struct {
}

// deleteACSRuleExternalResp ...
type deleteACSRuleExternalResp struct {
	Code  int64                      `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                     `json:"msg,omitempty"`  // 错误描述
	Data  *DeleteACSRuleExternalResp `json:"data,omitempty"`
	Error *ErrorDetail               `json:"error,omitempty"`
}
