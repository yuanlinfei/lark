// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// DeviceBindACSRuleExternal 设备绑定权限组
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/rule_external/device_bind
func (r *ACSService) DeviceBindACSRuleExternal(ctx context.Context, request *DeviceBindACSRuleExternalReq, options ...MethodOptionFunc) (*DeviceBindACSRuleExternalResp, *Response, error) {
	if r.cli.mock.mockACSDeviceBindACSRuleExternal != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] ACS#DeviceBindACSRuleExternal mock enable")
		return r.cli.mock.mockACSDeviceBindACSRuleExternal(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "ACS",
		API:                 "DeviceBindACSRuleExternal",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/acs/v1/rule_external/device_bind",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(deviceBindACSRuleExternalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSDeviceBindACSRuleExternal mock ACSDeviceBindACSRuleExternal method
func (r *Mock) MockACSDeviceBindACSRuleExternal(f func(ctx context.Context, request *DeviceBindACSRuleExternalReq, options ...MethodOptionFunc) (*DeviceBindACSRuleExternalResp, *Response, error)) {
	r.mockACSDeviceBindACSRuleExternal = f
}

// UnMockACSDeviceBindACSRuleExternal un-mock ACSDeviceBindACSRuleExternal method
func (r *Mock) UnMockACSDeviceBindACSRuleExternal() {
	r.mockACSDeviceBindACSRuleExternal = nil
}

// DeviceBindACSRuleExternalReq ...
type DeviceBindACSRuleExternalReq struct {
	DeviceID string   `json:"device_id,omitempty"` // 设备id, 示例值: "6939433228970082593"
	RuleIDs  []string `json:"rule_ids,omitempty"`  // 权限组id列表, 示例值: ["7298933941867135276"], 长度范围: `0` ～ `10000`
}

// DeviceBindACSRuleExternalResp ...
type DeviceBindACSRuleExternalResp struct {
}

// deviceBindACSRuleExternalResp ...
type deviceBindACSRuleExternalResp struct {
	Code  int64                          `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                         `json:"msg,omitempty"`  // 错误描述
	Data  *DeviceBindACSRuleExternalResp `json:"data,omitempty"`
	Error *ErrorDetail                   `json:"error,omitempty"`
}
