// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateAdminBadge 使用该接口可以创建一枚完整的勋章信息, 一个租户下最多可创建1000枚勋章。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge/create
// new doc: https://open.feishu.cn/document/server-docs/admin-v1/badge/badge/create-2
func (r *AdminService) CreateAdminBadge(ctx context.Context, request *CreateAdminBadgeReq, options ...MethodOptionFunc) (*CreateAdminBadgeResp, *Response, error) {
	if r.cli.mock.mockAdminCreateAdminBadge != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Admin#CreateAdminBadge mock enable")
		return r.cli.mock.mockAdminCreateAdminBadge(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Admin",
		API:                   "CreateAdminBadge",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/admin/v1/badges",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createAdminBadgeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAdminCreateAdminBadge mock AdminCreateAdminBadge method
func (r *Mock) MockAdminCreateAdminBadge(f func(ctx context.Context, request *CreateAdminBadgeReq, options ...MethodOptionFunc) (*CreateAdminBadgeResp, *Response, error)) {
	r.mockAdminCreateAdminBadge = f
}

// UnMockAdminCreateAdminBadge un-mock AdminCreateAdminBadge method
func (r *Mock) UnMockAdminCreateAdminBadge() {
	r.mockAdminCreateAdminBadge = nil
}

// CreateAdminBadgeReq ...
type CreateAdminBadgeReq struct {
	Name            string                              `json:"name,omitempty"`             // 租户内唯一的勋章名称, 最多30个字符, 示例值: "激励勋章"
	Explanation     *string                             `json:"explanation,omitempty"`      // 勋章的描述文案, 最多100个字符, 示例值: "这枚勋章为了激励员工颁发。"
	DetailImage     string                              `json:"detail_image,omitempty"`     // 企业勋章的详情图Key。1.权限校验: 非本租户上传的图片key, 不能直接使用；2.时效校验: 创建勋章, 或者修改勋章图片key时, 需使用1h内上传的图片key, 示例值: "75a1949f-d9df-4b46-bc88-dacc51e88f3j", 最小长度: `1` 字符
	ShowImage       string                              `json:"show_image,omitempty"`       // 企业勋章的头像挂饰图Key。1.权限校验: 非本租户上传的图片key, 不能直接使用；2.时效校验: 创建勋章, 或者修改勋章图片key时, 需使用1h内上传的图片key, 示例值: "03daa74a-159f-49e9-963e-b6c4d76103fj", 最小长度: `1` 字符
	I18nName        *CreateAdminBadgeReqI18nName        `json:"i18n_name,omitempty"`        // 勋章的多语言名称, 同name字段限制, 最多30个字符, 示例值: {         "zh_cn": "激励勋章", "en_us": "Incentive Medal", "ja_jp": "奨励メダル"     }
	I18nExplanation *CreateAdminBadgeReqI18nExplanation `json:"i18n_explanation,omitempty"` // 勋章的多语言描述文案, 同explanation字段限制, 最多100个字符, 示例值: {         "zh_cn": "这枚勋章为了激励员工颁发。", "en_us": "This medal is awarded to motivate employees.", "ja_jp": "このメダルは、従業員のモチベーションを高めるために授与されます。"     }
}

// CreateAdminBadgeReqI18nExplanation ...
type CreateAdminBadgeReqI18nExplanation struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 中文文案, 示例值: "激励勋章", 最小长度: `1` 字符
	EnUs *string `json:"en_us,omitempty"` // 英文文案, 示例值: "Incentive Medal", 最小长度: `1` 字符
	JaJp *string `json:"ja_jp,omitempty"` // 日文文案, 示例值: "奨励メダル", 最小长度: `1` 字符
}

// CreateAdminBadgeReqI18nName ...
type CreateAdminBadgeReqI18nName struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 中文文案, 示例值: "激励勋章", 最小长度: `1` 字符
	EnUs *string `json:"en_us,omitempty"` // 英文文案, 示例值: "Incentive Medal", 最小长度: `1` 字符
	JaJp *string `json:"ja_jp,omitempty"` // 日文文案, 示例值: "奨励メダル", 最小长度: `1` 字符
}

// CreateAdminBadgeResp ...
type CreateAdminBadgeResp struct {
	Badge *CreateAdminBadgeRespBadge `json:"badge,omitempty"` // 勋章的信息
}

// CreateAdminBadgeRespBadge ...
type CreateAdminBadgeRespBadge struct {
	ID              string                                    `json:"id,omitempty"`               // 租户内勋章的唯一标识, 该值由系统随机生成。
	Name            string                                    `json:"name,omitempty"`             // 租户内唯一的勋章名称, 最多30个字符。
	Explanation     string                                    `json:"explanation,omitempty"`      // 勋章的描述文案, 最多100个字符。
	DetailImage     string                                    `json:"detail_image,omitempty"`     // 企业勋章的详情图Key。1.权限校验: 非本租户上传的图片key, 不能直接使用；2.时效校验: 创建勋章, 或者修改勋章图片key时, 需使用1h内上传的图片key。
	ShowImage       string                                    `json:"show_image,omitempty"`       // 企业勋章的头像挂饰图Key。1.权限校验: 非本租户上传的图片key, 不能直接使用；2.时效校验: 创建勋章, 或者修改勋章图片key时, 需使用1h内上传的图片key。
	I18nName        *CreateAdminBadgeRespBadgeI18nName        `json:"i18n_name,omitempty"`        // 勋章的多语言名称, 同name字段限制, 最多30个字符。
	I18nExplanation *CreateAdminBadgeRespBadgeI18nExplanation `json:"i18n_explanation,omitempty"` // 勋章的多语言描述文案, 同explanation字段限制, 最多100个字符。
}

// CreateAdminBadgeRespBadgeI18nExplanation ...
type CreateAdminBadgeRespBadgeI18nExplanation struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文文案
	EnUs string `json:"en_us,omitempty"` // 英文文案
	JaJp string `json:"ja_jp,omitempty"` // 日文文案
}

// CreateAdminBadgeRespBadgeI18nName ...
type CreateAdminBadgeRespBadgeI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文文案
	EnUs string `json:"en_us,omitempty"` // 英文文案
	JaJp string `json:"ja_jp,omitempty"` // 日文文案
}

// createAdminBadgeResp ...
type createAdminBadgeResp struct {
	Code  int64                 `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                `json:"msg,omitempty"`  // 错误描述
	Data  *CreateAdminBadgeResp `json:"data,omitempty"`
	Error *ErrorDetail          `json:"error,omitempty"`
}
