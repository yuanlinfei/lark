// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetAdminBadgeList 可以通过该接口列出租户下所有的勋章, 勋章的排列顺序是按照创建时间倒序排列。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge/list
// new doc: https://open.feishu.cn/document/server-docs/admin-v1/badge/badge/list
func (r *AdminService) GetAdminBadgeList(ctx context.Context, request *GetAdminBadgeListReq, options ...MethodOptionFunc) (*GetAdminBadgeListResp, *Response, error) {
	if r.cli.mock.mockAdminGetAdminBadgeList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Admin#GetAdminBadgeList mock enable")
		return r.cli.mock.mockAdminGetAdminBadgeList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Admin",
		API:                   "GetAdminBadgeList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/admin/v1/badges",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAdminBadgeListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAdminGetAdminBadgeList mock AdminGetAdminBadgeList method
func (r *Mock) MockAdminGetAdminBadgeList(f func(ctx context.Context, request *GetAdminBadgeListReq, options ...MethodOptionFunc) (*GetAdminBadgeListResp, *Response, error)) {
	r.mockAdminGetAdminBadgeList = f
}

// UnMockAdminGetAdminBadgeList un-mock AdminGetAdminBadgeList method
func (r *Mock) UnMockAdminGetAdminBadgeList() {
	r.mockAdminGetAdminBadgeList = nil
}

// GetAdminBadgeListReq ...
type GetAdminBadgeListReq struct {
	PageSize  int64   `query:"page_size" json:"-"`  // 分页大小, 示例值: 10, 默认值: `10`, 取值范围: `1` ～ `50`
	PageToken *string `query:"page_token" json:"-"` // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: "b1fmUz", 长度范围: `1` ～ `64` 字符
	Name      *string `query:"name" json:"-"`       // 租户内唯一的勋章名称, 精确匹配, 示例值: "激励勋章", 最小长度: `1` 字符
}

// GetAdminBadgeListResp ...
type GetAdminBadgeListResp struct {
	Badges    []*GetAdminBadgeListRespBadge `json:"badges,omitempty"`     // 勋章列表
	PageToken string                        `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                          `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetAdminBadgeListRespBadge ...
type GetAdminBadgeListRespBadge struct {
	ID              string                                     `json:"id,omitempty"`               // 租户内勋章的唯一标识, 该值由系统随机生成。
	Name            string                                     `json:"name,omitempty"`             // 租户内唯一的勋章名称, 最多30个字符。
	Explanation     string                                     `json:"explanation,omitempty"`      // 勋章的描述文案, 最多100个字符。
	DetailImage     string                                     `json:"detail_image,omitempty"`     // 企业勋章的详情图Key。1.权限校验: 非本租户上传的图片key, 不能直接使用；2.时效校验: 创建勋章, 或者修改勋章图片key时, 需使用1h内上传的图片key。
	ShowImage       string                                     `json:"show_image,omitempty"`       // 企业勋章的头像挂饰图Key。1.权限校验: 非本租户上传的图片key, 不能直接使用；2.时效校验: 创建勋章, 或者修改勋章图片key时, 需使用1h内上传的图片key。
	I18nName        *GetAdminBadgeListRespBadgeI18nName        `json:"i18n_name,omitempty"`        // 勋章的多语言名称, 同name字段限制, 最多30个字符。
	I18nExplanation *GetAdminBadgeListRespBadgeI18nExplanation `json:"i18n_explanation,omitempty"` // 勋章的多语言描述文案, 同explanation字段限制, 最多100个字符。
}

// GetAdminBadgeListRespBadgeI18nExplanation ...
type GetAdminBadgeListRespBadgeI18nExplanation struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文文案
	EnUs string `json:"en_us,omitempty"` // 英文文案
	JaJp string `json:"ja_jp,omitempty"` // 日文文案
}

// GetAdminBadgeListRespBadgeI18nName ...
type GetAdminBadgeListRespBadgeI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文文案
	EnUs string `json:"en_us,omitempty"` // 英文文案
	JaJp string `json:"ja_jp,omitempty"` // 日文文案
}

// getAdminBadgeListResp ...
type getAdminBadgeListResp struct {
	Code  int64                  `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                 `json:"msg,omitempty"`  // 错误描述
	Data  *GetAdminBadgeListResp `json:"data,omitempty"`
	Error *ErrorDetail           `json:"error,omitempty"`
}
