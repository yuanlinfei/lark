// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
	"io"
)

// RecognizeAIBusinessCard 名片识别接口, 通过上传 JPG / PNG / PDF 等文件类型进行一次性的名片识别。接口适用于20MB以下的文件, 适用于英文、日语的名片。
//
// 单租户限流: 10QPS, 同租户下的应用没有限流, 共享本租户的 10QPS 限流
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/document_ai-v1/business_card/recognize
// new doc: https://open.feishu.cn/document/server-docs/ai/document_ai-v1/business_card/recognize
func (r *AIService) RecognizeAIBusinessCard(ctx context.Context, request *RecognizeAIBusinessCardReq, options ...MethodOptionFunc) (*RecognizeAIBusinessCardResp, *Response, error) {
	if r.cli.mock.mockAIRecognizeAIBusinessCard != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] AI#RecognizeAIBusinessCard mock enable")
		return r.cli.mock.mockAIRecognizeAIBusinessCard(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "AI",
		API:                   "RecognizeAIBusinessCard",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/document_ai/v1/business_card/recognize",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(recognizeAIBusinessCardResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAIRecognizeAIBusinessCard mock AIRecognizeAIBusinessCard method
func (r *Mock) MockAIRecognizeAIBusinessCard(f func(ctx context.Context, request *RecognizeAIBusinessCardReq, options ...MethodOptionFunc) (*RecognizeAIBusinessCardResp, *Response, error)) {
	r.mockAIRecognizeAIBusinessCard = f
}

// UnMockAIRecognizeAIBusinessCard un-mock AIRecognizeAIBusinessCard method
func (r *Mock) UnMockAIRecognizeAIBusinessCard() {
	r.mockAIRecognizeAIBusinessCard = nil
}

// RecognizeAIBusinessCardReq ...
type RecognizeAIBusinessCardReq struct {
	File io.Reader `json:"file,omitempty"` // 识别名片的源文件（支持 JPG / PNG / PDF）, 示例值: file binary
}

// RecognizeAIBusinessCardResp ...
type RecognizeAIBusinessCardResp struct {
	BusinessCards []*RecognizeAIBusinessCardRespBusinessCard `json:"business_cards,omitempty"` // 名片信息
}

// RecognizeAIBusinessCardRespBusinessCard ...
type RecognizeAIBusinessCardRespBusinessCard struct {
	Entities []*RecognizeAIBusinessCardRespBusinessCardEntity `json:"entities,omitempty"` // 识别的实体列表
}

// RecognizeAIBusinessCardRespBusinessCardEntity ...
type RecognizeAIBusinessCardRespBusinessCardEntity struct {
	Type  string `json:"type,omitempty"`  // 识别的字段种类, 可选值有: contact_names: 联系人名, company_names: 公司名, departments: 部门, job_titles: 职位, emails: 邮箱, websites: 网站, addresses: 地址, mobile_phones: 移动电话, work_phones: 工作电话, other_phones: 其他电话, faxes: 传真
	Value string `json:"value,omitempty"` // 识别出字段的文本信息
}

// recognizeAIBusinessCardResp ...
type recognizeAIBusinessCardResp struct {
	Code  int64                        `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                       `json:"msg,omitempty"`  // 错误描述
	Data  *RecognizeAIBusinessCardResp `json:"data,omitempty"`
	Error *ErrorDetail                 `json:"error,omitempty"`
}
