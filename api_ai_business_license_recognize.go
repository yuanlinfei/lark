// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
	"io"
)

// RecognizeAIBusinessLicense 营业执照识别接口, 支持JPG/JPEG/PNG/BMP/PDF五种文件类型的一次性的识别。
//
// 单租户限流: 10QPS, 同租户下的应用没有限流, 共享本租户的 10QPS 限流
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/document_ai-v1/business_license/recognize
func (r *AIService) RecognizeAIBusinessLicense(ctx context.Context, request *RecognizeAIBusinessLicenseReq, options ...MethodOptionFunc) (*RecognizeAIBusinessLicenseResp, *Response, error) {
	if r.cli.mock.mockAIRecognizeAIBusinessLicense != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] AI#RecognizeAIBusinessLicense mock enable")
		return r.cli.mock.mockAIRecognizeAIBusinessLicense(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "AI",
		API:                   "RecognizeAIBusinessLicense",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/document_ai/v1/business_license/recognize",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(recognizeAIBusinessLicenseResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAIRecognizeAIBusinessLicense mock AIRecognizeAIBusinessLicense method
func (r *Mock) MockAIRecognizeAIBusinessLicense(f func(ctx context.Context, request *RecognizeAIBusinessLicenseReq, options ...MethodOptionFunc) (*RecognizeAIBusinessLicenseResp, *Response, error)) {
	r.mockAIRecognizeAIBusinessLicense = f
}

// UnMockAIRecognizeAIBusinessLicense un-mock AIRecognizeAIBusinessLicense method
func (r *Mock) UnMockAIRecognizeAIBusinessLicense() {
	r.mockAIRecognizeAIBusinessLicense = nil
}

// RecognizeAIBusinessLicenseReq ...
type RecognizeAIBusinessLicenseReq struct {
	File io.Reader `json:"file,omitempty"` // 识别的营业执照源文件, 示例值: file binary
}

// RecognizeAIBusinessLicenseResp ...
type RecognizeAIBusinessLicenseResp struct {
	BusinessLicense *RecognizeAIBusinessLicenseRespBusinessLicense `json:"business_license,omitempty"` // 营业执照信息
}

// RecognizeAIBusinessLicenseRespBusinessLicense ...
type RecognizeAIBusinessLicenseRespBusinessLicense struct {
	Entities []*RecognizeAIBusinessLicenseRespBusinessLicenseEntitie `json:"entities,omitempty"` // 识别出的实体类型
}

// RecognizeAIBusinessLicenseRespBusinessLicenseEntitie ...
type RecognizeAIBusinessLicenseRespBusinessLicenseEntitie struct {
	Type  string `json:"type,omitempty"`  // 识别的字段种类, 可选值有: certificate_type: 证书类型, unified_social_credit_code: 统一社会信用代码, company_name: 公司名称, company_type: 公司类型, domicile: 住所, legal_representative: 法定代表人, registered_capital: 注册资本, established_time: 成立日期, established_date: 营业期限, business_scope: 经营范围, website: 企业信用信息公示系统网址, approval_date: 核准日期
	Value string `json:"value,omitempty"` // 识别出字段的文本信息
}

// recognizeAIBusinessLicenseResp ...
type recognizeAIBusinessLicenseResp struct {
	Code  int64                           `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                          `json:"msg,omitempty"`  // 错误描述
	Data  *RecognizeAIBusinessLicenseResp `json:"data,omitempty"`
	Error *ErrorDetail                    `json:"error,omitempty"`
}
