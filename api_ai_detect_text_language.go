// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// DetectTextLanguage 机器翻译 (MT), 支持 100 多种语言识别, 返回符合 ISO 639-1 标准。
//
// 单租户限流: 20QPS, 同租户下的应用没有限流, 共享本租户的 20QPS 限流。免费版不支持调用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/translation-v1/text/detect
// new doc: https://open.feishu.cn/document/server-docs/ai/translation-v1/detect
func (r *AIService) DetectTextLanguage(ctx context.Context, request *DetectTextLanguageReq, options ...MethodOptionFunc) (*DetectTextLanguageResp, *Response, error) {
	if r.cli.mock.mockAIDetectTextLanguage != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] AI#DetectTextLanguage mock enable")
		return r.cli.mock.mockAIDetectTextLanguage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "AI",
		API:                   "DetectTextLanguage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/translation/v1/text/detect",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(detectTextLanguageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAIDetectTextLanguage mock AIDetectTextLanguage method
func (r *Mock) MockAIDetectTextLanguage(f func(ctx context.Context, request *DetectTextLanguageReq, options ...MethodOptionFunc) (*DetectTextLanguageResp, *Response, error)) {
	r.mockAIDetectTextLanguage = f
}

// UnMockAIDetectTextLanguage un-mock AIDetectTextLanguage method
func (r *Mock) UnMockAIDetectTextLanguage() {
	r.mockAIDetectTextLanguage = nil
}

// DetectTextLanguageReq ...
type DetectTextLanguageReq struct {
	Text string `json:"text,omitempty"` // 需要被识别语种的文本, 示例值: "你好"
}

// DetectTextLanguageResp ...
type DetectTextLanguageResp struct {
	Language string `json:"language,omitempty"` // 识别的文本语种, 返回符合 ISO 639-1 标准
}

// detectTextLanguageResp ...
type detectTextLanguageResp struct {
	Code  int64                   `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                  `json:"msg,omitempty"`  // 错误描述
	Data  *DetectTextLanguageResp `json:"data,omitempty"`
	Error *ErrorDetail            `json:"error,omitempty"`
}
