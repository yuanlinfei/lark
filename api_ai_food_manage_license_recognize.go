// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
	"io"
)

// RecognizeAIFoodManageLicense 食品经营许可证识别接口, 支持JPG/JPEG/PNG/BMP/PDF五种文件类型的一次性的识别。
//
// 单租户限流: 10QPS, 同租户下的应用没有限流, 共享本租户的 10QPS 限流
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/document_ai-v1/food_manage_license/recognize
func (r *AIService) RecognizeAIFoodManageLicense(ctx context.Context, request *RecognizeAIFoodManageLicenseReq, options ...MethodOptionFunc) (*RecognizeAIFoodManageLicenseResp, *Response, error) {
	if r.cli.mock.mockAIRecognizeAIFoodManageLicense != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] AI#RecognizeAIFoodManageLicense mock enable")
		return r.cli.mock.mockAIRecognizeAIFoodManageLicense(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "AI",
		API:                   "RecognizeAIFoodManageLicense",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/document_ai/v1/food_manage_license/recognize",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(recognizeAIFoodManageLicenseResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAIRecognizeAIFoodManageLicense mock AIRecognizeAIFoodManageLicense method
func (r *Mock) MockAIRecognizeAIFoodManageLicense(f func(ctx context.Context, request *RecognizeAIFoodManageLicenseReq, options ...MethodOptionFunc) (*RecognizeAIFoodManageLicenseResp, *Response, error)) {
	r.mockAIRecognizeAIFoodManageLicense = f
}

// UnMockAIRecognizeAIFoodManageLicense un-mock AIRecognizeAIFoodManageLicense method
func (r *Mock) UnMockAIRecognizeAIFoodManageLicense() {
	r.mockAIRecognizeAIFoodManageLicense = nil
}

// RecognizeAIFoodManageLicenseReq ...
type RecognizeAIFoodManageLicenseReq struct {
	File io.Reader `json:"file,omitempty"` // 识别的食品经营许可证源文件, 示例值: file binary
}

// RecognizeAIFoodManageLicenseResp ...
type RecognizeAIFoodManageLicenseResp struct {
	FoodManageLicense *RecognizeAIFoodManageLicenseRespFoodManageLicense `json:"food_manage_license,omitempty"` // 食品经营许可证信息
}

// RecognizeAIFoodManageLicenseRespFoodManageLicense ...
type RecognizeAIFoodManageLicenseRespFoodManageLicense struct {
	Entities []*RecognizeAIFoodManageLicenseRespFoodManageLicenseEntity `json:"entities,omitempty"` // 识别出的实体列表
}

// RecognizeAIFoodManageLicenseRespFoodManageLicenseEntity ...
type RecognizeAIFoodManageLicenseRespFoodManageLicenseEntity struct {
	Type  string `json:"type,omitempty"`  // 识别的字段种类, 可选值有: validity_period: 有效期, issuer: 签发人, issuing_authority: 发证机关, complaints_hotline: 投诉举报电话, license_number: 许可证编号, domicile: 住所, legal_representative: 法定代表人(负责人), credit_code: 社会信用代码(身份证号), operator: 经营者名称, premise: 经营场所, daily_supervisor: 日常监督管理人员, daily_supervisory_authorities: 日常监督管理机构, main_body: 主体业态, operating_item: 经营项目
	Value string `json:"value,omitempty"` // 识别出字段的文本信息
}

// recognizeAIFoodManageLicenseResp ...
type recognizeAIFoodManageLicenseResp struct {
	Code  int64                             `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                            `json:"msg,omitempty"`  // 错误描述
	Data  *RecognizeAIFoodManageLicenseResp `json:"data,omitempty"`
	Error *ErrorDetail                      `json:"error,omitempty"`
}
