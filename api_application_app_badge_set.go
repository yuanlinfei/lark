// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// SetApplicationAppBadge 更新应用红点信息, 用于工作台场景
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/app_badge/set
// new doc: https://open.feishu.cn/document/server-docs/application-v6/app_badge/set
func (r *ApplicationService) SetApplicationAppBadge(ctx context.Context, request *SetApplicationAppBadgeReq, options ...MethodOptionFunc) (*SetApplicationAppBadgeResp, *Response, error) {
	if r.cli.mock.mockApplicationSetApplicationAppBadge != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#SetApplicationAppBadge mock enable")
		return r.cli.mock.mockApplicationSetApplicationAppBadge(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "SetApplicationAppBadge",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/app_badge/set",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(setApplicationAppBadgeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationSetApplicationAppBadge mock ApplicationSetApplicationAppBadge method
func (r *Mock) MockApplicationSetApplicationAppBadge(f func(ctx context.Context, request *SetApplicationAppBadgeReq, options ...MethodOptionFunc) (*SetApplicationAppBadgeResp, *Response, error)) {
	r.mockApplicationSetApplicationAppBadge = f
}

// UnMockApplicationSetApplicationAppBadge un-mock ApplicationSetApplicationAppBadge method
func (r *Mock) UnMockApplicationSetApplicationAppBadge() {
	r.mockApplicationSetApplicationAppBadge = nil
}

// SetApplicationAppBadgeReq ...
type SetApplicationAppBadgeReq struct {
	UserIDType *IDType                          `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserID     string                           `json:"user_id,omitempty"`      // 用户ID, 示例值: "ou_d317f090b7258ad0372aa53963cda70d"
	Version    string                           `json:"version,omitempty"`      // badge数据版本号, 示例值: "1664360599355"
	Extra      *string                          `json:"extra,omitempty"`        // badge extra 信息, 示例值: "{}"
	Pc         *SetApplicationAppBadgeReqPc     `json:"pc,omitempty"`           // pc端badge数量
	Mobile     *SetApplicationAppBadgeReqMobile `json:"mobile,omitempty"`       // 移动端badge数量
}

// SetApplicationAppBadgeReqMobile ...
type SetApplicationAppBadgeReqMobile struct {
	WebApp *int64 `json:"web_app,omitempty"` // h5能力的badge数量, 示例值: 1, 取值范围: `0` ～ `2147483647`
	Gadget *int64 `json:"gadget,omitempty"`  // 小程序能力的badge数量, 示例值: 2, 取值范围: `0` ～ `2147483647`
}

// SetApplicationAppBadgeReqPc ...
type SetApplicationAppBadgeReqPc struct {
	WebApp *int64 `json:"web_app,omitempty"` // h5能力的badge数量, 示例值: 1, 取值范围: `0` ～ `2147483647`
	Gadget *int64 `json:"gadget,omitempty"`  // 小程序能力的badge数量, 示例值: 2, 取值范围: `0` ～ `2147483647`
}

// SetApplicationAppBadgeResp ...
type SetApplicationAppBadgeResp struct {
}

// setApplicationAppBadgeResp ...
type setApplicationAppBadgeResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *SetApplicationAppBadgeResp `json:"data,omitempty"`
}
