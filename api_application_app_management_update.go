// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateApplicationAppManagement 可停用或启用企业内已安装的自建应用与商店应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-management/update
func (r *ApplicationService) UpdateApplicationAppManagement(ctx context.Context, request *UpdateApplicationAppManagementReq, options ...MethodOptionFunc) (*UpdateApplicationAppManagementResp, *Response, error) {
	if r.cli.mock.mockApplicationUpdateApplicationAppManagement != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Application#UpdateApplicationAppManagement mock enable")
		return r.cli.mock.mockApplicationUpdateApplicationAppManagement(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "UpdateApplicationAppManagement",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id/management",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateApplicationAppManagementResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationUpdateApplicationAppManagement mock ApplicationUpdateApplicationAppManagement method
func (r *Mock) MockApplicationUpdateApplicationAppManagement(f func(ctx context.Context, request *UpdateApplicationAppManagementReq, options ...MethodOptionFunc) (*UpdateApplicationAppManagementResp, *Response, error)) {
	r.mockApplicationUpdateApplicationAppManagement = f
}

// UnMockApplicationUpdateApplicationAppManagement un-mock ApplicationUpdateApplicationAppManagement method
func (r *Mock) UnMockApplicationUpdateApplicationAppManagement() {
	r.mockApplicationUpdateApplicationAppManagement = nil
}

// UpdateApplicationAppManagementReq ...
type UpdateApplicationAppManagementReq struct {
	AppID  string `path:"app_id" json:"-"`  // 应用ID, 示例值: "cli_a4517c8461f8100a"
	Enable *bool  `json:"enable,omitempty"` // 启用/停用应用, 示例值: true
}

// UpdateApplicationAppManagementResp ...
type UpdateApplicationAppManagementResp struct {
}

// updateApplicationAppManagementResp ...
type updateApplicationAppManagementResp struct {
	Code  int64                               `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                              `json:"msg,omitempty"`  // 错误描述
	Data  *UpdateApplicationAppManagementResp `json:"data,omitempty"`
	Error *ErrorDetail                        `json:"error,omitempty"`
}
