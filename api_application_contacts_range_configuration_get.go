// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetApplicationContactsRangeConfiguration 获取当前企业内某个自建应用线上实际生效的通讯录权限范围配置。
//
// 通讯录权限范围是指应用在调用通讯录相关接口, 可以获取的部门和用户的数据范围。应用无法获取权限范围之外的通讯录数据。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/contacts_range_configuration
// new doc: https://open.feishu.cn/document/server-docs/application-v6/admin/contacts_range_configuration
func (r *ApplicationService) GetApplicationContactsRangeConfiguration(ctx context.Context, request *GetApplicationContactsRangeConfigurationReq, options ...MethodOptionFunc) (*GetApplicationContactsRangeConfigurationResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationContactsRangeConfiguration != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Application#GetApplicationContactsRangeConfiguration mock enable")
		return r.cli.mock.mockApplicationGetApplicationContactsRangeConfiguration(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationContactsRangeConfiguration",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id/contacts_range_configuration",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationContactsRangeConfigurationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationContactsRangeConfiguration mock ApplicationGetApplicationContactsRangeConfiguration method
func (r *Mock) MockApplicationGetApplicationContactsRangeConfiguration(f func(ctx context.Context, request *GetApplicationContactsRangeConfigurationReq, options ...MethodOptionFunc) (*GetApplicationContactsRangeConfigurationResp, *Response, error)) {
	r.mockApplicationGetApplicationContactsRangeConfiguration = f
}

// UnMockApplicationGetApplicationContactsRangeConfiguration un-mock ApplicationGetApplicationContactsRangeConfiguration method
func (r *Mock) UnMockApplicationGetApplicationContactsRangeConfiguration() {
	r.mockApplicationGetApplicationContactsRangeConfiguration = nil
}

// GetApplicationContactsRangeConfigurationReq ...
type GetApplicationContactsRangeConfigurationReq struct {
	AppID            string            `path:"app_id" json:"-"`              // 应用的 app_id, 可以在[开发者后台](https://open.feishu.cn/app) > 凭证与基础信息页查看, 示例值: "cli_9b445f5258795107"
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值: 20, 默认值: `50`, 取值范围: `1` ～ `100`
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: new-e3c5a0627cdf0c2e057da7257b90376a
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 返回值的部门ID的类型, 示例值: department_id, 可选值有: department_id: 以自定义department_id来标识部门, open_department_id: 以open_department_id来标识部门, 默认值: `open_department_id`
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// GetApplicationContactsRangeConfigurationResp ...
type GetApplicationContactsRangeConfigurationResp struct {
	ContactsRange *GetApplicationContactsRangeConfigurationRespContactsRange `json:"contacts_range,omitempty"` // 获取线上已生效的通讯录权限范围配置
	HasMore       bool                                                       `json:"has_more,omitempty"`       // 是否还有更多项
	PageToken     string                                                     `json:"page_token,omitempty"`     // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
}

// GetApplicationContactsRangeConfigurationRespContactsRange ...
type GetApplicationContactsRangeConfigurationRespContactsRange struct {
	ContactsScopeType string                                                                `json:"contacts_scope_type,omitempty"` // 通讯录可见性类型, 可选值有: equal_to_availability: 与应用可用范围一致, 可通过[获取应用在企业内的可用范围](https://open.feishu.cn/document/ukTMukTMukTM/uIjM3UjLyIzN14iMycTN)接口查询具体人员, some: 部分成员, 具体人员参见visible_list, all: 全部成员
	VisibleList       *GetApplicationContactsRangeConfigurationRespContactsRangeVisibleList `json:"visible_list,omitempty"`        // 通讯录权限范围的可用名单
}

// GetApplicationContactsRangeConfigurationRespContactsRangeVisibleList ...
type GetApplicationContactsRangeConfigurationRespContactsRangeVisibleList struct {
	OpenIDs       []string `json:"open_ids,omitempty"`       // 通讯录权限范围的可用成员 id 列表, 按照user_id_type返回
	DepartmentIDs []string `json:"department_ids,omitempty"` // 通讯录权限范围的可用部门的 id 列表
	GroupIDs      []string `json:"group_ids,omitempty"`      // 通讯录权限范围的可用用户组 id 列表
}

// getApplicationContactsRangeConfigurationResp ...
type getApplicationContactsRangeConfigurationResp struct {
	Code  int64                                         `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                                        `json:"msg,omitempty"`  // 错误描述
	Data  *GetApplicationContactsRangeConfigurationResp `json:"data,omitempty"`
	Error *ErrorDetail                                  `json:"error,omitempty"`
}
