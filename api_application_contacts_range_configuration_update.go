// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateApplicationContactsRangeConfiguration 该接口用于更新当前企业内自建应用或已安装的商店应用的通讯录权限范围配置。更新后线上立即生效。
//
// 通讯录权限范围是指应用在调用通讯录相关接口, 可以获取的部门和用户的数据范围。应用无法获取权限范围之外的通讯录数据。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-contacts_range/patch
func (r *ApplicationService) UpdateApplicationContactsRangeConfiguration(ctx context.Context, request *UpdateApplicationContactsRangeConfigurationReq, options ...MethodOptionFunc) (*UpdateApplicationContactsRangeConfigurationResp, *Response, error) {
	if r.cli.mock.mockApplicationUpdateApplicationContactsRangeConfiguration != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#UpdateApplicationContactsRangeConfiguration mock enable")
		return r.cli.mock.mockApplicationUpdateApplicationContactsRangeConfiguration(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "UpdateApplicationContactsRangeConfiguration",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id/contacts_range",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateApplicationContactsRangeConfigurationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationUpdateApplicationContactsRangeConfiguration mock ApplicationUpdateApplicationContactsRangeConfiguration method
func (r *Mock) MockApplicationUpdateApplicationContactsRangeConfiguration(f func(ctx context.Context, request *UpdateApplicationContactsRangeConfigurationReq, options ...MethodOptionFunc) (*UpdateApplicationContactsRangeConfigurationResp, *Response, error)) {
	r.mockApplicationUpdateApplicationContactsRangeConfiguration = f
}

// UnMockApplicationUpdateApplicationContactsRangeConfiguration un-mock ApplicationUpdateApplicationContactsRangeConfiguration method
func (r *Mock) UnMockApplicationUpdateApplicationContactsRangeConfiguration() {
	r.mockApplicationUpdateApplicationContactsRangeConfiguration = nil
}

// UpdateApplicationContactsRangeConfigurationReq ...
type UpdateApplicationContactsRangeConfigurationReq struct {
	AppID             string                                                        `path:"app_id" json:"-"`               // 应用id, 示例值: "cli_dsfjksdfee1"
	UserIDType        *IDType                                                       `query:"user_id_type" json:"-"`        // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType  *DepartmentIDType                                             `query:"department_id_type" json:"-"`  // 部门id类型, 示例值: open_department_id, 可选值有: open_department_id: 以open_department_id标识部门, department_id: 以department_id标识部门, 默认值: `open_department_id`
	ContactsRangeType string                                                        `json:"contacts_range_type,omitempty"` // 更新范围方式, 示例值: "some", 可选值有: equal_to_availability: 与应用可用性始终保持一致, some: 部分成员, all: 全部成员范围
	AddVisibleList    *UpdateApplicationContactsRangeConfigurationReqAddVisibleList `json:"add_visible_list,omitempty"`    // 通讯录权限范围新增列表, 仅contacts_range_type为some 时生效并进行增量更新
	DelVisibleList    *UpdateApplicationContactsRangeConfigurationReqDelVisibleList `json:"del_visible_list,omitempty"`    // 从通讯录权限范围删除的列表, 仅contacts_range_type为some 时生效并进行增量更新
}

// UpdateApplicationContactsRangeConfigurationReqAddVisibleList ...
type UpdateApplicationContactsRangeConfigurationReqAddVisibleList struct {
	UserIDs       []string `json:"user_ids,omitempty"`       // 成员id列表 id类型根据user_id_type参数指定, 示例值: ["ou_7dab8a3d3cdcc9da365777c7ad535d62"], 最大长度: `100`
	DepartmentIDs []string `json:"department_ids,omitempty"` // 部门id列表 id类型根据department_id_type参数指定, 示例值: ["od-4e6ac4d14bcd5071a37a39de902c7141"], 最大长度: `100`
	GroupIDs      []string `json:"group_ids,omitempty"`      // 用户组列表, 示例值: ["g12334"], 最大长度: `100`
}

// UpdateApplicationContactsRangeConfigurationReqDelVisibleList ...
type UpdateApplicationContactsRangeConfigurationReqDelVisibleList struct {
	UserIDs       []string `json:"user_ids,omitempty"`       // 成员id列表 id类型根据user_id_type参数指定, 示例值: ["ou_7dab8a3d3cdcc9da365777c7ad535d62"], 最大长度: `100`
	DepartmentIDs []string `json:"department_ids,omitempty"` // 部门id列表 id类型根据department_id_type参数指定, 示例值: ["od-4e6ac4d14bcd5071a37a39de902c7141"], 最大长度: `100`
	GroupIDs      []string `json:"group_ids,omitempty"`      // 用户组列表, 示例值: ["g12334"], 最大长度: `100`
}

// UpdateApplicationContactsRangeConfigurationResp ...
type UpdateApplicationContactsRangeConfigurationResp struct {
}

// updateApplicationContactsRangeConfigurationResp ...
type updateApplicationContactsRangeConfigurationResp struct {
	Code int64                                            `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateApplicationContactsRangeConfigurationResp `json:"data,omitempty"`
}
