// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateApplication 更新应用的分组信息（分组会影响应用在工作台中的分类情况, 请谨慎更新）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/patch
// new doc: https://open.feishu.cn/document/server-docs/application-v6/application/patch
func (r *ApplicationService) UpdateApplication(ctx context.Context, request *UpdateApplicationReq, options ...MethodOptionFunc) (*UpdateApplicationResp, *Response, error) {
	if r.cli.mock.mockApplicationUpdateApplication != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Application#UpdateApplication mock enable")
		return r.cli.mock.mockApplicationUpdateApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "UpdateApplication",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationUpdateApplication mock ApplicationUpdateApplication method
func (r *Mock) MockApplicationUpdateApplication(f func(ctx context.Context, request *UpdateApplicationReq, options ...MethodOptionFunc) (*UpdateApplicationResp, *Response, error)) {
	r.mockApplicationUpdateApplication = f
}

// UnMockApplicationUpdateApplication un-mock ApplicationUpdateApplication method
func (r *Mock) UnMockApplicationUpdateApplication() {
	r.mockApplicationUpdateApplication = nil
}

// UpdateApplicationReq ...
type UpdateApplicationReq struct {
	AppID            string   `path:"app_id" json:"-"`             // 应用的 id, 示例值: "cli_9b445f5258795107"
	Lang             string   `query:"lang" json:"-"`              // 指定返回的语言, 示例值: zh_cn, 可选值有: zh_cn: 中文, en_us: 英文, ja_jp: 日文
	CommonCategories []string `json:"common_categories,omitempty"` // 应用分类的国际化描述, 示例值: ["分析工具"], 长度范围: `1` ～ `3`
}

// UpdateApplicationResp ...
type UpdateApplicationResp struct {
}

// updateApplicationResp ...
type updateApplicationResp struct {
	Code  int64                  `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                 `json:"msg,omitempty"`  // 错误描述
	Data  *UpdateApplicationResp `json:"data,omitempty"`
	Error *ErrorDetail           `json:"error,omitempty"`
}
