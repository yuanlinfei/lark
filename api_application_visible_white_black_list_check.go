// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CheckApplicationVisibleWhiteBlackList 该接口用于查询用户、部门、用户组是否在应用的可用或禁用名单中
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-visibility/check_white_black_list
// new doc: https://open.feishu.cn/document/server-docs/application-v6/admin/check_white_black_list
func (r *ApplicationService) CheckApplicationVisibleWhiteBlackList(ctx context.Context, request *CheckApplicationVisibleWhiteBlackListReq, options ...MethodOptionFunc) (*CheckApplicationVisibleWhiteBlackListResp, *Response, error) {
	if r.cli.mock.mockApplicationCheckApplicationVisibleWhiteBlackList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Application#CheckApplicationVisibleWhiteBlackList mock enable")
		return r.cli.mock.mockApplicationCheckApplicationVisibleWhiteBlackList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "CheckApplicationVisibleWhiteBlackList",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id/visibility/check_white_black_list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(checkApplicationVisibleWhiteBlackListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationCheckApplicationVisibleWhiteBlackList mock ApplicationCheckApplicationVisibleWhiteBlackList method
func (r *Mock) MockApplicationCheckApplicationVisibleWhiteBlackList(f func(ctx context.Context, request *CheckApplicationVisibleWhiteBlackListReq, options ...MethodOptionFunc) (*CheckApplicationVisibleWhiteBlackListResp, *Response, error)) {
	r.mockApplicationCheckApplicationVisibleWhiteBlackList = f
}

// UnMockApplicationCheckApplicationVisibleWhiteBlackList un-mock ApplicationCheckApplicationVisibleWhiteBlackList method
func (r *Mock) UnMockApplicationCheckApplicationVisibleWhiteBlackList() {
	r.mockApplicationCheckApplicationVisibleWhiteBlackList = nil
}

// CheckApplicationVisibleWhiteBlackListReq ...
type CheckApplicationVisibleWhiteBlackListReq struct {
	AppID            string            `path:"app_id" json:"-"`              // 应用的 AppID, 可以在[开发者后台](https://open.feishu.cn/app) > 凭证与基础信息页查看, * 仅查询本应用信息时, 可填应用自身AppID, * 当值为其他应用的App ID时, 必须申请以下权限: 获取应用信息, 示例值: "cli_a3axxx01b"
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值: user_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 部门ID类型, 示例值: department_id, 可选值有: department_id: 以自定义department_id来标识部门, open_department_id: 以open_department_id来标识部门, 默认值: `department_id`
	UserIDs          []string          `json:"user_ids,omitempty"`           // 想要查询的用户id列表, 按照user_id_type录入, 最多录入100个, 可以调用[获取部门直属用户列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/find_by_department)接口获取, 示例值: ["ou_d317f090b7258ad0372aa53963cda70d"], 最大长度: `100`
	DepartmentIDs    []string          `json:"department_ids,omitempty"`     // 想要查询的部门的 id 列表, 最多录入100个, 可以[调用获取子部门列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/children)接口获取, 示例值: ["od-aa2c50a04769feefededb7a05b7525a8"], 最大长度: `100`
	GroupIDs         []string          `json:"group_ids,omitempty"`          // 想要查询的用户组id列表, 最多录入100个, 可以调用[查询用户组列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist)接口获取, 示例值: ["96815a9cd9beg8g4"], 最大长度: `100`
}

// CheckApplicationVisibleWhiteBlackListResp ...
type CheckApplicationVisibleWhiteBlackListResp struct {
	UserVisibilityList       []*CheckApplicationVisibleWhiteBlackListRespUserVisibility       `json:"user_visibility_list,omitempty"`       // 查询的用户可见性结果列表, 如果用户在白名单或付费白名单, 且不在黑名单中, 则可见该应用
	DepartmentVisibilityList []*CheckApplicationVisibleWhiteBlackListRespDepartmentVisibility `json:"department_visibility_list,omitempty"` // 查询的部门可见性结果列表, 如果部门在白名单, 且不在黑名单, 则该部门下的用户可见该应用
	GroupVisibilityList      []*CheckApplicationVisibleWhiteBlackListRespGroupVisibility      `json:"group_visibility_list,omitempty"`      // 查询的用户组可见性结果列表, 如果用户组在白名单, 且不在黑名单, 则该用户组下的用户可见该应用
}

// CheckApplicationVisibleWhiteBlackListRespDepartmentVisibility ...
type CheckApplicationVisibleWhiteBlackListRespDepartmentVisibility struct {
	DepartmentID string `json:"department_id,omitempty"` // 查询的部门ID
	InWhiteList  bool   `json:"in_white_list,omitempty"` // 是否在白名单, 可选值: true: 在白名单, false: 不在白名单
	InBlackList  bool   `json:"in_black_list,omitempty"` // 是否在黑名单, 可选值: true: 在黑名单, false: 不在黑名单
}

// CheckApplicationVisibleWhiteBlackListRespGroupVisibility ...
type CheckApplicationVisibleWhiteBlackListRespGroupVisibility struct {
	GroupID     string `json:"group_id,omitempty"`      // 查询的用户组ID
	InWhiteList bool   `json:"in_white_list,omitempty"` // 是否在白名单, 可选值: true: 在白名单, false: 不在白名单
	InBlackList bool   `json:"in_black_list,omitempty"` // 是否在黑名单, 可选值: true: 在黑名单, false: 不在黑名单
}

// CheckApplicationVisibleWhiteBlackListRespUserVisibility ...
type CheckApplicationVisibleWhiteBlackListRespUserVisibility struct {
	UserID      string `json:"user_id,omitempty"`       // 查询的用户ID, ID类型和user_id_type传参类型一致
	InWhiteList bool   `json:"in_white_list,omitempty"` // 是否在白名单, 可选值: true: 在白名单, false: 不在白名单
	InBlackList bool   `json:"in_black_list,omitempty"` // 是否在黑名单, 可选值: true: 在黑名单, false: 不在黑名单
	InPaidList  bool   `json:"in_paid_list,omitempty"`  // 是否在付费名单, 可选值: true: 在付费名单, false: 不在付费名单
}

// checkApplicationVisibleWhiteBlackListResp ...
type checkApplicationVisibleWhiteBlackListResp struct {
	Code  int64                                      `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                                     `json:"msg,omitempty"`  // 错误描述
	Data  *CheckApplicationVisibleWhiteBlackListResp `json:"data,omitempty"`
	Error *ErrorDetail                               `json:"error,omitempty"`
}
