// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetApprovalComment 根据 Instance Code 获取某个审批实例下的全部评论与评论回复（不包含审批同意、拒绝、转交等附加的理由或意见）。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance-comment/list
// new doc: https://open.feishu.cn/document/server-docs/approval-v4/instance-comment/list
func (r *ApprovalService) GetApprovalComment(ctx context.Context, request *GetApprovalCommentReq, options ...MethodOptionFunc) (*GetApprovalCommentResp, *Response, error) {
	if r.cli.mock.mockApprovalGetApprovalComment != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Approval#GetApprovalComment mock enable")
		return r.cli.mock.mockApprovalGetApprovalComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "GetApprovalComment",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/approval/v4/instances/:instance_id/comments",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApprovalCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalGetApprovalComment mock ApprovalGetApprovalComment method
func (r *Mock) MockApprovalGetApprovalComment(f func(ctx context.Context, request *GetApprovalCommentReq, options ...MethodOptionFunc) (*GetApprovalCommentResp, *Response, error)) {
	r.mockApprovalGetApprovalComment = f
}

// UnMockApprovalGetApprovalComment un-mock ApprovalGetApprovalComment method
func (r *Mock) UnMockApprovalGetApprovalComment() {
	r.mockApprovalGetApprovalComment = nil
}

// GetApprovalCommentReq ...
type GetApprovalCommentReq struct {
	InstanceID string  `path:"instance_id" json:"-"`   // 审批实例code（或者租户自定义审批实例ID）, 示例值: "6A123516-FB88-470D-A428-9AF58B71B3C0"
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: "open_id", 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserID     string  `query:"user_id" json:"-"`      // 用户ID, 示例值: "e5286g26"
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: "nF1ZXJ5VGhlbkZldGNoCgAAAAAA6PZwFmUzSldvTC1yU"
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值: 10, 最大值: `1000`
}

// GetApprovalCommentResp ...
type GetApprovalCommentResp struct {
	Comments []*GetApprovalCommentRespComment `json:"comments,omitempty"` // 评论数据列表
}

// GetApprovalCommentRespComment ...
type GetApprovalCommentRespComment struct {
	ID          string                                 `json:"id,omitempty"`           // 评论ID
	Content     string                                 `json:"content,omitempty"`      // 评论内容
	CreateTime  string                                 `json:"create_time,omitempty"`  // 评论创建时间
	UpdateTime  string                                 `json:"update_time,omitempty"`  // 评论更新时间
	IsDelete    int64                                  `json:"is_delete,omitempty"`    // 是否删除, 0:未删除, 1:已删除
	Replies     []*GetApprovalCommentRespCommentReplie `json:"replies,omitempty"`      // 评论的回复
	AtInfoList  []*GetApprovalCommentRespCommentAtInfo `json:"at_info_list,omitempty"` // 评论中艾特人信息
	Commentator string                                 `json:"commentator,omitempty"`  // 评论创建人
	Extra       string                                 `json:"extra,omitempty"`        // 附加字段
}

// GetApprovalCommentRespCommentAtInfo ...
type GetApprovalCommentRespCommentAtInfo struct {
	UserID string `json:"user_id,omitempty"` // 被艾特人的ID
	Name   string `json:"name,omitempty"`    // 被艾特人的姓名
	Offset string `json:"offset,omitempty"`  // 被艾特人在评论中的位置, 从0开始
}

// GetApprovalCommentRespCommentReplie ...
type GetApprovalCommentRespCommentReplie struct {
	ID          string                                       `json:"id,omitempty"`           // 评论ID
	Content     string                                       `json:"content,omitempty"`      // 评论内容
	CreateTime  string                                       `json:"create_time,omitempty"`  // 评论创建时间
	UpdateTime  string                                       `json:"update_time,omitempty"`  // 评论更新时间
	IsDelete    int64                                        `json:"is_delete,omitempty"`    // 是否删除, 0:未删除, 1:已删除
	AtInfoList  []*GetApprovalCommentRespCommentReplieAtInfo `json:"at_info_list,omitempty"` // 评论中艾特人信息
	Commentator string                                       `json:"commentator,omitempty"`  // 评论创建人
	Extra       string                                       `json:"extra,omitempty"`        // 附加字段
}

// GetApprovalCommentRespCommentReplieAtInfo ...
type GetApprovalCommentRespCommentReplieAtInfo struct {
	UserID string `json:"user_id,omitempty"` // 被艾特人的ID
	Name   string `json:"name,omitempty"`    // 被艾特人的姓名
	Offset string `json:"offset,omitempty"`  // 被艾特人在评论中的位置, 从0开始
}

// getApprovalCommentResp ...
type getApprovalCommentResp struct {
	Code  int64                   `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                  `json:"msg,omitempty"`  // 错误描述
	Data  *GetApprovalCommentResp `json:"data,omitempty"`
	Error *ErrorDetail            `json:"error,omitempty"`
}
