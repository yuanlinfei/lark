// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
	"io"
)

// DownloadAttendanceFile 通过文件 ID 下载指定的文件。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/download
// new doc: https://open.feishu.cn/document/server-docs/attendance-v1/user_setting/download
func (r *AttendanceService) DownloadAttendanceFile(ctx context.Context, request *DownloadAttendanceFileReq, options ...MethodOptionFunc) (*DownloadAttendanceFileResp, *Response, error) {
	if r.cli.mock.mockAttendanceDownloadAttendanceFile != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Attendance#DownloadAttendanceFile mock enable")
		return r.cli.mock.mockAttendanceDownloadAttendanceFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "DownloadAttendanceFile",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/files/:file_id/download",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(downloadAttendanceFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceDownloadAttendanceFile mock AttendanceDownloadAttendanceFile method
func (r *Mock) MockAttendanceDownloadAttendanceFile(f func(ctx context.Context, request *DownloadAttendanceFileReq, options ...MethodOptionFunc) (*DownloadAttendanceFileResp, *Response, error)) {
	r.mockAttendanceDownloadAttendanceFile = f
}

// UnMockAttendanceDownloadAttendanceFile un-mock AttendanceDownloadAttendanceFile method
func (r *Mock) UnMockAttendanceDownloadAttendanceFile() {
	r.mockAttendanceDownloadAttendanceFile = nil
}

// DownloadAttendanceFileReq ...
type DownloadAttendanceFileReq struct {
	FileID string `path:"file_id" json:"-"` // 文件 ID, 示例值: "xxxxxb306842b1c189bc5212eefxxxxx"
}

// downloadAttendanceFileResp ...
type downloadAttendanceFileResp struct {
	Code  int64                       `json:"code,omitempty"`
	Msg   string                      `json:"msg,omitempty"`
	Data  *DownloadAttendanceFileResp `json:"data,omitempty"`
	Error *ErrorDetail                `json:"error,omitempty"`
}

func (r *downloadAttendanceFileResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadAttendanceFileResp{}
	}
	r.Data.File = file
}

// DownloadAttendanceFileResp ...
type DownloadAttendanceFileResp struct {
	File io.Reader `json:"file,omitempty"`
}
