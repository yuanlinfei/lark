// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateAttendanceUserTaskRemedy 对于只使用飞书考勤系统而未使用飞书审批系统的企业, 可以通过该接口, 将在三方审批系统中发起的补卡审批数据, 写入到飞书考勤系统中, 状态为审批中。写入后可以由[通知审批状态更新](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/approval_info/process) 进行状态更新
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/create
// new doc: https://open.feishu.cn/document/server-docs/attendance-v1/user_task_remedy/create
func (r *AttendanceService) CreateAttendanceUserTaskRemedy(ctx context.Context, request *CreateAttendanceUserTaskRemedyReq, options ...MethodOptionFunc) (*CreateAttendanceUserTaskRemedyResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateAttendanceUserTaskRemedy != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Attendance#CreateAttendanceUserTaskRemedy mock enable")
		return r.cli.mock.mockAttendanceCreateAttendanceUserTaskRemedy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "CreateAttendanceUserTaskRemedy",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_task_remedys",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createAttendanceUserTaskRemedyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceCreateAttendanceUserTaskRemedy mock AttendanceCreateAttendanceUserTaskRemedy method
func (r *Mock) MockAttendanceCreateAttendanceUserTaskRemedy(f func(ctx context.Context, request *CreateAttendanceUserTaskRemedyReq, options ...MethodOptionFunc) (*CreateAttendanceUserTaskRemedyResp, *Response, error)) {
	r.mockAttendanceCreateAttendanceUserTaskRemedy = f
}

// UnMockAttendanceCreateAttendanceUserTaskRemedy un-mock AttendanceCreateAttendanceUserTaskRemedy method
func (r *Mock) UnMockAttendanceCreateAttendanceUserTaskRemedy() {
	r.mockAttendanceCreateAttendanceUserTaskRemedy = nil
}

// CreateAttendanceUserTaskRemedyReq ...
type CreateAttendanceUserTaskRemedyReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体和响应体中的 user_id 的员工工号类型, 示例值: employee_id, 可选值有: employee_id: 员工 employee ID, 即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, employee_no: 员工工号, 即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserID       string       `json:"user_id,omitempty"`       // 用户 ID, 示例值: "abd754f7"
	RemedyDate   int64        `json:"remedy_date,omitempty"`   // 补卡日期, 示例值: 20210701
	PunchNo      int64        `json:"punch_no,omitempty"`      // 第几次上下班, 0: 第 1 次上下班, 1: 第 2 次上下班, 2: 第 3 次上下班, 自由班制填 0, 示例值: 0
	WorkType     int64        `json:"work_type,omitempty"`     // 上班 / 下班, 1: 上班, 2: 下班, 自由班制填 0, 示例值: 1
	RemedyTime   string       `json:"remedy_time,omitempty"`   // 补卡时间, 时间格式为 yyyy-MM-dd HH:mm, 示例值: "2021-07-01 08:00"
	Reason       string       `json:"reason,omitempty"`        // 补卡原因, 示例值: "忘记打卡"
	Time         *string      `json:"time,omitempty"`          // 补卡时间, 精确到秒的时间戳, 示例值: "1611476284"
}

// CreateAttendanceUserTaskRemedyResp ...
type CreateAttendanceUserTaskRemedyResp struct {
	UserRemedy *CreateAttendanceUserTaskRemedyRespUserRemedy `json:"user_remedy,omitempty"` // 补卡审批信息
}

// CreateAttendanceUserTaskRemedyRespUserRemedy ...
type CreateAttendanceUserTaskRemedyRespUserRemedy struct {
	UserID     string `json:"user_id,omitempty"`     // 用户 ID
	RemedyDate int64  `json:"remedy_date,omitempty"` // 补卡日期
	PunchNo    int64  `json:"punch_no,omitempty"`    // 第几次上下班, 0: 第 1 次上下班, 1: 第 2 次上下班, 2: 第 3 次上下班, 自由班制填 0
	WorkType   int64  `json:"work_type,omitempty"`   // 上班 / 下班, 1: 上班, 2: 下班, 自由班制填 0
	ApprovalID string `json:"approval_id,omitempty"` // 审批 ID
	RemedyTime string `json:"remedy_time,omitempty"` // 补卡时间, 时间格式为 yyyy-MM-dd HH:mm
	Status     int64  `json:"status,omitempty"`      // 补卡状态（默认为审批中）, 可选值有: 0: 审批中, 1: 未通过, 2: 已通过, 3: 已取消, 4: 通过后撤回
	Reason     string `json:"reason,omitempty"`      // 补卡原因
	Time       string `json:"time,omitempty"`        // 补卡时间, 精确到秒的时间戳
	TimeZone   string `json:"time_zone,omitempty"`   // 补卡时考勤组时区
	CreateTime string `json:"create_time,omitempty"` // 补卡发起时间, 精确到秒的时间戳
	UpdateTime string `json:"update_time,omitempty"` // 补卡状态更新时间, 精确到秒的时间戳
}

// createAttendanceUserTaskRemedyResp ...
type createAttendanceUserTaskRemedyResp struct {
	Code  int64                               `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                              `json:"msg,omitempty"`  // 错误描述
	Data  *CreateAttendanceUserTaskRemedyResp `json:"data,omitempty"`
	Error *ErrorDetail                        `json:"error,omitempty"`
}
