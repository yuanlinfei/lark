// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetBitableRecordList 该接口用于列出数据表中的现有记录, 单次最多列出 500 行记录, 支持分页获取。
//
// ::: note
// 首次调用请参考 [云文档接口快速入门](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)[多维表格接口接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/list
// new doc: https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-record/list
//
// Deprecated
func (r *BitableService) GetBitableRecordList(ctx context.Context, request *GetBitableRecordListReq, options ...MethodOptionFunc) (*GetBitableRecordListResp, *Response, error) {
	if r.cli.mock.mockBitableGetBitableRecordList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Bitable#GetBitableRecordList mock enable")
		return r.cli.mock.mockBitableGetBitableRecordList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "GetBitableRecordList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBitableRecordListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableGetBitableRecordList mock BitableGetBitableRecordList method
func (r *Mock) MockBitableGetBitableRecordList(f func(ctx context.Context, request *GetBitableRecordListReq, options ...MethodOptionFunc) (*GetBitableRecordListResp, *Response, error)) {
	r.mockBitableGetBitableRecordList = f
}

// UnMockBitableGetBitableRecordList un-mock BitableGetBitableRecordList method
func (r *Mock) UnMockBitableGetBitableRecordList() {
	r.mockBitableGetBitableRecordList = nil
}

// GetBitableRecordListReq ...
type GetBitableRecordListReq struct {
	AppToken          string  `path:"app_token" json:"-"`            // 多维表格的唯一标识符 [app_token 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#8121eebe), 示例值: "bascnCMII2ORej2RItqpZZUNMIe"
	TableID           string  `path:"table_id" json:"-"`             // 多维表格数据表的唯一标识符 [table_id 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#735fe883), 示例值: "tblxI2tWaxP5dG7p"
	ViewID            *string `query:"view_id" json:"-"`             // 视图的唯一标识符, 获取指定视图下的记录[view_id 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#8121eebe), 注意: 当 filter 参数 或 sort 参数不为空时, 请求视为对数据表中的全部数据做条件过滤, 指定的view_id 会被忽略, 示例值: vewqhz51lk
	Filter            *string `query:"filter" json:"-"`              // 筛选参数, 用于指定本次查询的筛选条件, 注意: 1.不支持对“人员”以及“关联字段”的属性进行过滤筛选, 如人员的 OpenID, 2.指定筛选条件时, 参数长度不超过2000个字符, 详细请参考[筛选条件支持的公式](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/filter), 示例值: AND(CurrentValue.[身高]>180, CurrentValue.[体重]>150)
	Sort              *string `query:"sort" json:"-"`                // 排序参数, 用于指定本次查询返回结果的顺序, 注意: 1.不支持对带“公式”和“关联字段”的表的使用, 2.指定排序条件时, 参数长度不超过1000字符, 3.当存在多个排序条件时, 数据将根据条件顺序逐层排序, 示例值: ["字段1 DESC", "字段2 ASC"]
	FieldNames        *string `query:"field_names" json:"-"`         // 字段名称, 用于指定本次查询返回记录中包含的字段, 示例值: ["字段1", "字段2"]
	TextFieldAsArray  *bool   `query:"text_field_as_array" json:"-"` // 控制多行文本字段数据的返回格式, true 表示以数组形式返回, 注意: 1.多行文本中如果有超链接部分, 则会返回链接的 URL, 2.目前可以返回多行文本中 URL 类型为多维表格链接、飞书 doc、飞书 sheet的URL类型以及@人员的数据结构, 示例值: true
	UserIDType        *IDType `query:"user_id_type" json:"-"`        // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DisplayFormulaRef *bool   `query:"display_formula_ref" json:"-"` // 默认值为false, 返回当前字段的默认类型和结果；当该参数的值为true时, 公式 和 查找引用 类型的字段, 将会以 被引用字段 的格式返回, 示例值: true
	AutomaticFields   *bool   `query:"automatic_fields" json:"-"`    // 控制是否返回自动计算的字段, 例如 `created_by`/`created_time`/`last_modified_by`/`last_modified_time`, true 表示返回, 示例值: true
	PageToken         *string `query:"page_token" json:"-"`          // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: recn0hoyXL
	PageSize          *int64  `query:"page_size" json:"-"`           // 分页大小, 示例值: 10, 默认值: `20`, 最大值: `500`
}

// GetBitableRecordListResp ...
type GetBitableRecordListResp struct {
	HasMore   bool                            `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                          `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	Total     int64                           `json:"total,omitempty"`      // 总记录数
	Items     []*GetBitableRecordListRespItem `json:"items,omitempty"`      // 本次请求返回的全部记录列表
}

// GetBitableRecordListRespItem ...
type GetBitableRecordListRespItem struct {
	RecordID         string                                      `json:"record_id,omitempty"`          // 一条记录的唯一标识 id [record_id 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#15d8db94)
	CreatedBy        *GetBitableRecordListRespItemCreatedBy      `json:"created_by,omitempty"`         // 该记录的创建人
	CreatedTime      int64                                       `json:"created_time,omitempty"`       // 该记录的创建时间
	LastModifiedBy   *GetBitableRecordListRespItemLastModifiedBy `json:"last_modified_by,omitempty"`   // 该记录最新一次更新的修改人
	LastModifiedTime int64                                       `json:"last_modified_time,omitempty"` // 该记录最近一次的更新时间
	Fields           map[string]interface{}                      `json:"fields,omitempty"`             // 数据表的字段, 即数据表的列, 当前接口支持的字段类型请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#31f78a3c), 不同类型字段的数据结构请参考[数据结构概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/development-guide/bitable-structure)
}

// GetBitableRecordListRespItemCreatedBy ...
type GetBitableRecordListRespItemCreatedBy struct {
	ID        string `json:"id,omitempty"`         // 用户id, id类型等于user_id_type所指定的类型。
	Name      string `json:"name,omitempty"`       // 用户的中文名称
	EnName    string `json:"en_name,omitempty"`    // 用户的英文名称
	Email     string `json:"email,omitempty"`      // 用户的邮箱
	AvatarURL string `json:"avatar_url,omitempty"` // 头像链接, 字段权限要求（满足任一）: 以应用身份读取通讯录, 获取用户基本信息, 以应用身份访问通讯录, 读取通讯录
}

// GetBitableRecordListRespItemLastModifiedBy ...
type GetBitableRecordListRespItemLastModifiedBy struct {
	ID        string `json:"id,omitempty"`         // 用户id, id类型等于user_id_type所指定的类型。
	Name      string `json:"name,omitempty"`       // 用户的中文名称
	EnName    string `json:"en_name,omitempty"`    // 用户的英文名称
	Email     string `json:"email,omitempty"`      // 用户的邮箱
	AvatarURL string `json:"avatar_url,omitempty"` // 头像链接, 字段权限要求（满足任一）: 以应用身份读取通讯录, 获取用户基本信息, 以应用身份访问通讯录, 读取通讯录
}

// getBitableRecordListResp ...
type getBitableRecordListResp struct {
	Code  int64                     `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                    `json:"msg,omitempty"`  // 错误描述
	Data  *GetBitableRecordListResp `json:"data,omitempty"`
	Error *ErrorDetail              `json:"error,omitempty"`
}
