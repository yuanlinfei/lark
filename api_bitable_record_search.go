// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// SearchBitableRecord 该接口用于查询数据表中的现有记录, 单次最多查询 500 行记录, 支持分页获取。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/search
func (r *BitableService) SearchBitableRecord(ctx context.Context, request *SearchBitableRecordReq, options ...MethodOptionFunc) (*SearchBitableRecordResp, *Response, error) {
	if r.cli.mock.mockBitableSearchBitableRecord != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Bitable#SearchBitableRecord mock enable")
		return r.cli.mock.mockBitableSearchBitableRecord(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "SearchBitableRecord",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(searchBitableRecordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableSearchBitableRecord mock BitableSearchBitableRecord method
func (r *Mock) MockBitableSearchBitableRecord(f func(ctx context.Context, request *SearchBitableRecordReq, options ...MethodOptionFunc) (*SearchBitableRecordResp, *Response, error)) {
	r.mockBitableSearchBitableRecord = f
}

// UnMockBitableSearchBitableRecord un-mock BitableSearchBitableRecord method
func (r *Mock) UnMockBitableSearchBitableRecord() {
	r.mockBitableSearchBitableRecord = nil
}

// SearchBitableRecordReq ...
type SearchBitableRecordReq struct {
	AppToken        string                        `path:"app_token" json:"-"`         // 表格token, 示例值: "NQRxbRkBMa6OnZsjtERcxhNWnNh", 长度范围: `0` ～ `100` 字符
	TableID         string                        `path:"table_id" json:"-"`          // 表ID, 示例值: "tbl0xe5g8PP3U3cS", 长度范围: `0` ～ `50` 字符
	UserIDType      *IDType                       `query:"user_id_type" json:"-"`     // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PageToken       *string                       `query:"page_token" json:"-"`       // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=
	PageSize        *int64                        `query:"page_size" json:"-"`        // 分页大小, 示例值: 10, 默认值: `20`
	ViewID          *string                       `json:"view_id,omitempty"`          // 视图的唯一标识符, 获取指定视图下的记录[view_id 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#8121eebe), 注意: 当 filter 参数 或 sort 参数不为空时, 请求视为对数据表中的全部数据做条件过滤, 指定的view_id 会被忽略, 示例值: "vewqhz51lk", 长度范围: `0` ～ `50` 字符
	FieldNames      []string                      `json:"field_names,omitempty"`      // 字段名称, 用于指定本次查询返回记录中包含的字段, 示例值: ["字段1", "字段2"], 长度范围: `0` ～ `200`
	Sort            []*SearchBitableRecordReqSort `json:"sort,omitempty"`             // 排序条件, 长度范围: `0` ～ `100`
	Filter          *SearchBitableRecordReqFilter `json:"filter,omitempty"`           // 筛选条件
	AutomaticFields *bool                         `json:"automatic_fields,omitempty"` // 控制是否返回自动计算的字段, true 表示返回, 示例值: false
}

// SearchBitableRecordReqFilter ...
type SearchBitableRecordReqFilter struct {
	Conjunction *string                                  `json:"conjunction,omitempty"` // 条件逻辑连接词, 示例值: "and", 可选值有: and: 满足全部条件, or: 满足任一条件, 长度范围: `0` ～ `10` 字符
	Conditions  []*SearchBitableRecordReqFilterCondition `json:"conditions,omitempty"`  // 筛选条件集合, 长度范围: `0` ～ `50`
}

// SearchBitableRecordReqFilterCondition ...
type SearchBitableRecordReqFilterCondition struct {
	FieldName string   `json:"field_name,omitempty"` // 筛选条件的左值, 值为字段的名称, 示例值: "字段1", 长度范围: `0` ～ `1000` 字符
	Operator  string   `json:"operator,omitempty"`   // 条件运算符, 示例值: "is", 可选值有: is: 等于, isNot: 不等于, contains: 包含, doesNotContain: 不包含, isEmpty: 为空, isNotEmpty: 不为空, isGreater: 大于, isGreaterEqual: 大于等于, isLess: 小于, isLessEqual: 小于等于, like: like, in: in
	Value     []string `json:"value,omitempty"`      // 目标值, [目标值填写指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/record-filter-guide), 示例值: ["文本内容"], 长度范围: `0` ～ `10`
}

// SearchBitableRecordReqSort ...
type SearchBitableRecordReqSort struct {
	FieldName *string `json:"field_name,omitempty"` // 字段名称, 示例值: "多行文本", 长度范围: `0` ～ `1000` 字符
	Desc      *bool   `json:"desc,omitempty"`       // 是否倒序排序, 示例值: true, 默认值: `false`
}

// SearchBitableRecordResp ...
type SearchBitableRecordResp struct {
	Items     *SearchBitableRecordRespItems `json:"items,omitempty"`      // record 结果
	HasMore   bool                          `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                        `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	Total     int64                         `json:"total,omitempty"`      // 总数
}

// SearchBitableRecordRespItems ...
type SearchBitableRecordRespItems struct {
	Fields           map[string]interface{}                      `json:"fields,omitempty"`             // 记录字段[记录数据结构](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/bitable-record-data-structure-overview)
	RecordID         string                                      `json:"record_id,omitempty"`          // 记录Id
	CreatedBy        *SearchBitableRecordRespItemsCreatedBy      `json:"created_by,omitempty"`         // 创建人
	CreatedTime      int64                                       `json:"created_time,omitempty"`       // 创建时间
	LastModifiedBy   *SearchBitableRecordRespItemsLastModifiedBy `json:"last_modified_by,omitempty"`   // 修改人
	LastModifiedTime int64                                       `json:"last_modified_time,omitempty"` // 最近更新时间
}

// SearchBitableRecordRespItemsCreatedBy ...
type SearchBitableRecordRespItemsCreatedBy struct {
	ID        string `json:"id,omitempty"`         // 人员Id
	Name      string `json:"name,omitempty"`       // 中文姓名
	EnName    string `json:"en_name,omitempty"`    // 英文姓名
	Email     string `json:"email,omitempty"`      // 邮箱
	AvatarURL string `json:"avatar_url,omitempty"` // 头像链接, 字段权限要求（满足任一）: 以应用身份读取通讯录, 获取用户基本信息, 以应用身份访问通讯录, 读取通讯录
}

// SearchBitableRecordRespItemsLastModifiedBy ...
type SearchBitableRecordRespItemsLastModifiedBy struct {
	ID        string `json:"id,omitempty"`         // 人员Id
	Name      string `json:"name,omitempty"`       // 中文姓名
	EnName    string `json:"en_name,omitempty"`    // 英文姓名
	Email     string `json:"email,omitempty"`      // 邮箱
	AvatarURL string `json:"avatar_url,omitempty"` // 头像链接, 字段权限要求（满足任一）: 以应用身份读取通讯录, 获取用户基本信息, 以应用身份访问通讯录, 读取通讯录
}

// searchBitableRecordResp ...
type searchBitableRecordResp struct {
	Code  int64                    `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                   `json:"msg,omitempty"`  // 错误描述
	Data  *SearchBitableRecordResp `json:"data,omitempty"`
	Error *ErrorDetail             `json:"error,omitempty"`
}
