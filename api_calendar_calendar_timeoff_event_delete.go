// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// DeleteCalendarTimeoffEvent 删除一个指定的请假日程, 请假日程删除, 用户个人签名页的请假信息也会消失。
//
// 一个应用只能删除自己创建的请假日程。
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/timeoff_event/delete
// new doc: https://open.feishu.cn/document/server-docs/calendar-v4/timeoff_event/delete
func (r *CalendarService) DeleteCalendarTimeoffEvent(ctx context.Context, request *DeleteCalendarTimeoffEventReq, options ...MethodOptionFunc) (*DeleteCalendarTimeoffEventResp, *Response, error) {
	if r.cli.mock.mockCalendarDeleteCalendarTimeoffEvent != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Calendar#DeleteCalendarTimeoffEvent mock enable")
		return r.cli.mock.mockCalendarDeleteCalendarTimeoffEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "DeleteCalendarTimeoffEvent",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/timeoff_events/:timeoff_event_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteCalendarTimeoffEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarDeleteCalendarTimeoffEvent mock CalendarDeleteCalendarTimeoffEvent method
func (r *Mock) MockCalendarDeleteCalendarTimeoffEvent(f func(ctx context.Context, request *DeleteCalendarTimeoffEventReq, options ...MethodOptionFunc) (*DeleteCalendarTimeoffEventResp, *Response, error)) {
	r.mockCalendarDeleteCalendarTimeoffEvent = f
}

// UnMockCalendarDeleteCalendarTimeoffEvent un-mock CalendarDeleteCalendarTimeoffEvent method
func (r *Mock) UnMockCalendarDeleteCalendarTimeoffEvent() {
	r.mockCalendarDeleteCalendarTimeoffEvent = nil
}

// DeleteCalendarTimeoffEventReq ...
type DeleteCalendarTimeoffEventReq struct {
	TimeoffEventID string `path:"timeoff_event_id" json:"-"` // 休假申请的唯一标识id。参见[请假日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/timeoff_event/introduction#b6611a02), 示例值: "timeoff:XXXXXX-XXXX-0917-1623-aa493d591a39"
}

// DeleteCalendarTimeoffEventResp ...
type DeleteCalendarTimeoffEventResp struct {
}

// deleteCalendarTimeoffEventResp ...
type deleteCalendarTimeoffEventResp struct {
	Code  int64                           `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                          `json:"msg,omitempty"`  // 错误描述
	Data  *DeleteCalendarTimeoffEventResp `json:"data,omitempty"`
	Error *ErrorDetail                    `json:"error,omitempty"`
}
