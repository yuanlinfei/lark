// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateCalendarExchangeBinding 本接口将Exchange账户绑定到飞书账户, 进而支持Exchange日历的导入
//
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。
// - 操作用户需要是企业超级管理员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/create
// new doc: https://open.feishu.cn/document/server-docs/calendar-v4/exchange_binding/create
func (r *CalendarService) CreateCalendarExchangeBinding(ctx context.Context, request *CreateCalendarExchangeBindingReq, options ...MethodOptionFunc) (*CreateCalendarExchangeBindingResp, *Response, error) {
	if r.cli.mock.mockCalendarCreateCalendarExchangeBinding != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Calendar#CreateCalendarExchangeBinding mock enable")
		return r.cli.mock.mockCalendarCreateCalendarExchangeBinding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Calendar",
		API:                 "CreateCalendarExchangeBinding",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/calendar/v4/exchange_bindings",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(createCalendarExchangeBindingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarCreateCalendarExchangeBinding mock CalendarCreateCalendarExchangeBinding method
func (r *Mock) MockCalendarCreateCalendarExchangeBinding(f func(ctx context.Context, request *CreateCalendarExchangeBindingReq, options ...MethodOptionFunc) (*CreateCalendarExchangeBindingResp, *Response, error)) {
	r.mockCalendarCreateCalendarExchangeBinding = f
}

// UnMockCalendarCreateCalendarExchangeBinding un-mock CalendarCreateCalendarExchangeBinding method
func (r *Mock) UnMockCalendarCreateCalendarExchangeBinding() {
	r.mockCalendarCreateCalendarExchangeBinding = nil
}

// CreateCalendarExchangeBindingReq ...
type CreateCalendarExchangeBindingReq struct {
	UserIDType      *IDType `query:"user_id_type" json:"-"`     // 用户 ID 类型, 示例值: "open_id", 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	AdminAccount    *string `json:"admin_account,omitempty"`    // admin账户, 示例值: "email_admin_example@outlook.com", 长度范围: `1` ～ `500` 字符
	ExchangeAccount *string `json:"exchange_account,omitempty"` // 用户绑定的exchange账户, 示例值: "email_account_example@outlook.com", 长度范围: `1` ～ `500` 字符
	UserID          *string `json:"user_id,omitempty"`          // exchange账户绑定user唯一标识id, 参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值: "ou_xxxxxxxxxxxxxxxxxx"
}

// CreateCalendarExchangeBindingResp ...
type CreateCalendarExchangeBindingResp struct {
	AdminAccount      string `json:"admin_account,omitempty"`       // admin账户, 字段权限要求: 获取用户邮箱信息
	ExchangeAccount   string `json:"exchange_account,omitempty"`    // 用户绑定的exchange账户, 字段权限要求: 获取用户邮箱信息
	UserID            string `json:"user_id,omitempty"`             // exchange账户绑定user唯一标识id, 参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Status            string `json:"status,omitempty"`              // exchange账户同步状态, 可选值有: doing: 日历正在同步, cal_done: 日历同步完成, timespan_done: 近期时间段同步完成, done: 日程同步完成, err: 同步错误
	ExchangeBindingID string `json:"exchange_binding_id,omitempty"` // exchange绑定唯一标识id。参见[exchange绑定ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/introduction#12533d5e)
}

// createCalendarExchangeBindingResp ...
type createCalendarExchangeBindingResp struct {
	Code  int64                              `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                             `json:"msg,omitempty"`  // 错误描述
	Data  *CreateCalendarExchangeBindingResp `json:"data,omitempty"`
	Error *ErrorDetail                       `json:"error,omitempty"`
}
