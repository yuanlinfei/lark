// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// SearchChat 根据使用的 access_token 搜索对用户或机器人可见的群列表, 包括: 用户或机器人所在的群、对用户或机器人公开的群。
//
// 搜索可获得的群信息包括: 群ID（chat_id）、群名称、群描述等。
// 注意事项:
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search
// new doc: https://open.feishu.cn/document/server-docs/group/chat/search
func (r *ChatService) SearchChat(ctx context.Context, request *SearchChatReq, options ...MethodOptionFunc) (*SearchChatResp, *Response, error) {
	if r.cli.mock.mockChatSearchChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#SearchChat mock enable")
		return r.cli.mock.mockChatSearchChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "SearchChat",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(searchChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatSearchChat mock ChatSearchChat method
func (r *Mock) MockChatSearchChat(f func(ctx context.Context, request *SearchChatReq, options ...MethodOptionFunc) (*SearchChatResp, *Response, error)) {
	r.mockChatSearchChat = f
}

// UnMockChatSearchChat un-mock ChatSearchChat method
func (r *Mock) UnMockChatSearchChat() {
	r.mockChatSearchChat = nil
}

// SearchChatReq ...
type SearchChatReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Query      *string `query:"query" json:"-"`        // 关键词, 注意事项: 关键词支持匹配群国际化名称、群成员名称, 支持使用多语种搜索, 支持拼音、前缀等模糊搜索, 关键词为空值或长度超过`64`个字符时将返回空的结果, 示例值: abc
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: dmJCRHhpd3JRbGV1VEVNRFFyTitRWDY5ZFkybmYrMEUwMUFYT0VMMWdENEtuYUhsNUxGMDIwemtvdE5ORjBNQQ[
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值: 10, 默认值: `20`, 最大值: `100`
}

// SearchChatResp ...
type SearchChatResp struct {
	Items     []*SearchChatRespItem `json:"items,omitempty"`      // chat 列表
	PageToken string                `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                  `json:"has_more,omitempty"`   // 是否还有更多项
}

// SearchChatRespItem ...
type SearchChatRespItem struct {
	ChatID      string `json:"chat_id,omitempty"`       // 群组 ID, 详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
	Avatar      string `json:"avatar,omitempty"`        // 群头像 URL
	Name        string `json:"name,omitempty"`          // 群名称
	Description string `json:"description,omitempty"`   // 群描述
	OwnerID     string `json:"owner_id,omitempty"`      // 群主 ID
	OwnerIDType IDType `json:"owner_id_type,omitempty"` // 群主 ID 类型
	External    bool   `json:"external,omitempty"`      // 是否是外部群
	TenantKey   string `json:"tenant_key,omitempty"`    // 租户Key, 为租户在飞书上的唯一标识, 用来换取对应的tenant_access_token, 也可以用作租户在应用中的唯一标识
}

// searchChatResp ...
type searchChatResp struct {
	Code int64           `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *SearchChatResp `json:"data,omitempty"`
}
