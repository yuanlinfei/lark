// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateContactFunctionalRole 通过”创建角色“接口可批量完成角色创建, 新增角色同步展示至租户的管理后台-角色管理模块。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/functional_role/create
// new doc: https://open.feishu.cn/document/server-docs/contact-v3/functional_role/create
func (r *ContactService) CreateContactFunctionalRole(ctx context.Context, request *CreateContactFunctionalRoleReq, options ...MethodOptionFunc) (*CreateContactFunctionalRoleResp, *Response, error) {
	if r.cli.mock.mockContactCreateContactFunctionalRole != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Contact#CreateContactFunctionalRole mock enable")
		return r.cli.mock.mockContactCreateContactFunctionalRole(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "CreateContactFunctionalRole",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/functional_roles",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createContactFunctionalRoleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactCreateContactFunctionalRole mock ContactCreateContactFunctionalRole method
func (r *Mock) MockContactCreateContactFunctionalRole(f func(ctx context.Context, request *CreateContactFunctionalRoleReq, options ...MethodOptionFunc) (*CreateContactFunctionalRoleResp, *Response, error)) {
	r.mockContactCreateContactFunctionalRole = f
}

// UnMockContactCreateContactFunctionalRole un-mock ContactCreateContactFunctionalRole method
func (r *Mock) UnMockContactCreateContactFunctionalRole() {
	r.mockContactCreateContactFunctionalRole = nil
}

// CreateContactFunctionalRoleReq ...
type CreateContactFunctionalRoleReq struct {
	RoleName string `json:"role_name,omitempty"` // 角色名称, 在单租户下唯一, 示例值: "考勤管理员", 长度范围: `1` ～ `50` 字符
}

// CreateContactFunctionalRoleResp ...
type CreateContactFunctionalRoleResp struct {
	RoleID string `json:"role_id,omitempty"` // 角色ID, 在单租户下唯一
}

// createContactFunctionalRoleResp ...
type createContactFunctionalRoleResp struct {
	Code  int64                            `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                           `json:"msg,omitempty"`  // 错误描述
	Data  *CreateContactFunctionalRoleResp `json:"data,omitempty"`
	Error *ErrorDetail                     `json:"error,omitempty"`
}
