// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetContactGroupList 通过该接口可查询企业的用户组列表, 可分别查询普通用户组或动态用户组。如果应用的通讯录权限范围是“全部员工”, 则可获取企业全部用户组列表。如果应用的通讯录权限范围不是“全部员工”, 则仅可获取通讯录权限范围内的用户组。[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist
// new doc: https://open.feishu.cn/document/server-docs/contact-v3/group/simplelist
func (r *ContactService) GetContactGroupList(ctx context.Context, request *GetContactGroupListReq, options ...MethodOptionFunc) (*GetContactGroupListResp, *Response, error) {
	if r.cli.mock.mockContactGetContactGroupList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactGroupList mock enable")
		return r.cli.mock.mockContactGetContactGroupList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactGroupList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/simplelist",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactGroupListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactGroupList mock ContactGetContactGroupList method
func (r *Mock) MockContactGetContactGroupList(f func(ctx context.Context, request *GetContactGroupListReq, options ...MethodOptionFunc) (*GetContactGroupListResp, *Response, error)) {
	r.mockContactGetContactGroupList = f
}

// UnMockContactGetContactGroupList un-mock ContactGetContactGroupList method
func (r *Mock) UnMockContactGetContactGroupList() {
	r.mockContactGetContactGroupList = nil
}

// GetContactGroupListReq ...
type GetContactGroupListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值: 50, 默认值: `50`, 最大值: `100`
	PageToken *string `query:"page_token" json:"-"` // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw=
	Type      *int64  `query:"type" json:"-"`       // 用户组类型, 示例值: 1, 可选值有: 1: 普通用户组, 2: 动态用户组, 默认值: `1`
}

// GetContactGroupListResp ...
type GetContactGroupListResp struct {
	Grouplist []*GetContactGroupListRespGroup `json:"grouplist,omitempty"`  // 用户组列表
	PageToken string                          `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                            `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetContactGroupListRespGroup ...
type GetContactGroupListRespGroup struct {
	ID                    string   `json:"id,omitempty"`                      // 用户组ID
	Name                  string   `json:"name,omitempty"`                    // 用户组名字
	Description           string   `json:"description,omitempty"`             // 用户组描述
	MemberUserCount       int64    `json:"member_user_count,omitempty"`       // 用户组成员中用户的数量
	MemberDepartmentCount int64    `json:"member_department_count,omitempty"` // 普通用户组成员中部门的数量, 动态用户组成员中没有部门。
	Type                  int64    `json:"type,omitempty"`                    // 用户组的类型, 可选值有: 1: 普通用户组, 2: 动态用户组
	DepartmentScopeList   []string `json:"department_scope_list,omitempty"`   // 部门范围
	GroupID               string   `json:"group_id,omitempty"`                // 自定义用户组ID
}

// getContactGroupListResp ...
type getContactGroupListResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetContactGroupListResp `json:"data,omitempty"`
}
