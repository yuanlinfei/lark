// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateContactJobFamily 该接口用于更新租户序列的信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/update
// new doc: https://open.feishu.cn/document/server-docs/contact-v3/job_family/update
func (r *ContactService) UpdateContactJobFamily(ctx context.Context, request *UpdateContactJobFamilyReq, options ...MethodOptionFunc) (*UpdateContactJobFamilyResp, *Response, error) {
	if r.cli.mock.mockContactUpdateContactJobFamily != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Contact#UpdateContactJobFamily mock enable")
		return r.cli.mock.mockContactUpdateContactJobFamily(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateContactJobFamily",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/job_families/:job_family_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateContactJobFamilyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateContactJobFamily mock ContactUpdateContactJobFamily method
func (r *Mock) MockContactUpdateContactJobFamily(f func(ctx context.Context, request *UpdateContactJobFamilyReq, options ...MethodOptionFunc) (*UpdateContactJobFamilyResp, *Response, error)) {
	r.mockContactUpdateContactJobFamily = f
}

// UnMockContactUpdateContactJobFamily un-mock ContactUpdateContactJobFamily method
func (r *Mock) UnMockContactUpdateContactJobFamily() {
	r.mockContactUpdateContactJobFamily = nil
}

// UpdateContactJobFamilyReq ...
type UpdateContactJobFamilyReq struct {
	JobFamilyID       string                                      `path:"job_family_id" json:"-"`         // 序列ID, 示例值: "mga5oa8ayjlpkzy"
	Name              *string                                     `json:"name,omitempty"`                 // 序列名称。1-100字符, 支持中、英文及符号, 示例值: "产品", 长度范围: `1` ～ `100` 字符
	Description       *string                                     `json:"description,omitempty"`          // 序列描述, 描述序列详情信息, 示例值: "负责产品策略制定的相关工作"
	ParentJobFamilyID *string                                     `json:"parent_job_family_id,omitempty"` // 上级序列ID。需是该租户的序列ID列表中的值, 对应唯一的序列名称, 示例值: "mga5oa8ayjlpzjq"
	Status            *bool                                       `json:"status,omitempty"`               // 是否启用, 示例值: true
	I18nName          []*UpdateContactJobFamilyReqI18nName        `json:"i18n_name,omitempty"`            // 多语言序列名称
	I18nDescription   []*UpdateContactJobFamilyReqI18nDescription `json:"i18n_description,omitempty"`     // 多语言描述
}

// UpdateContactJobFamilyReqI18nDescription ...
type UpdateContactJobFamilyReqI18nDescription struct {
	Locale *string `json:"locale,omitempty"` // 语言版本, 示例值: "zh_cn"
	Value  *string `json:"value,omitempty"`  // 字段名, 示例值: "多语言内容"
}

// UpdateContactJobFamilyReqI18nName ...
type UpdateContactJobFamilyReqI18nName struct {
	Locale *string `json:"locale,omitempty"` // 语言版本, 示例值: "zh_cn"
	Value  *string `json:"value,omitempty"`  // 字段名, 示例值: "多语言内容"
}

// UpdateContactJobFamilyResp ...
type UpdateContactJobFamilyResp struct {
	JobFamily *UpdateContactJobFamilyRespJobFamily `json:"job_family,omitempty"` // 更新后的序列信息
}

// UpdateContactJobFamilyRespJobFamily ...
type UpdateContactJobFamilyRespJobFamily struct {
	Name              string                                                `json:"name,omitempty"`                 // 序列名称。1-100字符, 支持中、英文及符号
	Description       string                                                `json:"description,omitempty"`          // 序列描述, 描述序列详情信息
	ParentJobFamilyID string                                                `json:"parent_job_family_id,omitempty"` // 上级序列ID。需是该租户的序列ID列表中的值, 对应唯一的序列名称。
	Status            bool                                                  `json:"status,omitempty"`               // 是否启用
	I18nName          []*UpdateContactJobFamilyRespJobFamilyI18nName        `json:"i18n_name,omitempty"`            // 多语言序列名称
	I18nDescription   []*UpdateContactJobFamilyRespJobFamilyI18nDescription `json:"i18n_description,omitempty"`     // 多语言描述
	JobFamilyID       string                                                `json:"job_family_id,omitempty"`        // 职级序列ID
}

// UpdateContactJobFamilyRespJobFamilyI18nDescription ...
type UpdateContactJobFamilyRespJobFamilyI18nDescription struct {
	Locale string `json:"locale,omitempty"` // 语言版本
	Value  string `json:"value,omitempty"`  // 字段名
}

// UpdateContactJobFamilyRespJobFamilyI18nName ...
type UpdateContactJobFamilyRespJobFamilyI18nName struct {
	Locale string `json:"locale,omitempty"` // 语言版本
	Value  string `json:"value,omitempty"`  // 字段名
}

// updateContactJobFamilyResp ...
type updateContactJobFamilyResp struct {
	Code  int64                       `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                      `json:"msg,omitempty"`  // 错误描述
	Data  *UpdateContactJobFamilyResp `json:"data,omitempty"`
	Error *ErrorDetail                `json:"error,omitempty"`
}
