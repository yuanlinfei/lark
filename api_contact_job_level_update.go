// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateContactJobLevel 该接口用于更新职级信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/update
// new doc: https://open.feishu.cn/document/server-docs/contact-v3/job_level/update
func (r *ContactService) UpdateContactJobLevel(ctx context.Context, request *UpdateContactJobLevelReq, options ...MethodOptionFunc) (*UpdateContactJobLevelResp, *Response, error) {
	if r.cli.mock.mockContactUpdateContactJobLevel != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Contact#UpdateContactJobLevel mock enable")
		return r.cli.mock.mockContactUpdateContactJobLevel(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateContactJobLevel",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/job_levels/:job_level_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateContactJobLevelResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateContactJobLevel mock ContactUpdateContactJobLevel method
func (r *Mock) MockContactUpdateContactJobLevel(f func(ctx context.Context, request *UpdateContactJobLevelReq, options ...MethodOptionFunc) (*UpdateContactJobLevelResp, *Response, error)) {
	r.mockContactUpdateContactJobLevel = f
}

// UnMockContactUpdateContactJobLevel un-mock ContactUpdateContactJobLevel method
func (r *Mock) UnMockContactUpdateContactJobLevel() {
	r.mockContactUpdateContactJobLevel = nil
}

// UpdateContactJobLevelReq ...
type UpdateContactJobLevelReq struct {
	JobLevelID      string                                     `path:"job_level_id" json:"-"`      // 职级ID, 示例值: "mga5oa8ayjlp9rb"
	Name            *string                                    `json:"name,omitempty"`             // 职级名称, 示例值: "高级专家", 长度范围: `1` ～ `255` 字符
	Description     *string                                    `json:"description,omitempty"`      // 职级描述, 示例值: "公司内部中高级职称, 有一定专业技术能力的人员"
	Order           *int64                                     `json:"order,omitempty"`            // 职级的排序, 可填入自然数100-100000的数值, 系统按照数值大小从小到大排序。不填写该字段时, 默认新增排序在当前职级列表中最后位（最大值）, 示例值: 200, 取值范围: `100` ～ `100000`
	Status          *bool                                      `json:"status,omitempty"`           // 是否启用, 示例值: true
	I18nName        []*UpdateContactJobLevelReqI18nName        `json:"i18n_name,omitempty"`        // 多语言名称
	I18nDescription []*UpdateContactJobLevelReqI18nDescription `json:"i18n_description,omitempty"` // 多语言描述
}

// UpdateContactJobLevelReqI18nDescription ...
type UpdateContactJobLevelReqI18nDescription struct {
	Locale *string `json:"locale,omitempty"` // 语言版本, 示例值: "zh_cn"
	Value  *string `json:"value,omitempty"`  // 字段名, 示例值: "多语言内容"
}

// UpdateContactJobLevelReqI18nName ...
type UpdateContactJobLevelReqI18nName struct {
	Locale *string `json:"locale,omitempty"` // 语言版本, 示例值: "zh_cn"
	Value  *string `json:"value,omitempty"`  // 字段名, 示例值: "多语言内容"
}

// UpdateContactJobLevelResp ...
type UpdateContactJobLevelResp struct {
	JobLevel *UpdateContactJobLevelRespJobLevel `json:"job_level,omitempty"` // 职级信息
}

// UpdateContactJobLevelRespJobLevel ...
type UpdateContactJobLevelRespJobLevel struct {
	Name            string                                              `json:"name,omitempty"`             // 职级名称
	Description     string                                              `json:"description,omitempty"`      // 职级描述
	Order           int64                                               `json:"order,omitempty"`            // 职级的排序, 可填入自然数100-100000的数值, 系统按照数值大小从小到大排序。不填写该字段时, 默认新增排序在当前职级列表中最后位（最大值）
	Status          bool                                                `json:"status,omitempty"`           // 是否启用
	JobLevelID      string                                              `json:"job_level_id,omitempty"`     // 职级ID
	I18nName        []*UpdateContactJobLevelRespJobLevelI18nName        `json:"i18n_name,omitempty"`        // 多语言名称
	I18nDescription []*UpdateContactJobLevelRespJobLevelI18nDescription `json:"i18n_description,omitempty"` // 多语言描述
}

// UpdateContactJobLevelRespJobLevelI18nDescription ...
type UpdateContactJobLevelRespJobLevelI18nDescription struct {
	Locale string `json:"locale,omitempty"` // 语言版本
	Value  string `json:"value,omitempty"`  // 字段名
}

// UpdateContactJobLevelRespJobLevelI18nName ...
type UpdateContactJobLevelRespJobLevelI18nName struct {
	Locale string `json:"locale,omitempty"` // 语言版本
	Value  string `json:"value,omitempty"`  // 字段名
}

// updateContactJobLevelResp ...
type updateContactJobLevelResp struct {
	Code  int64                      `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                     `json:"msg,omitempty"`  // 错误描述
	Data  *UpdateContactJobLevelResp `json:"data,omitempty"`
	Error *ErrorDetail               `json:"error,omitempty"`
}
