// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetContactJobTitleList 此接口可用于获取租户下职务列表信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_title/list
func (r *ContactService) GetContactJobTitleList(ctx context.Context, request *GetContactJobTitleListReq, options ...MethodOptionFunc) (*GetContactJobTitleListResp, *Response, error) {
	if r.cli.mock.mockContactGetContactJobTitleList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Contact#GetContactJobTitleList mock enable")
		return r.cli.mock.mockContactGetContactJobTitleList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactJobTitleList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/job_titles",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getContactJobTitleListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactJobTitleList mock ContactGetContactJobTitleList method
func (r *Mock) MockContactGetContactJobTitleList(f func(ctx context.Context, request *GetContactJobTitleListReq, options ...MethodOptionFunc) (*GetContactJobTitleListResp, *Response, error)) {
	r.mockContactGetContactJobTitleList = f
}

// UnMockContactGetContactJobTitleList un-mock ContactGetContactJobTitleList method
func (r *Mock) UnMockContactGetContactJobTitleList() {
	r.mockContactGetContactJobTitleList = nil
}

// GetContactJobTitleListReq ...
type GetContactJobTitleListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值: 10, 默认值: `10`, 取值范围: `1` ～ `50`
	PageToken *string `query:"page_token" json:"-"` // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: "xxx"
}

// GetContactJobTitleListResp ...
type GetContactJobTitleListResp struct {
	Items     []*GetContactJobTitleListRespItem `json:"items,omitempty"`      // 职务列表
	PageToken string                            `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                              `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetContactJobTitleListRespItem ...
type GetContactJobTitleListRespItem struct {
	JobTitleID string                                    `json:"job_title_id,omitempty"` // 职务ID
	Name       string                                    `json:"name,omitempty"`         // 职务名称。1-100字符, 支持中、英文及符号
	I18nName   []*GetContactJobTitleListRespItemI18nName `json:"i18n_name,omitempty"`    // 多语言职务名称
	Status     bool                                      `json:"status,omitempty"`       // 是否启用
}

// GetContactJobTitleListRespItemI18nName ...
type GetContactJobTitleListRespItemI18nName struct {
	Locale string `json:"locale,omitempty"` // 语言
	Value  string `json:"value,omitempty"`  // 多语言内容
}

// getContactJobTitleListResp ...
type getContactJobTitleListResp struct {
	Code  int64                       `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                      `json:"msg,omitempty"`  // 错误描述
	Data  *GetContactJobTitleListResp `json:"data,omitempty"`
	Error *ErrorDetail                `json:"error,omitempty"`
}
