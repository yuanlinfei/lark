// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetContactScopeList 该接口用于获取应用被授权可访问的通讯录范围, 包括可访问的部门列表、用户列表和用户组列表。
//
// 授权范围为全员时, 返回的部门列表为该企业所有的一级部门；否则返回的部门为管理员在设置授权范围时勾选的部门（不包含勾选部门的子部门）。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/scope/list
// new doc: https://open.feishu.cn/document/server-docs/contact-v3/scope/list
func (r *ContactService) GetContactScopeList(ctx context.Context, request *GetContactScopeListReq, options ...MethodOptionFunc) (*GetContactScopeListResp, *Response, error) {
	if r.cli.mock.mockContactGetContactScopeList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Contact#GetContactScopeList mock enable")
		return r.cli.mock.mockContactGetContactScopeList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactScopeList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/scopes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactScopeListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactScopeList mock ContactGetContactScopeList method
func (r *Mock) MockContactGetContactScopeList(f func(ctx context.Context, request *GetContactScopeListReq, options ...MethodOptionFunc) (*GetContactScopeListResp, *Response, error)) {
	r.mockContactGetContactScopeList = f
}

// UnMockContactGetContactScopeList un-mock ContactGetContactScopeList method
func (r *Mock) UnMockContactGetContactScopeList() {
	r.mockContactGetContactScopeList = nil
}

// GetContactScopeListReq ...
type GetContactScopeListReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值: user_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 返回值的部门ID的类型, 示例值: department_id, 可选值有: department_id: 以自定义department_id来标识部门, open_department_id: 以open_department_id来标识部门, 默认值: `open_department_id`
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw=
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 返回值所有列表长度之和不超过这个值, 示例值: 50, 默认值: `50`, 取值范围: `1` ～ `100`
}

// GetContactScopeListResp ...
type GetContactScopeListResp struct {
	DepartmentIDs []string `json:"department_ids,omitempty"` // 已授权部门列表, 授权范围为全员可见时返回的是当前企业的所有一级部门列表
	UserIDs       []string `json:"user_ids,omitempty"`       // 已授权用户列表, 应用申请了获取用户user_id 权限时返回；当授权范围为全员可见时返回的是当前企业所有顶级部门用户列表
	GroupIDs      []string `json:"group_ids,omitempty"`      // 已授权的用户组, 授权范围为全员可见时返回的是当前企业所有用户组
	HasMore       bool     `json:"has_more,omitempty"`       // 是否还有更多项
	PageToken     string   `json:"page_token,omitempty"`     // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
}

// getContactScopeListResp ...
type getContactScopeListResp struct {
	Code  int64                    `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                   `json:"msg,omitempty"`  // 错误描述
	Data  *GetContactScopeListResp `json:"data,omitempty"`
	Error *ErrorDetail             `json:"error,omitempty"`
}
