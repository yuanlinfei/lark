// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateContactUnit 该接口用于创建单位。注意: 单位功能属于旗舰版付费功能, 企业需开通对应版本才可以创建单位, 不同版本请参考[飞书版本对比](https://www.feishu.cn/service)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/create
// new doc: https://open.feishu.cn/document/server-docs/contact-v3/unit/create
func (r *ContactService) CreateContactUnit(ctx context.Context, request *CreateContactUnitReq, options ...MethodOptionFunc) (*CreateContactUnitResp, *Response, error) {
	if r.cli.mock.mockContactCreateContactUnit != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Contact#CreateContactUnit mock enable")
		return r.cli.mock.mockContactCreateContactUnit(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "CreateContactUnit",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createContactUnitResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactCreateContactUnit mock ContactCreateContactUnit method
func (r *Mock) MockContactCreateContactUnit(f func(ctx context.Context, request *CreateContactUnitReq, options ...MethodOptionFunc) (*CreateContactUnitResp, *Response, error)) {
	r.mockContactCreateContactUnit = f
}

// UnMockContactCreateContactUnit un-mock ContactCreateContactUnit method
func (r *Mock) UnMockContactCreateContactUnit() {
	r.mockContactCreateContactUnit = nil
}

// CreateContactUnitReq ...
type CreateContactUnitReq struct {
	UnitID   *string `json:"unit_id,omitempty"`   // 单位ID。可自定义, 不传时默认自动生成。1-64字节范围大小, 需为数字字母, 示例值: "BU121"
	Name     string  `json:"name,omitempty"`      // 单位的名字, 长度范围为1-100个字符, 示例值: "消费者事业部"
	UnitType string  `json:"unit_type,omitempty"` // 单位类型, 长度范围为1-100个字符, 创建后不可修改, 示例值: "子公司"
}

// CreateContactUnitResp ...
type CreateContactUnitResp struct {
	UnitID string `json:"unit_id,omitempty"` // 单位ID, 可自定义
}

// createContactUnitResp ...
type createContactUnitResp struct {
	Code  int64                  `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                 `json:"msg,omitempty"`  // 错误描述
	Data  *CreateContactUnitResp `json:"data,omitempty"`
	Error *ErrorDetail           `json:"error,omitempty"`
}
