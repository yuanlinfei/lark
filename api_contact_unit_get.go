// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetContactUnit 该接口用于获取单位信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/get
// new doc: https://open.feishu.cn/document/server-docs/contact-v3/unit/get
func (r *ContactService) GetContactUnit(ctx context.Context, request *GetContactUnitReq, options ...MethodOptionFunc) (*GetContactUnitResp, *Response, error) {
	if r.cli.mock.mockContactGetContactUnit != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Contact#GetContactUnit mock enable")
		return r.cli.mock.mockContactGetContactUnit(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactUnit",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit/:unit_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactUnitResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactUnit mock ContactGetContactUnit method
func (r *Mock) MockContactGetContactUnit(f func(ctx context.Context, request *GetContactUnitReq, options ...MethodOptionFunc) (*GetContactUnitResp, *Response, error)) {
	r.mockContactGetContactUnit = f
}

// UnMockContactGetContactUnit un-mock ContactGetContactUnit method
func (r *Mock) UnMockContactGetContactUnit() {
	r.mockContactGetContactUnit = nil
}

// GetContactUnitReq ...
type GetContactUnitReq struct {
	UnitID string `path:"unit_id" json:"-"` // 单位ID, 示例值: "BU121"
}

// GetContactUnitResp ...
type GetContactUnitResp struct {
	Unit *GetContactUnitRespUnit `json:"unit,omitempty"` // 单位信息
}

// GetContactUnitRespUnit ...
type GetContactUnitRespUnit struct {
	UnitID   string `json:"unit_id,omitempty"`   // 单位ID
	Name     string `json:"name,omitempty"`      // 单位的名字
	UnitType string `json:"unit_type,omitempty"` // 单位的类型
}

// getContactUnitResp ...
type getContactUnitResp struct {
	Code  int64               `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string              `json:"msg,omitempty"`  // 错误描述
	Data  *GetContactUnitResp `json:"data,omitempty"`
	Error *ErrorDetail        `json:"error,omitempty"`
}
