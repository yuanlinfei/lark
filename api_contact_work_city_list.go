// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetContactWorkCityList 此接口可用于获取租户下工作城市列表信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/work_city/list
func (r *ContactService) GetContactWorkCityList(ctx context.Context, request *GetContactWorkCityListReq, options ...MethodOptionFunc) (*GetContactWorkCityListResp, *Response, error) {
	if r.cli.mock.mockContactGetContactWorkCityList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactWorkCityList mock enable")
		return r.cli.mock.mockContactGetContactWorkCityList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactWorkCityList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/work_cities",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getContactWorkCityListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactWorkCityList mock ContactGetContactWorkCityList method
func (r *Mock) MockContactGetContactWorkCityList(f func(ctx context.Context, request *GetContactWorkCityListReq, options ...MethodOptionFunc) (*GetContactWorkCityListResp, *Response, error)) {
	r.mockContactGetContactWorkCityList = f
}

// UnMockContactGetContactWorkCityList un-mock ContactGetContactWorkCityList method
func (r *Mock) UnMockContactGetContactWorkCityList() {
	r.mockContactGetContactWorkCityList = nil
}

// GetContactWorkCityListReq ...
type GetContactWorkCityListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值: 10, 默认值: `10`, 取值范围: `1` ～ `50`
	PageToken *string `query:"page_token" json:"-"` // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: "xxx"
}

// GetContactWorkCityListResp ...
type GetContactWorkCityListResp struct {
	Items     []*GetContactWorkCityListRespItem `json:"items,omitempty"`      // 工作城市列表
	PageToken string                            `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                              `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetContactWorkCityListRespItem ...
type GetContactWorkCityListRespItem struct {
	WorkCityID string                                    `json:"work_city_id,omitempty"` // 工作城市ID
	Name       string                                    `json:"name,omitempty"`         // 工作城市名称。1-100字符, 支持中、英文及符号
	I18nName   []*GetContactWorkCityListRespItemI18nName `json:"i18n_name,omitempty"`    // 多语言工作城市
	Status     bool                                      `json:"status,omitempty"`       // 是否启用
}

// GetContactWorkCityListRespItemI18nName ...
type GetContactWorkCityListRespItemI18nName struct {
	Locale string `json:"locale,omitempty"` // 语言
	Value  string `json:"value,omitempty"`  // 多语言内容
}

// getContactWorkCityListResp ...
type getContactWorkCityListResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetContactWorkCityListResp `json:"data,omitempty"`
}
