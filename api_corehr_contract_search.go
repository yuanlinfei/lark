// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// SearchCoreHRContract 搜索合同信息
//
// 该接口会按照应用拥有的「员工资源」的权限范围返回数据, 请确定在「开发者后台 - 权限管理 - 数据权限」中申请「员工资源」权限范围。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/contract/search
func (r *CoreHRService) SearchCoreHRContract(ctx context.Context, request *SearchCoreHRContractReq, options ...MethodOptionFunc) (*SearchCoreHRContractResp, *Response, error) {
	if r.cli.mock.mockCoreHRSearchCoreHRContract != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] CoreHR#SearchCoreHRContract mock enable")
		return r.cli.mock.mockCoreHRSearchCoreHRContract(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "CoreHR",
		API:                   "SearchCoreHRContract",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/corehr/v2/contracts/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(searchCoreHRContractResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCoreHRSearchCoreHRContract mock CoreHRSearchCoreHRContract method
func (r *Mock) MockCoreHRSearchCoreHRContract(f func(ctx context.Context, request *SearchCoreHRContractReq, options ...MethodOptionFunc) (*SearchCoreHRContractResp, *Response, error)) {
	r.mockCoreHRSearchCoreHRContract = f
}

// UnMockCoreHRSearchCoreHRContract un-mock CoreHRSearchCoreHRContract method
func (r *Mock) UnMockCoreHRSearchCoreHRContract() {
	r.mockCoreHRSearchCoreHRContract = nil
}

// SearchCoreHRContractReq ...
type SearchCoreHRContractReq struct {
	PageSize         int64    `query:"page_size" json:"-"`          // 分页大小, 最大 100, 示例值: 100, 取值范围: `1` ～ `100`
	PageToken        *string  `query:"page_token" json:"-"`         // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: 6891251722631890445
	UserIDType       *IDType  `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), people_corehr_id: 以飞书人事的 ID 来识别用户, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	EmploymentIDList []string `json:"employment_id_list,omitempty"` // 雇佣 ID 列表, 示例值: ["7140964208476371111"]
	ContractIDList   []string `json:"contract_id_list,omitempty"`   // 合同ID列表, 示例值: ["100001"]
}

// SearchCoreHRContractResp ...
type SearchCoreHRContractResp struct {
	Items     []*SearchCoreHRContractRespItem `json:"items,omitempty"`      // 查询的合同信息
	PageToken string                          `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                            `json:"has_more,omitempty"`   // 是否还有更多项
}

// SearchCoreHRContractRespItem ...
type SearchCoreHRContractRespItem struct {
	ID                  string                                    `json:"id,omitempty"`                     // 合同ID
	EffectiveTime       string                                    `json:"effective_time,omitempty"`         // 合同开始日期, 字段权限要求（满足任一）: 获取合同期限信息, 读写合同期限信息
	ContractEndDate     string                                    `json:"contract_end_date,omitempty"`      // 合同结束日期, 字段权限要求（满足任一）: 获取合同期限信息, 读写合同期限信息
	ExpirationTime      string                                    `json:"expiration_time,omitempty"`        // 实际结束日期, 字段权限要求（满足任一）: 获取合同期限信息, 读写合同期限信息
	EmploymentID        string                                    `json:"employment_id,omitempty"`          // 雇佣 ID
	ContractType        *SearchCoreHRContractRespItemContractType `json:"contract_type,omitempty"`          // 合同类型, 枚举值可通过文档【飞书人事枚举常量】合同类型（contract_type）枚举定义部分获得
	FirstPartyCompanyID string                                    `json:"first_party_company_id,omitempty"` // 合同主体, 引用 Company 的 ID, 枚举值及详细信息可通过【批量查询公司】接口查询获得, 字段权限要求（满足任一）: 获取合同主体信息, 读写合同主体信息
	PersonID            string                                    `json:"person_id,omitempty"`              // Person ID, 枚举值及详细信息可通过【批量查询个人信息】接口查询获得
	DurationType        *SearchCoreHRContractRespItemDurationType `json:"duration_type,omitempty"`          // 期限类型, 枚举值可通过文档【飞书人事枚举常量】合同期限类型（duration_type）枚举定义部分获得
	ContractNumber      string                                    `json:"contract_number,omitempty"`        // 合同编号
	SigningType         *SearchCoreHRContractRespItemSigningType  `json:"signing_type,omitempty"`           // 签订类型, 枚举值可通过文档【飞书人事枚举常量】签订类型（signing_type）枚举定义部分获得
}

// SearchCoreHRContractRespItemContractType ...
type SearchCoreHRContractRespItemContractType struct {
	EnumName string                                             `json:"enum_name,omitempty"` // 枚举值
	Display  []*SearchCoreHRContractRespItemContractTypeDisplay `json:"display,omitempty"`   // 枚举多语展示
}

// SearchCoreHRContractRespItemContractTypeDisplay ...
type SearchCoreHRContractRespItemContractTypeDisplay struct {
	Lang  string `json:"lang,omitempty"`  // 语言
	Value string `json:"value,omitempty"` // 内容
}

// SearchCoreHRContractRespItemDurationType ...
type SearchCoreHRContractRespItemDurationType struct {
	EnumName string                                             `json:"enum_name,omitempty"` // 枚举值
	Display  []*SearchCoreHRContractRespItemDurationTypeDisplay `json:"display,omitempty"`   // 枚举多语展示
}

// SearchCoreHRContractRespItemDurationTypeDisplay ...
type SearchCoreHRContractRespItemDurationTypeDisplay struct {
	Lang  string `json:"lang,omitempty"`  // 语言
	Value string `json:"value,omitempty"` // 内容
}

// SearchCoreHRContractRespItemSigningType ...
type SearchCoreHRContractRespItemSigningType struct {
	EnumName string                                            `json:"enum_name,omitempty"` // 枚举值
	Display  []*SearchCoreHRContractRespItemSigningTypeDisplay `json:"display,omitempty"`   // 枚举多语展示
}

// SearchCoreHRContractRespItemSigningTypeDisplay ...
type SearchCoreHRContractRespItemSigningTypeDisplay struct {
	Lang  string `json:"lang,omitempty"`  // 语言
	Value string `json:"value,omitempty"` // 内容
}

// searchCoreHRContractResp ...
type searchCoreHRContractResp struct {
	Code  int64                     `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                    `json:"msg,omitempty"`  // 错误描述
	Data  *SearchCoreHRContractResp `json:"data,omitempty"`
	Error *ErrorDetail              `json:"error,omitempty"`
}
