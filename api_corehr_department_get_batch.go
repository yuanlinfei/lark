// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// BatchGetCoreHRDepartment 批量查询部门信息。
//
// 对比历史版本[批量查询部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/list)
// 接口, V2 版本增加了敏感字段权限要求, 并使用了 POST HTTP 请求
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/department/batch_get
func (r *CoreHRService) BatchGetCoreHRDepartment(ctx context.Context, request *BatchGetCoreHRDepartmentReq, options ...MethodOptionFunc) (*BatchGetCoreHRDepartmentResp, *Response, error) {
	if r.cli.mock.mockCoreHRBatchGetCoreHRDepartment != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] CoreHR#BatchGetCoreHRDepartment mock enable")
		return r.cli.mock.mockCoreHRBatchGetCoreHRDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "CoreHR",
		API:                   "BatchGetCoreHRDepartment",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/corehr/v2/departments/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetCoreHRDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCoreHRBatchGetCoreHRDepartment mock CoreHRBatchGetCoreHRDepartment method
func (r *Mock) MockCoreHRBatchGetCoreHRDepartment(f func(ctx context.Context, request *BatchGetCoreHRDepartmentReq, options ...MethodOptionFunc) (*BatchGetCoreHRDepartmentResp, *Response, error)) {
	r.mockCoreHRBatchGetCoreHRDepartment = f
}

// UnMockCoreHRBatchGetCoreHRDepartment un-mock CoreHRBatchGetCoreHRDepartment method
func (r *Mock) UnMockCoreHRBatchGetCoreHRDepartment() {
	r.mockCoreHRBatchGetCoreHRDepartment = nil
}

// BatchGetCoreHRDepartmentReq ...
type BatchGetCoreHRDepartmentReq struct {
	UserIDType         *IDType           `query:"user_id_type" json:"-"`         // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), people_corehr_id: 以飞书人事的 ID 来识别用户, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType   *DepartmentIDType `query:"department_id_type" json:"-"`   // 此次调用中使用的部门 ID 类型, 示例值: open_department_id, 可选值有: open_department_id: 以 open_department_id 来标识部门, department_id: 以 department_id 来标识部门, people_corehr_department_id: 以 people_corehr_department_id 来标识部门, 默认值: `open_department_id`
	DepartmentIDList   []string          `json:"department_id_list,omitempty"`   // 部门 ID 列表, 示例值: ["7094136522860922111"], 长度范围: `0` ～ `100`
	Fields             []string          `json:"fields,omitempty"`               // 返回数据的字段列表, 示例值: ["department_name"], 长度范围: `0` ～ `100`
	DepartmentNameList []string          `json:"department_name_list,omitempty"` // 部门名称精确匹配, 最多传100个, 示例值: ["综合部"], 长度范围: `0` ～ `100`
}

// BatchGetCoreHRDepartmentResp ...
type BatchGetCoreHRDepartmentResp struct {
	Items []*BatchGetCoreHRDepartmentRespItem `json:"items,omitempty"` // 查询的部门信息
}

// BatchGetCoreHRDepartmentRespItem ...
type BatchGetCoreHRDepartmentRespItem struct {
	ID                 string                                            `json:"id,omitempty"`                   // 部门 ID
	VersionID          string                                            `json:"version_id,omitempty"`           // 部门记录版本 ID
	DepartmentName     []*BatchGetCoreHRDepartmentRespItemDepartmentName `json:"department_name,omitempty"`      // 部门名称
	SubType            *BatchGetCoreHRDepartmentRespItemSubType          `json:"sub_type,omitempty"`             // 部门类型, 枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)部门子类型（department_sub_type）枚举定义部分获得
	ParentDepartmentID string                                            `json:"parent_department_id,omitempty"` // 上级部门 ID, 字段权限要求: 获取部门组织架构信息
	Manager            string                                            `json:"manager,omitempty"`              // 部门负责人雇佣 ID, 枚举值及详细信息可通过【查询员工信息】接口查询获得, 字段权限要求: 获取部门负责人信息
	TreeOrder          string                                            `json:"tree_order,omitempty"`           // 树形排序, 代表同层级的部门排序序号
	ListOrder          string                                            `json:"list_order,omitempty"`           // 列表排序, 代表所有部门的混排序号
	Code               string                                            `json:"code,omitempty"`                 // 编码
	IsRoot             bool                                              `json:"is_root,omitempty"`              // 是否根部门
	IsConfidential     bool                                              `json:"is_confidential,omitempty"`      // 是否保密
	EffectiveDate      string                                            `json:"effective_date,omitempty"`       // 生效日期
	ExpirationDate     string                                            `json:"expiration_date,omitempty"`      // 失效日期
	Active             bool                                              `json:"active,omitempty"`               // 是否启用
	Description        []*BatchGetCoreHRDepartmentRespItemDescription    `json:"description,omitempty"`          // 描述
	CustomFields       []*BatchGetCoreHRDepartmentRespItemCustomField    `json:"custom_fields,omitempty"`        // 自定义字段, 字段权限要求: 获取部门自定义字段
	StaffingModel      *BatchGetCoreHRDepartmentRespItemStaffingModel    `json:"staffing_model,omitempty"`       // 是否使用职务（功能灰度中, 暂未开放）
}

// BatchGetCoreHRDepartmentRespItemCustomField ...
type BatchGetCoreHRDepartmentRespItemCustomField struct {
	CustomApiName string                                           `json:"custom_api_name,omitempty"` // 自定义字段 apiname, 即自定义字段的唯一标识
	Name          *BatchGetCoreHRDepartmentRespItemCustomFieldName `json:"name,omitempty"`            // 自定义字段名称
	Type          int64                                            `json:"type,omitempty"`            // 自定义字段类型
	Value         string                                           `json:"value,omitempty"`           // 字段值, 是 json 转义后的字符串, 根据元数据定义不同, 字段格式不同（如 123, 123.23, "true", ["id1", "id2"], "2006-01-02 15:04:05"）
}

// BatchGetCoreHRDepartmentRespItemCustomFieldName ...
type BatchGetCoreHRDepartmentRespItemCustomFieldName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// BatchGetCoreHRDepartmentRespItemDepartmentName ...
type BatchGetCoreHRDepartmentRespItemDepartmentName struct {
	Lang  string `json:"lang,omitempty"`  // 语言
	Value string `json:"value,omitempty"` // 内容
}

// BatchGetCoreHRDepartmentRespItemDescription ...
type BatchGetCoreHRDepartmentRespItemDescription struct {
	Lang  string `json:"lang,omitempty"`  // 语言
	Value string `json:"value,omitempty"` // 内容
}

// BatchGetCoreHRDepartmentRespItemStaffingModel ...
type BatchGetCoreHRDepartmentRespItemStaffingModel struct {
	EnumName string                                                  `json:"enum_name,omitempty"` // 枚举值
	Display  []*BatchGetCoreHRDepartmentRespItemStaffingModelDisplay `json:"display,omitempty"`   // 枚举多语展示
}

// BatchGetCoreHRDepartmentRespItemStaffingModelDisplay ...
type BatchGetCoreHRDepartmentRespItemStaffingModelDisplay struct {
	Lang  string `json:"lang,omitempty"`  // 语言
	Value string `json:"value,omitempty"` // 内容
}

// BatchGetCoreHRDepartmentRespItemSubType ...
type BatchGetCoreHRDepartmentRespItemSubType struct {
	EnumName string                                            `json:"enum_name,omitempty"` // 枚举值
	Display  []*BatchGetCoreHRDepartmentRespItemSubTypeDisplay `json:"display,omitempty"`   // 枚举多语展示
}

// BatchGetCoreHRDepartmentRespItemSubTypeDisplay ...
type BatchGetCoreHRDepartmentRespItemSubTypeDisplay struct {
	Lang  string `json:"lang,omitempty"`  // 语言
	Value string `json:"value,omitempty"` // 内容
}

// batchGetCoreHRDepartmentResp ...
type batchGetCoreHRDepartmentResp struct {
	Code  int64                         `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                        `json:"msg,omitempty"`  // 错误描述
	Data  *BatchGetCoreHRDepartmentResp `json:"data,omitempty"`
	Error *ErrorDetail                  `json:"error,omitempty"`
}
