// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetCoreHREmployeeType 根据 ID 查询单个人员类型。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/get
// new doc: https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/employee_type/get
func (r *CoreHRService) GetCoreHREmployeeType(ctx context.Context, request *GetCoreHREmployeeTypeReq, options ...MethodOptionFunc) (*GetCoreHREmployeeTypeResp, *Response, error) {
	if r.cli.mock.mockCoreHRGetCoreHREmployeeType != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] CoreHR#GetCoreHREmployeeType mock enable")
		return r.cli.mock.mockCoreHRGetCoreHREmployeeType(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "CoreHR",
		API:                   "GetCoreHREmployeeType",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/corehr/v1/employee_types/:employee_type_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getCoreHREmployeeTypeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCoreHRGetCoreHREmployeeType mock CoreHRGetCoreHREmployeeType method
func (r *Mock) MockCoreHRGetCoreHREmployeeType(f func(ctx context.Context, request *GetCoreHREmployeeTypeReq, options ...MethodOptionFunc) (*GetCoreHREmployeeTypeResp, *Response, error)) {
	r.mockCoreHRGetCoreHREmployeeType = f
}

// UnMockCoreHRGetCoreHREmployeeType un-mock CoreHRGetCoreHREmployeeType method
func (r *Mock) UnMockCoreHRGetCoreHREmployeeType() {
	r.mockCoreHRGetCoreHREmployeeType = nil
}

// GetCoreHREmployeeTypeReq ...
type GetCoreHREmployeeTypeReq struct {
	EmployeeTypeID string `path:"employee_type_id" json:"-"` // 雇员类型ID, 示例值: "1"
}

// GetCoreHREmployeeTypeResp ...
type GetCoreHREmployeeTypeResp struct {
	EmployeeType *GetCoreHREmployeeTypeRespEmployeeType `json:"employee_type,omitempty"` // 雇员类型
}

// GetCoreHREmployeeTypeRespEmployeeType ...
type GetCoreHREmployeeTypeRespEmployeeType struct {
	ID                  string                                              `json:"id,omitempty"`                    // 雇员类型ID
	Name                []*GetCoreHREmployeeTypeRespEmployeeTypeName        `json:"name,omitempty"`                  // 名称
	DefaultEmployeeType bool                                                `json:"default_employee_type,omitempty"` // 是否为默认人员类型, 每个租户只能定义一个默认人员类型
	Active              bool                                                `json:"active,omitempty"`                // 启用
	Code                string                                              `json:"code,omitempty"`                  // 编码
	CustomFields        []*GetCoreHREmployeeTypeRespEmployeeTypeCustomField `json:"custom_fields,omitempty"`         // 自定义字段
}

// GetCoreHREmployeeTypeRespEmployeeTypeCustomField ...
type GetCoreHREmployeeTypeRespEmployeeTypeCustomField struct {
	FieldName string `json:"field_name,omitempty"` // 字段名
	Value     string `json:"value,omitempty"`      // 字段值, 是json转义后的字符串, 根据元数据定义不同, 字段格式不同(如123, 123.23, "true", [\"id1\", \"id2\"], "2006-01-02 15:04:05")
}

// GetCoreHREmployeeTypeRespEmployeeTypeName ...
type GetCoreHREmployeeTypeRespEmployeeTypeName struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言
	Value string `json:"value,omitempty"` // 名称信息的内容
}

// getCoreHREmployeeTypeResp ...
type getCoreHREmployeeTypeResp struct {
	Code  int64                      `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                     `json:"msg,omitempty"`  // 错误描述
	Data  *GetCoreHREmployeeTypeResp `json:"data,omitempty"`
	Error *ErrorDetail               `json:"error,omitempty"`
}
