// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetCoreHRLeaveTypeList 获取休假设置后台配置的假期类型列表（比如年假、事假、婚假等）。
//
// 仅飞书人事企业版可用
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_types
// new doc: https://open.feishu.cn/document/server-docs/corehr-v1/leave/leave_types
func (r *CoreHRService) GetCoreHRLeaveTypeList(ctx context.Context, request *GetCoreHRLeaveTypeListReq, options ...MethodOptionFunc) (*GetCoreHRLeaveTypeListResp, *Response, error) {
	if r.cli.mock.mockCoreHRGetCoreHRLeaveTypeList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] CoreHR#GetCoreHRLeaveTypeList mock enable")
		return r.cli.mock.mockCoreHRGetCoreHRLeaveTypeList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "CoreHR",
		API:                   "GetCoreHRLeaveTypeList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/corehr/v1/leaves/leave_types",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getCoreHRLeaveTypeListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCoreHRGetCoreHRLeaveTypeList mock CoreHRGetCoreHRLeaveTypeList method
func (r *Mock) MockCoreHRGetCoreHRLeaveTypeList(f func(ctx context.Context, request *GetCoreHRLeaveTypeListReq, options ...MethodOptionFunc) (*GetCoreHRLeaveTypeListResp, *Response, error)) {
	r.mockCoreHRGetCoreHRLeaveTypeList = f
}

// UnMockCoreHRGetCoreHRLeaveTypeList un-mock CoreHRGetCoreHRLeaveTypeList method
func (r *Mock) UnMockCoreHRGetCoreHRLeaveTypeList() {
	r.mockCoreHRGetCoreHRLeaveTypeList = nil
}

// GetCoreHRLeaveTypeListReq ...
type GetCoreHRLeaveTypeListReq struct {
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
	PageSize   int64   `query:"page_size" json:"-"`    // 分页大小, 示例值: 100
	Status     *string `query:"status" json:"-"`       // 假期类型状态（不传则为全部）, 可选值有: 1: 已启用, 2: 已停用, 示例值: 1
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: people_corehr_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), people_corehr_id: 以飞书人事的 ID 来识别用户, 默认值: `people_corehr_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// GetCoreHRLeaveTypeListResp ...
type GetCoreHRLeaveTypeListResp struct {
	LeaveTypeList []*GetCoreHRLeaveTypeListRespLeaveType `json:"leave_type_list,omitempty"` // 假期类型列表
	HasMore       bool                                   `json:"has_more,omitempty"`        // 是否还有更多项
	PageToken     string                                 `json:"page_token,omitempty"`      // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
}

// GetCoreHRLeaveTypeListRespLeaveType ...
type GetCoreHRLeaveTypeListRespLeaveType struct {
	LeaveTypeID      string                                              `json:"leave_type_id,omitempty"`      // 假期类型ID
	LeaveTypeName    []*GetCoreHRLeaveTypeListRespLeaveTypeLeaveTypeName `json:"leave_type_name,omitempty"`    // 假期类型名称
	Status           int64                                               `json:"status,omitempty"`             // 假期类型状态, 可选值有: 1: 已启用, 2: 已停用
	LeaveSubtypeList []*GetCoreHRLeaveTypeListRespLeaveTypeLeaveSubtype  `json:"leave_subtype_list,omitempty"` // 假期子类列表
	CreatedAt        string                                              `json:"created_at,omitempty"`         // 假期类型的创建时间
	CreatedBy        string                                              `json:"created_by,omitempty"`         // 假期类型的创建人, 值为创建人的员工 ID
	UpdatedAt        string                                              `json:"updated_at,omitempty"`         // 假期类型的更新时间
	UpdatedBy        string                                              `json:"updated_by,omitempty"`         // 假期类型的更新人, 值为更新人的员工 ID
}

// GetCoreHRLeaveTypeListRespLeaveTypeLeaveSubtype ...
type GetCoreHRLeaveTypeListRespLeaveTypeLeaveSubtype struct {
	LeaveTypeID   string                                                          `json:"leave_type_id,omitempty"`   // 假期子类ID
	LeaveTypeName []*GetCoreHRLeaveTypeListRespLeaveTypeLeaveSubtypeLeaveTypeName `json:"leave_type_name,omitempty"` // 假期子类名称
}

// GetCoreHRLeaveTypeListRespLeaveTypeLeaveSubtypeLeaveTypeName ...
type GetCoreHRLeaveTypeListRespLeaveTypeLeaveSubtypeLeaveTypeName struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言
	Value string `json:"value,omitempty"` // 名称信息的内容
}

// GetCoreHRLeaveTypeListRespLeaveTypeLeaveTypeName ...
type GetCoreHRLeaveTypeListRespLeaveTypeLeaveTypeName struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言
	Value string `json:"value,omitempty"` // 名称信息的内容
}

// getCoreHRLeaveTypeListResp ...
type getCoreHRLeaveTypeListResp struct {
	Code  int64                       `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                      `json:"msg,omitempty"`  // 错误描述
	Data  *GetCoreHRLeaveTypeListResp `json:"data,omitempty"`
	Error *ErrorDetail                `json:"error,omitempty"`
}
