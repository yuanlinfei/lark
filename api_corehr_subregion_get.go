// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetCoreHRSubregion 查询单条城市/区域信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/subregion/get
// new doc: https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/location_data/get-3
//
// Deprecated
func (r *CoreHRService) GetCoreHRSubregion(ctx context.Context, request *GetCoreHRSubregionReq, options ...MethodOptionFunc) (*GetCoreHRSubregionResp, *Response, error) {
	if r.cli.mock.mockCoreHRGetCoreHRSubregion != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] CoreHR#GetCoreHRSubregion mock enable")
		return r.cli.mock.mockCoreHRGetCoreHRSubregion(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "CoreHR",
		API:                   "GetCoreHRSubregion",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/corehr/v1/subregions/:subregion_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getCoreHRSubregionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCoreHRGetCoreHRSubregion mock CoreHRGetCoreHRSubregion method
func (r *Mock) MockCoreHRGetCoreHRSubregion(f func(ctx context.Context, request *GetCoreHRSubregionReq, options ...MethodOptionFunc) (*GetCoreHRSubregionResp, *Response, error)) {
	r.mockCoreHRGetCoreHRSubregion = f
}

// UnMockCoreHRGetCoreHRSubregion un-mock CoreHRGetCoreHRSubregion method
func (r *Mock) UnMockCoreHRGetCoreHRSubregion() {
	r.mockCoreHRGetCoreHRSubregion = nil
}

// GetCoreHRSubregionReq ...
type GetCoreHRSubregionReq struct {
	SubregionID string `path:"subregion_id" json:"-"` // 城市/区域 ID, 示例值: "67489937334909845"
}

// GetCoreHRSubregionResp ...
type GetCoreHRSubregionResp struct {
	Subregion *GetCoreHRSubregionRespSubregion `json:"subregion,omitempty"` // 城市/区域信息
}

// GetCoreHRSubregionRespSubregion ...
type GetCoreHRSubregionRespSubregion struct {
	ID                  string                                 `json:"id,omitempty"`                    // 城市/区域id
	Name                []*GetCoreHRSubregionRespSubregionName `json:"name,omitempty"`                  // 城市/区域名称
	SubdivisionID       string                                 `json:"subdivision_id,omitempty"`        // 所属省份/行政区id, 详细信息可通过【查询省份/行政区信息】接口查询获得
	SuperiorSubregionID string                                 `json:"superior_subregion_id,omitempty"` // 上级城市/区域区id
}

// GetCoreHRSubregionRespSubregionName ...
type GetCoreHRSubregionRespSubregionName struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言
	Value string `json:"value,omitempty"` // 名称信息的内容
}

// getCoreHRSubregionResp ...
type getCoreHRSubregionResp struct {
	Code  int64                   `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                  `json:"msg,omitempty"`  // 错误描述
	Data  *GetCoreHRSubregionResp `json:"data,omitempty"`
	Error *ErrorDetail            `json:"error,omitempty"`
}
