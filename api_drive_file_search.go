// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// SearchDriveFile 该接口用于根据搜索条件进行文档搜索。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugDM4UjL4ADO14COwgTN
// new doc: https://open.feishu.cn/document/server-docs/docs/drive-v1/search/document-search
func (r *DriveService) SearchDriveFile(ctx context.Context, request *SearchDriveFileReq, options ...MethodOptionFunc) (*SearchDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveSearchDriveFile != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Drive#SearchDriveFile mock enable")
		return r.cli.mock.mockDriveSearchDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Drive",
		API:                 "SearchDriveFile",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/suite/docs-api/search/object",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(searchDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveSearchDriveFile mock DriveSearchDriveFile method
func (r *Mock) MockDriveSearchDriveFile(f func(ctx context.Context, request *SearchDriveFileReq, options ...MethodOptionFunc) (*SearchDriveFileResp, *Response, error)) {
	r.mockDriveSearchDriveFile = f
}

// UnMockDriveSearchDriveFile un-mock DriveSearchDriveFile method
func (r *Mock) UnMockDriveSearchDriveFile() {
	r.mockDriveSearchDriveFile = nil
}

// SearchDriveFileReq ...
type SearchDriveFileReq struct {
	SearchKey string   `json:"search_key,omitempty"` // 搜索关键字
	Count     *int64   `json:"count,omitempty"`      // 搜索返回数量, 0 <= count <= 50
	Offset    *int64   `json:"offset,omitempty"`     // 搜索偏移位, offset >= 0, offset + count < 200
	OwnerIDs  []string `json:"owner_ids,omitempty"`  // 文档所有者的userid
	ChatIDs   []string `json:"chat_ids,omitempty"`   // 文档所在群的chatid
	DocsTypes []string `json:"docs_types,omitempty"` // 文档类型, 支持: "doc", "sheet", "slide", "bitable", "mindnote", "file"
}

// SearchDriveFileResp ...
type SearchDriveFileResp struct {
	DocsEntities []*SearchDriveFileRespDocsEntity `json:"docs_entities,omitempty"` // 搜索匹配文档列表
	HasMore      bool                             `json:"has_more,omitempty"`      // 搜索偏移位结果列表后是否还有数据
	Total        int64                            `json:"total,omitempty"`         // 搜索匹配文档总数量
}

// SearchDriveFileRespDocsEntity ...
type SearchDriveFileRespDocsEntity struct {
	DocsToken string `json:"docs_token,omitempty"` // 文档token
	DocsType  string `json:"docs_type,omitempty"`  // 文档类型
	Title     string `json:"title,omitempty"`      // 标题
	OwnerID   string `json:"owner_id,omitempty"`   // 文件所有者
}

// searchDriveFileResp ...
type searchDriveFileResp struct {
	Code  int64                `json:"code,omitempty"`
	Msg   string               `json:"msg,omitempty"`
	Data  *SearchDriveFileResp `json:"data,omitempty"`
	Error *ErrorDetail         `json:"error,omitempty"`
}
