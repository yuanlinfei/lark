// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateDriveFolder 在用户云空间的指定文件夹中创建一个新的空文件夹。
//
// 该接口不支持并发创建, 且调用频率上限为 5QPS 以及 10000次/天
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/create_folder
// new doc: https://open.feishu.cn/document/server-docs/docs/drive-v1/folder/create_folder
func (r *DriveService) CreateDriveFolder(ctx context.Context, request *CreateDriveFolderReq, options ...MethodOptionFunc) (*CreateDriveFolderResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveFolder != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveFolder mock enable")
		return r.cli.mock.mockDriveCreateDriveFolder(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveFolder",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/create_folder",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveFolderResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveFolder mock DriveCreateDriveFolder method
func (r *Mock) MockDriveCreateDriveFolder(f func(ctx context.Context, request *CreateDriveFolderReq, options ...MethodOptionFunc) (*CreateDriveFolderResp, *Response, error)) {
	r.mockDriveCreateDriveFolder = f
}

// UnMockDriveCreateDriveFolder un-mock DriveCreateDriveFolder method
func (r *Mock) UnMockDriveCreateDriveFolder() {
	r.mockDriveCreateDriveFolder = nil
}

// CreateDriveFolderReq ...
type CreateDriveFolderReq struct {
	Name        string `json:"name,omitempty"`         // 文件夹名称, 示例值: "New Folder"
	FolderToken string `json:"folder_token,omitempty"` // 父文件夹token。如果需要创建到「我的空间」作为顶级文件夹, 请传入我的空间token[获取方式](https://open.feishu.cn/document/ukTMukTMukTM/ugTNzUjL4UzM14CO1MTN/get-root-folder-meta), 示例值: "fldbcO1UuPz8VwnpPx5a92abcef"
}

// CreateDriveFolderResp ...
type CreateDriveFolderResp struct {
	Token string `json:"token,omitempty"` // 创建文件夹的token
	URL   string `json:"url,omitempty"`   // 创建文件夹的访问url
}

// createDriveFolderResp ...
type createDriveFolderResp struct {
	Code  int64                  `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                 `json:"msg,omitempty"`  // 错误描述
	Data  *CreateDriveFolderResp `json:"data,omitempty"`
	Error *ErrorDetail           `json:"error,omitempty"`
}
