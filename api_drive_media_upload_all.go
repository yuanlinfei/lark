// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
	"io"
)

// UploadDriveMedia 将文件、图片、视频等素材文件上传到指定云文档中。素材文件在云空间中不会显示, 只会显示在对应云文档中。
//
// 请不要使用这个接口上传大于20MB的文件, 如果有这个需求可以尝试使用[分片上传接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/multipart-upload-media/introduction)。
// 该接口支持调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_all
// new doc: https://open.feishu.cn/document/server-docs/docs/drive-v1/media/upload_all
func (r *DriveService) UploadDriveMedia(ctx context.Context, request *UploadDriveMediaReq, options ...MethodOptionFunc) (*UploadDriveMediaResp, *Response, error) {
	if r.cli.mock.mockDriveUploadDriveMedia != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Drive#UploadDriveMedia mock enable")
		return r.cli.mock.mockDriveUploadDriveMedia(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UploadDriveMedia",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/medias/upload_all",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
		IsFile:                true,
	}
	resp := new(uploadDriveMediaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUploadDriveMedia mock DriveUploadDriveMedia method
func (r *Mock) MockDriveUploadDriveMedia(f func(ctx context.Context, request *UploadDriveMediaReq, options ...MethodOptionFunc) (*UploadDriveMediaResp, *Response, error)) {
	r.mockDriveUploadDriveMedia = f
}

// UnMockDriveUploadDriveMedia un-mock DriveUploadDriveMedia method
func (r *Mock) UnMockDriveUploadDriveMedia() {
	r.mockDriveUploadDriveMedia = nil
}

// UploadDriveMediaReq ...
type UploadDriveMediaReq struct {
	FileName   string    `json:"file_name,omitempty"`   // 文件名, 示例值: "demo.jpeg", 最大长度: `250` 字符
	ParentType string    `json:"parent_type,omitempty"` // 上传点类型, 即要将某种类型的素材上传到指定类型的云文档中。例如将一张图片插入到新版文档, 则`parent_type`需填写为`docx_image `, 再如将一个附件上传到新版文档, 则`parent_type`需填写为`docx_file`, 示例值: "doc_image", 可选值有: doc_image: 文档图片。, docx_image: 新版文档图片。, sheet_image: 电子表格图片。, doc_file: 文档文件。, docx_file: 新版文档文件。, sheet_file: 电子表格文件。, vc_virtual_background: vc虚拟背景(灰度中, 暂未开放)。, bitable_image: 多维表格图片。, bitable_file: 多维表格文件。, moments: 同事圈(灰度中, 暂未开放)。, ccm_import_open: 云文档导入文件。
	ParentNode string    `json:"parent_node,omitempty"` // 上传点 token, 用于指定素材将要上传到的具体文档或位置。点击 [这里](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/introduction) 了解各上传点类型及其对应的上传点 Token 的说明
	Size       int64     `json:"size,omitempty"`        // 文件大小（以字节为单位）, 示例值: 1024, 最大值: `20971520`
	Checksum   *string   `json:"checksum,omitempty"`    // 文件adler32校验和（可选）, 示例值: "12345678"
	Extra      *string   `json:"extra,omitempty"`       // 扩展信息(可选), 示例值: "{"test":"test"}"
	File       io.Reader `json:"file,omitempty"`        // 文件二进制内容, 示例值: file binary
}

// UploadDriveMediaResp ...
type UploadDriveMediaResp struct {
	FileToken string `json:"file_token,omitempty"` // 素材文件的 token。
}

// uploadDriveMediaResp ...
type uploadDriveMediaResp struct {
	Code  int64                 `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                `json:"msg,omitempty"`  // 错误描述
	Data  *UploadDriveMediaResp `json:"data,omitempty"`
	Error *ErrorDetail          `json:"error,omitempty"`
}
