// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateDriveMemberPermission 该接口用于根据 filetoken 给用户增加文档的权限。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/create
// new doc: https://open.feishu.cn/document/server-docs/docs/permission/permission-member/create
func (r *DriveService) CreateDriveMemberPermission(ctx context.Context, request *CreateDriveMemberPermissionReq, options ...MethodOptionFunc) (*CreateDriveMemberPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveMemberPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveMemberPermission mock enable")
		return r.cli.mock.mockDriveCreateDriveMemberPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveMemberPermission",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/permissions/:token/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveMemberPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveMemberPermission mock DriveCreateDriveMemberPermission method
func (r *Mock) MockDriveCreateDriveMemberPermission(f func(ctx context.Context, request *CreateDriveMemberPermissionReq, options ...MethodOptionFunc) (*CreateDriveMemberPermissionResp, *Response, error)) {
	r.mockDriveCreateDriveMemberPermission = f
}

// UnMockDriveCreateDriveMemberPermission un-mock DriveCreateDriveMemberPermission method
func (r *Mock) UnMockDriveCreateDriveMemberPermission() {
	r.mockDriveCreateDriveMemberPermission = nil
}

// CreateDriveMemberPermissionReq ...
type CreateDriveMemberPermissionReq struct {
	Token            string `path:"token" json:"-"`              // 文件的 token, 获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6), 示例值: "doccnBKgoMyY5OMbUG6FioTXuBe"
	Type             string `query:"type" json:"-"`              // 文件类型, 需要与文件的 token 相匹配, 示例值: doc, 可选值有: doc: 文档, sheet: 电子表格, file: 云空间文件, wiki: 知识库节点, bitable: 多维表格, docx: 新版文档, folder: 文件夹, mindnote: 思维笔记, minutes: 妙记
	NeedNotification *bool  `query:"need_notification" json:"-"` // 添加权限后是否通知对方, 注意: 使用`tenant_access_token`访问不支持该参数, 示例值: false, 默认值: `false`
	MemberType       string `json:"member_type,omitempty"`       // 协作者 ID 类型, 与协作者 ID 需要对应, 示例值: "openid", 可选值有: email: 飞书邮箱, openid: 开放平台ID, openchat: 开放平台群组ID, opendepartmentid: 开放平台部门ID, userid: 用户自定义ID
	MemberID         string `json:"member_id,omitempty"`         // 协作者 ID, 与协作者 ID 类型需要对应, 示例值: "ou_67e5ecb64ce1c0bd94612c17999db411"
	Perm             string `json:"perm,omitempty"`              // 协作者对应的权限角色, 注意: 妙记还不支持可管理角色, 示例值: "view", 可选值有: view: 可阅读角色, edit: 可编辑角色, full_access: 可管理角色
}

// CreateDriveMemberPermissionResp ...
type CreateDriveMemberPermissionResp struct {
	Member *CreateDriveMemberPermissionRespMember `json:"member,omitempty"` // 本次添加权限的用户信息
}

// CreateDriveMemberPermissionRespMember ...
type CreateDriveMemberPermissionRespMember struct {
	MemberType string `json:"member_type,omitempty"` // 协作者 ID 类型, 与协作者 ID 需要对应, 可选值有: email: 飞书邮箱, openid: 开放平台ID, openchat: 开放平台群组ID, opendepartmentid: 开放平台部门ID, userid: 用户自定义ID
	MemberID   string `json:"member_id,omitempty"`   // 协作者 ID, 与协作者 ID 类型需要对应
	Perm       string `json:"perm,omitempty"`        // 协作者对应的权限角色, 注意: 妙记还不支持可管理角色, 可选值有: view: 可阅读角色, edit: 可编辑角色, full_access: 可管理角色
}

// createDriveMemberPermissionResp ...
type createDriveMemberPermissionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *CreateDriveMemberPermissionResp `json:"data,omitempty"`
}
