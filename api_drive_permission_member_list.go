// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetDriveMemberPermissionList 该接口用于根据 filetoken 查询协作者
//
// - 你能获取到协作者列表的前提是你对该文档有分享权限
// - 目前仅支持人、群、组织架构三种类型的协作者
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/list
// new doc: https://open.feishu.cn/document/server-docs/docs/permission/permission-member/list
func (r *DriveService) GetDriveMemberPermissionList(ctx context.Context, request *GetDriveMemberPermissionListReq, options ...MethodOptionFunc) (*GetDriveMemberPermissionListResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveMemberPermissionList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Drive#GetDriveMemberPermissionList mock enable")
		return r.cli.mock.mockDriveGetDriveMemberPermissionList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveMemberPermissionList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/permissions/:token/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveMemberPermissionListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveMemberPermissionList mock DriveGetDriveMemberPermissionList method
func (r *Mock) MockDriveGetDriveMemberPermissionList(f func(ctx context.Context, request *GetDriveMemberPermissionListReq, options ...MethodOptionFunc) (*GetDriveMemberPermissionListResp, *Response, error)) {
	r.mockDriveGetDriveMemberPermissionList = f
}

// UnMockDriveGetDriveMemberPermissionList un-mock DriveGetDriveMemberPermissionList method
func (r *Mock) UnMockDriveGetDriveMemberPermissionList() {
	r.mockDriveGetDriveMemberPermissionList = nil
}

// GetDriveMemberPermissionListReq ...
type GetDriveMemberPermissionListReq struct {
	Token  string  `path:"token" json:"-"`   // 文件的 token, 获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6), 示例值: "doccnBKgoMyY5OMbUG6FioTXuBe"
	Type   string  `query:"type" json:"-"`   // 文件类型, 需要与文件的 token 相匹配, 示例值: doc, 可选值有: doc: 文档, sheet: 电子表格, file: 云空间文件, wiki: 知识库节点, bitable: 多维表格, docx: 新版文档, mindnote: 思维笔记, minutes: 妙记
	Fields *string `query:"fields" json:"-"` // 指定返回的协作者字段信息, 如无指定则默认不返回, 可选值有: `name`: 协作者名, `type`: 协作者类型, `avatar`: 头像, `external_label`: 外部标签, 注意: 你可以使用特殊值`*`指定返回目前支持的所有字段, 你可以使用`, `分隔若干个你想指定返回的字段, 如: `name, avatar`, 按需指定返回字段接口性能更好, 示例值: *
}

// GetDriveMemberPermissionListResp ...
type GetDriveMemberPermissionListResp struct {
	Items []*GetDriveMemberPermissionListRespItem `json:"items,omitempty"` // 返回的列表数据
}

// GetDriveMemberPermissionListRespItem ...
type GetDriveMemberPermissionListRespItem struct {
	MemberType    string `json:"member_type,omitempty"`    // 协作者 ID 类型, 与协作者 ID 需要对应, 可选值有: email: 飞书邮箱, openid: [开放平台ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get), openchat: [开放平台群组ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), opendepartmentid: [开放平台部门ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), userid: [用户自定义ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get)
	MemberID      string `json:"member_id,omitempty"`      // 协作者 ID, 与协作者 ID 类型需要对应
	Perm          string `json:"perm,omitempty"`           // 协作者对应的权限角色, 可选值有: view: 可阅读角色, edit: 可编辑角色, full_access: 可管理角色
	Type          string `json:"type,omitempty"`           // 协作者的类型, 可选值有: user: 用户, chat: 群组, department: 组织架构
	Name          string `json:"name,omitempty"`           // 协作者的名字, 字段权限要求（满足任一）: 以应用身份读取通讯录, 获取用户基本信息, 以应用身份访问通讯录, 读取通讯录
	Avatar        string `json:"avatar,omitempty"`         // 协作者的头像, 字段权限要求（满足任一）: 以应用身份读取通讯录, 获取用户基本信息, 以应用身份访问通讯录, 读取通讯录
	ExternalLabel bool   `json:"external_label,omitempty"` // 协作者的外部标签
}

// getDriveMemberPermissionListResp ...
type getDriveMemberPermissionListResp struct {
	Code  int64                             `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                            `json:"msg,omitempty"`  // 错误描述
	Data  *GetDriveMemberPermissionListResp `json:"data,omitempty"`
	Error *ErrorDetail                      `json:"error,omitempty"`
}
