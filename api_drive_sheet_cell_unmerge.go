// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UnmergeSheetCell 该接口用于根据 spreadsheetToken 和维度信息拆分单元格；单次操作不超过5000行, 100列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATNzUjLwUzM14CM1MTN
// new doc: https://open.feishu.cn/document/server-docs/docs/sheets-v3/data-operation/split-cells
func (r *DriveService) UnmergeSheetCell(ctx context.Context, request *UnmergeSheetCellReq, options ...MethodOptionFunc) (*UnmergeSheetCellResp, *Response, error) {
	if r.cli.mock.mockDriveUnmergeSheetCell != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Drive#UnmergeSheetCell mock enable")
		return r.cli.mock.mockDriveUnmergeSheetCell(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UnmergeSheetCell",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/unmerge_cells",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(unmergeSheetCellResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUnmergeSheetCell mock DriveUnmergeSheetCell method
func (r *Mock) MockDriveUnmergeSheetCell(f func(ctx context.Context, request *UnmergeSheetCellReq, options ...MethodOptionFunc) (*UnmergeSheetCellResp, *Response, error)) {
	r.mockDriveUnmergeSheetCell = f
}

// UnMockDriveUnmergeSheetCell un-mock DriveUnmergeSheetCell method
func (r *Mock) UnMockDriveUnmergeSheetCell() {
	r.mockDriveUnmergeSheetCell = nil
}

// UnmergeSheetCellReq ...
type UnmergeSheetCellReq struct {
	SpreadSheetToken string `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token, 获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Range            string `json:"range,omitempty"`           // 查询范围, 包含 sheetId 与单元格范围两部分, 目前支持四种索引方式, 详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// UnmergeSheetCellResp ...
type UnmergeSheetCellResp struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
}

// unmergeSheetCellResp ...
type unmergeSheetCellResp struct {
	Code int64                 `json:"code,omitempty"`
	Msg  string                `json:"msg,omitempty"`
	Data *UnmergeSheetCellResp `json:"data,omitempty"`
}
