// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateSheetFilterView 更新筛选视图的名字或者筛选范围。名字长度不超过100, 不能重复即子表内唯一；筛选范围不超过子表的最大范围。
//
// 筛选范围的设置参考: [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/patch
// new doc: https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter_view/patch
func (r *DriveService) UpdateSheetFilterView(ctx context.Context, request *UpdateSheetFilterViewReq, options ...MethodOptionFunc) (*UpdateSheetFilterViewResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetFilterView != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetFilterView mock enable")
		return r.cli.mock.mockDriveUpdateSheetFilterView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetFilterView",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetFilterViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetFilterView mock DriveUpdateSheetFilterView method
func (r *Mock) MockDriveUpdateSheetFilterView(f func(ctx context.Context, request *UpdateSheetFilterViewReq, options ...MethodOptionFunc) (*UpdateSheetFilterViewResp, *Response, error)) {
	r.mockDriveUpdateSheetFilterView = f
}

// UnMockDriveUpdateSheetFilterView un-mock DriveUpdateSheetFilterView method
func (r *Mock) UnMockDriveUpdateSheetFilterView() {
	r.mockDriveUpdateSheetFilterView = nil
}

// UpdateSheetFilterViewReq ...
type UpdateSheetFilterViewReq struct {
	SpreadSheetToken string  `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值: "shtcnmBA*yGehy8"
	SheetID          string  `path:"sheet_id" json:"-"`          // 子表 id, 示例值: "0b**12"
	FilterViewID     string  `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值: "pH9hbVcCXA"
	FilterViewName   *string `json:"filter_view_name,omitempty"` // 筛选视图名字, 示例值: "筛选视图 1"
	Range            *string `json:"range,omitempty"`            // 筛选视图的筛选范围, 示例值: "0b**12!C1:H14"
}

// UpdateSheetFilterViewResp ...
type UpdateSheetFilterViewResp struct {
	FilterView *UpdateSheetFilterViewRespFilterView `json:"filter_view,omitempty"` // 更新后的筛选视图的 id 、name、range
}

// UpdateSheetFilterViewRespFilterView ...
type UpdateSheetFilterViewRespFilterView struct {
	FilterViewID   string `json:"filter_view_id,omitempty"`   // 筛选视图 id
	FilterViewName string `json:"filter_view_name,omitempty"` // 筛选视图名字
	Range          string `json:"range,omitempty"`            // 筛选视图的筛选范围
}

// updateSheetFilterViewResp ...
type updateSheetFilterViewResp struct {
	Code  int64                      `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                     `json:"msg,omitempty"`  // 错误描述
	Data  *UpdateSheetFilterViewResp `json:"data,omitempty"`
	Error *ErrorDetail               `json:"error,omitempty"`
}
