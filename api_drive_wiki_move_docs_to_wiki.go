// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// MoveDocsToWiki 该接口允许移动云空间文档至知识空间, 并挂载在指定位置
//
// ### 移动操作 ###
// 移动后, 文档将从“我的空间”或“共享空间”转移至“知识库”后, 无法从下列入口查看到文档:
// - 云空间主页: 快速访问
// - 我的空间
// - 共享空间
// ### 权限变更 ###
// 移动后, 文档会向所有可查看“页面树”的用户显示, 默认继承父页面的权限设置。
// </md-alert
// 此接口为异步接口。若移动已完成（或文档已在Wiki中）, 则直接返回结果（Wiki token）。若尚未完成, 则返回task id。请使用[获取任务结果](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/task/get)接口进行查询。
// 知识库权限要求, 当前使用的 access token 所代表的应用或用户拥有:
// - 文档可管理权限
// - 原文件夹编辑权限
// - 目标父节点容器编辑权限
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/move_docs_to_wiki
// new doc: https://open.feishu.cn/document/server-docs/docs/wiki-v2/task/move_docs_to_wiki
func (r *DriveService) MoveDocsToWiki(ctx context.Context, request *MoveDocsToWikiReq, options ...MethodOptionFunc) (*MoveDocsToWikiResp, *Response, error) {
	if r.cli.mock.mockDriveMoveDocsToWiki != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#MoveDocsToWiki mock enable")
		return r.cli.mock.mockDriveMoveDocsToWiki(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "MoveDocsToWiki",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/nodes/move_docs_to_wiki",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(moveDocsToWikiResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveMoveDocsToWiki mock DriveMoveDocsToWiki method
func (r *Mock) MockDriveMoveDocsToWiki(f func(ctx context.Context, request *MoveDocsToWikiReq, options ...MethodOptionFunc) (*MoveDocsToWikiResp, *Response, error)) {
	r.mockDriveMoveDocsToWiki = f
}

// UnMockDriveMoveDocsToWiki un-mock DriveMoveDocsToWiki method
func (r *Mock) UnMockDriveMoveDocsToWiki() {
	r.mockDriveMoveDocsToWiki = nil
}

// MoveDocsToWikiReq ...
type MoveDocsToWikiReq struct {
	SpaceID         string  `path:"space_id" json:"-"`           // 知识库id, 示例值: "1565676577122621"
	ParentWikiToken *string `json:"parent_wiki_token,omitempty"` // 节点的父亲token, 传空或不传时将移动为知识空间一级节点, 示例值: "wikcnKQ1k3p**8Vabce"
	ObjType         string  `json:"obj_type,omitempty"`          // 文档类型, 示例值: "doc", 可选值有: doc: 旧版文档, sheet: 表格, bitable: 多维表格, mindnote: 思维导图, docx: 新版文档, file: 文件
	ObjToken        string  `json:"obj_token,omitempty"`         // 文档token, 示例值: "doccnzAaOD**Wabcdef"
	Apply           *bool   `json:"apply,omitempty"`             // 没有权限时, 是否申请移动文档, 如果申请移动, 文档将在处理人同意时自动移动至指定位置, 示例值: true
}

// MoveDocsToWikiResp ...
type MoveDocsToWikiResp struct {
	WikiToken string `json:"wiki_token,omitempty"` // 移动后的知识库节点token
	TaskID    string `json:"task_id,omitempty"`    // 任务id
	Applied   bool   `json:"applied,omitempty"`    // 是否提交了文档迁入申请
}

// moveDocsToWikiResp ...
type moveDocsToWikiResp struct {
	Code int64               `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *MoveDocsToWikiResp `json:"data,omitempty"`
}
