// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetWikiNode 获取知识空间节点信息
//
// 知识库权限要求, 当前使用的 access token 所代表的应用或用户拥有:
// - 节点阅读权限
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node
// new doc: https://open.feishu.cn/document/server-docs/docs/wiki-v2/space-node/get_node
func (r *DriveService) GetWikiNode(ctx context.Context, request *GetWikiNodeReq, options ...MethodOptionFunc) (*GetWikiNodeResp, *Response, error) {
	if r.cli.mock.mockDriveGetWikiNode != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Drive#GetWikiNode mock enable")
		return r.cli.mock.mockDriveGetWikiNode(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetWikiNode",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/get_node",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getWikiNodeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetWikiNode mock DriveGetWikiNode method
func (r *Mock) MockDriveGetWikiNode(f func(ctx context.Context, request *GetWikiNodeReq, options ...MethodOptionFunc) (*GetWikiNodeResp, *Response, error)) {
	r.mockDriveGetWikiNode = f
}

// UnMockDriveGetWikiNode un-mock DriveGetWikiNode method
func (r *Mock) UnMockDriveGetWikiNode() {
	r.mockDriveGetWikiNode = nil
}

// GetWikiNodeReq ...
type GetWikiNodeReq struct {
	Token   string  `query:"token" json:"-"`    // 文档的token, 使用文档token查询时, 需要obj_type参数传入文档对应的类型, 示例值: wikcnKQ1k3p**8Vabcef
	ObjType *string `query:"obj_type" json:"-"` // 文档类型。不传时默认以wiki类型查询, 示例值: docx, 可选值有: doc: 旧版文档, docx: 新版文档, sheet: 表格, mindnote: 思维导图, bitable: 多维表格, file: 文件, slides: 幻灯片, wiki: 知识库节点, 默认值: `wiki`
}

// GetWikiNodeResp ...
type GetWikiNodeResp struct {
	Node *GetWikiNodeRespNode `json:"node,omitempty"` // 节点信息
}

// GetWikiNodeRespNode ...
type GetWikiNodeRespNode struct {
	SpaceID         string `json:"space_id,omitempty"`          // 知识空间id, [获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)
	NodeToken       string `json:"node_token,omitempty"`        // 节点token
	ObjToken        string `json:"obj_token,omitempty"`         // 对应文档类型的token, 可根据 obj_type 判断属于哪种文档类型。
	ObjType         string `json:"obj_type,omitempty"`          // 文档类型, 对于快捷方式, 该字段是对应的实体的obj_type, 可选值有: doc: 旧版文档, sheet: 表格, mindnote: 思维导图, bitable: 多维表格, file: 文件, docx: 新版文档
	ParentNodeToken string `json:"parent_node_token,omitempty"` // 父节点 token。若当前节点为一级节点, 父节点 token 为空。
	NodeType        string `json:"node_type,omitempty"`         // 节点类型, 可选值有: origin: 实体, shortcut: 快捷方式
	OriginNodeToken string `json:"origin_node_token,omitempty"` // 快捷方式对应的实体node_token, 当节点为快捷方式时, 该值不为空。
	OriginSpaceID   string `json:"origin_space_id,omitempty"`   // 快捷方式对应的实体所在的space id
	HasChild        bool   `json:"has_child,omitempty"`         // 是否有子节点
	Title           string `json:"title,omitempty"`             // 文档标题
	ObjCreateTime   string `json:"obj_create_time,omitempty"`   // 文档创建时间
	ObjEditTime     string `json:"obj_edit_time,omitempty"`     // 文档最近编辑时间
	NodeCreateTime  string `json:"node_create_time,omitempty"`  // 节点创建时间
	Creator         string `json:"creator,omitempty"`           // 节点创建者
	Owner           string `json:"owner,omitempty"`             // 节点所有者
}

// getWikiNodeResp ...
type getWikiNodeResp struct {
	Code  int64            `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string           `json:"msg,omitempty"`  // 错误描述
	Data  *GetWikiNodeResp `json:"data,omitempty"`
	Error *ErrorDetail     `json:"error,omitempty"`
}
