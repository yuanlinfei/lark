// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetWikiSpaceList 此接口用于获取有权限访问的知识空间列表。
//
// 此接口为分页接口。由于权限过滤, 可能返回列表为空, 但分页标记（has_more）为true, 可以继续分页请求。
// 对于知识空间各项属性描述请参阅[获取知识空间信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get)
// 使用tenant access token调用时, 请确认应用/机器人拥有部分知识空间的访问权限, 否则返回列表容易为空。参阅[如何将应用添加为知识库管理员（成员）](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/wiki-qa#b5da330b)。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/list
// new doc: https://open.feishu.cn/document/server-docs/docs/wiki-v2/space/list
func (r *DriveService) GetWikiSpaceList(ctx context.Context, request *GetWikiSpaceListReq, options ...MethodOptionFunc) (*GetWikiSpaceListResp, *Response, error) {
	if r.cli.mock.mockDriveGetWikiSpaceList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetWikiSpaceList mock enable")
		return r.cli.mock.mockDriveGetWikiSpaceList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetWikiSpaceList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getWikiSpaceListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetWikiSpaceList mock DriveGetWikiSpaceList method
func (r *Mock) MockDriveGetWikiSpaceList(f func(ctx context.Context, request *GetWikiSpaceListReq, options ...MethodOptionFunc) (*GetWikiSpaceListResp, *Response, error)) {
	r.mockDriveGetWikiSpaceList = f
}

// UnMockDriveGetWikiSpaceList un-mock DriveGetWikiSpaceList method
func (r *Mock) UnMockDriveGetWikiSpaceList() {
	r.mockDriveGetWikiSpaceList = nil
}

// GetWikiSpaceListReq ...
type GetWikiSpaceListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值: 10, 最大值: `50`
	PageToken *string `query:"page_token" json:"-"` // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: 1565676577122621
}

// GetWikiSpaceListResp ...
type GetWikiSpaceListResp struct {
	Items     []*GetWikiSpaceListRespItem `json:"items,omitempty"`      // 数据列表
	PageToken string                      `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                        `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetWikiSpaceListRespItem ...
type GetWikiSpaceListRespItem struct {
	Name        string `json:"name,omitempty"`        // 知识空间名称
	Description string `json:"description,omitempty"` // 知识空间描述
	SpaceID     string `json:"space_id,omitempty"`    // 知识空间id
	SpaceType   string `json:"space_type,omitempty"`  // 表示知识空间类型（团队空间 或 个人空间）, 可选值有: team: 团队空间, person: 个人空间
	Visibility  string `json:"visibility,omitempty"`  // 表示知识空间可见性（公开空间 或 私有空间）, 可选值有: public: 公开空间, private: 私有空间
}

// getWikiSpaceListResp ...
type getWikiSpaceListResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetWikiSpaceListResp `json:"data,omitempty"`
}
