// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
	"io"
)

// UploadImage 上传图片接口, 支持上传 JPEG、PNG、WEBP、GIF、TIFF、BMP、ICO格式图片。
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)
// - 图片大小不得超过10M, 且不支持上传大小为0的图片
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/create
// new doc: https://open.feishu.cn/document/server-docs/im-v1/image/create
func (r *FileService) UploadImage(ctx context.Context, request *UploadImageReq, options ...MethodOptionFunc) (*UploadImageResp, *Response, error) {
	if r.cli.mock.mockFileUploadImage != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] File#UploadImage mock enable")
		return r.cli.mock.mockFileUploadImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "File",
		API:                   "UploadImage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/images",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(uploadImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockFileUploadImage mock FileUploadImage method
func (r *Mock) MockFileUploadImage(f func(ctx context.Context, request *UploadImageReq, options ...MethodOptionFunc) (*UploadImageResp, *Response, error)) {
	r.mockFileUploadImage = f
}

// UnMockFileUploadImage un-mock FileUploadImage method
func (r *Mock) UnMockFileUploadImage() {
	r.mockFileUploadImage = nil
}

// UploadImageReq ...
type UploadImageReq struct {
	ImageType ImageType `json:"image_type,omitempty"` // 图片类型, 示例值: "message", 可选值有: message: 用于发送消息, avatar: 用于设置头像
	Image     io.Reader `json:"image,omitempty"`      // 图片内容, 注意: 上传的图片大小不能超过10MB, 示例值: 二进制文件
}

// UploadImageResp ...
type UploadImageResp struct {
	ImageKey string `json:"image_key,omitempty"` // 图片的key
}

// uploadImageResp ...
type uploadImageResp struct {
	Code  int64            `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string           `json:"msg,omitempty"`  // 错误描述
	Data  *UploadImageResp `json:"data,omitempty"`
	Error *ErrorDetail     `json:"error,omitempty"`
}
