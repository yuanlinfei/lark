// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UnsubscribeHelpdeskEvent 本接口用于取消订阅服务台事件。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/event/unsubscribe
// new doc: https://open.feishu.cn/document/server-docs/helpdesk-v1/event/unsubscribe
func (r *HelpdeskService) UnsubscribeHelpdeskEvent(ctx context.Context, request *UnsubscribeHelpdeskEventReq, options ...MethodOptionFunc) (*UnsubscribeHelpdeskEventResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUnsubscribeHelpdeskEvent != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Helpdesk#UnsubscribeHelpdeskEvent mock enable")
		return r.cli.mock.mockHelpdeskUnsubscribeHelpdeskEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "UnsubscribeHelpdeskEvent",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/events/unsubscribe",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(unsubscribeHelpdeskEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUnsubscribeHelpdeskEvent mock HelpdeskUnsubscribeHelpdeskEvent method
func (r *Mock) MockHelpdeskUnsubscribeHelpdeskEvent(f func(ctx context.Context, request *UnsubscribeHelpdeskEventReq, options ...MethodOptionFunc) (*UnsubscribeHelpdeskEventResp, *Response, error)) {
	r.mockHelpdeskUnsubscribeHelpdeskEvent = f
}

// UnMockHelpdeskUnsubscribeHelpdeskEvent un-mock HelpdeskUnsubscribeHelpdeskEvent method
func (r *Mock) UnMockHelpdeskUnsubscribeHelpdeskEvent() {
	r.mockHelpdeskUnsubscribeHelpdeskEvent = nil
}

// UnsubscribeHelpdeskEventReq ...
type UnsubscribeHelpdeskEventReq struct {
	Events []*UnsubscribeHelpdeskEventReqEvent `json:"events,omitempty"` // event list to unsubscribe
}

// UnsubscribeHelpdeskEventReqEvent ...
type UnsubscribeHelpdeskEventReqEvent struct {
	Type    string `json:"type,omitempty"`    // 事件类型, 示例值: "helpdesk.ticket_message"
	Subtype string `json:"subtype,omitempty"` // 事件子类型, 示例值: "ticket_message.created_v1"
}

// UnsubscribeHelpdeskEventResp ...
type UnsubscribeHelpdeskEventResp struct {
}

// unsubscribeHelpdeskEventResp ...
type unsubscribeHelpdeskEventResp struct {
	Code  int64                         `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                        `json:"msg,omitempty"`  // 错误描述
	Data  *UnsubscribeHelpdeskEventResp `json:"data,omitempty"`
	Error *ErrorDetail                  `json:"error,omitempty"`
}
