// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetHelpdeskNotification 查询推送详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/get
// new doc: https://open.feishu.cn/document/server-docs/helpdesk-v1/notification/get
func (r *HelpdeskService) GetHelpdeskNotification(ctx context.Context, request *GetHelpdeskNotificationReq, options ...MethodOptionFunc) (*GetHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskNotification",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskNotification mock HelpdeskGetHelpdeskNotification method
func (r *Mock) MockHelpdeskGetHelpdeskNotification(f func(ctx context.Context, request *GetHelpdeskNotificationReq, options ...MethodOptionFunc) (*GetHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskNotification = f
}

// UnMockHelpdeskGetHelpdeskNotification un-mock HelpdeskGetHelpdeskNotification method
func (r *Mock) UnMockHelpdeskGetHelpdeskNotification() {
	r.mockHelpdeskGetHelpdeskNotification = nil
}

// GetHelpdeskNotificationReq ...
type GetHelpdeskNotificationReq struct {
	NotificationID string  `path:"notification_id" json:"-"` // 唯一ID, 示例值: "1624326025000"
	UserIDType     *IDType `query:"user_id_type" json:"-"`   // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// GetHelpdeskNotificationResp ...
type GetHelpdeskNotificationResp struct {
	Notification    *GetHelpdeskNotificationRespNotification `json:"notification,omitempty"`      // push任务详情
	ApprovalAppLink string                                   `json:"approval_app_link,omitempty"` // 审批链接
}

// GetHelpdeskNotificationRespNotification ...
type GetHelpdeskNotificationRespNotification struct {
	ID                          string                                                            `json:"id,omitempty"`                              // 非必填, 创建成功后返回
	JobName                     string                                                            `json:"job_name,omitempty"`                        // 必填, 任务名称
	Status                      int64                                                             `json:"status,omitempty"`                          // 非必填, 创建成功后返回
	CreateUser                  *GetHelpdeskNotificationRespNotificationCreateUser                `json:"create_user,omitempty"`                     // 非必填, 创建人
	CreatedAt                   string                                                            `json:"created_at,omitempty"`                      // 非必填, 创建时间（毫秒时间戳）
	UpdateUser                  *GetHelpdeskNotificationRespNotificationUpdateUser                `json:"update_user,omitempty"`                     // 非必填, 更新用户
	UpdatedAt                   string                                                            `json:"updated_at,omitempty"`                      // 非必填, 更新时间（毫秒时间戳）
	TargetUserCount             int64                                                             `json:"target_user_count,omitempty"`               // 非必填, 目标推送用户总数
	SentUserCount               int64                                                             `json:"sent_user_count,omitempty"`                 // 非必填, 已推送用户总数
	ReadUserCount               int64                                                             `json:"read_user_count,omitempty"`                 // 非必填, 已读用户总数
	SendAt                      string                                                            `json:"send_at,omitempty"`                         // 非必填, 推送任务触发时间（毫秒时间戳）
	PushContent                 string                                                            `json:"push_content,omitempty"`                    // 必填, 推送内容, 详见: https://open.feishu.cn/tool/cardbuilder?from=howtoguide
	PushType                    int64                                                             `json:"push_type,omitempty"`                       // 必填, 0（定时推送: push_scope不能等于3） 1（新人入职推送: push_scope必须等于1或者3；new_staff_scope_type不能为空）
	PushScopeType               int64                                                             `json:"push_scope_type,omitempty"`                 // 必填, 推送范围（服务台私信） 0: 组织内全部成员（user_list和department_list必须为空） 1: 不推送任何成员（user_list和department_list必须为空, chat_list不可为空） 2: 推送到部分成员（user_list或department_list不能为空） 3: 入职新人 以上四种状态, chat_list都相对独立, 只有在推送范围为1时, 必须需要设置chat_list
	NewStaffScopeType           int64                                                             `json:"new_staff_scope_type,omitempty"`            // 非必填, 新人入职范围类型（push_type为1时生效） 0: 组织内所有新人 1: 组织内特定的部门（new_staff_scope_department_list 字段不能为空）
	NewStaffScopeDepartmentList []*GetHelpdeskNotificationRespNotificationNewStaffScopeDepartment `json:"new_staff_scope_department_list,omitempty"` // 非必填, 新人入职生效部门列表
	UserList                    []*GetHelpdeskNotificationRespNotificationUser                    `json:"user_list,omitempty"`                       // 非必填, push推送到成员列表
	DepartmentList              []*GetHelpdeskNotificationRespNotificationDepartment              `json:"department_list,omitempty"`                 // 非必填, push推送到的部门信息列表
	ChatList                    []*GetHelpdeskNotificationRespNotificationChat                    `json:"chat_list,omitempty"`                       // 非必填, push推送到的会话列表(群)
	Ext                         string                                                            `json:"ext,omitempty"`                             // 非必填, 预留扩展字段
}

// GetHelpdeskNotificationRespNotificationChat ...
type GetHelpdeskNotificationRespNotificationChat struct {
	ChatID string `json:"chat_id,omitempty"` // 非必填, 会话ID
	Name   string `json:"name,omitempty"`    // 非必填, 会话名称
}

// GetHelpdeskNotificationRespNotificationCreateUser ...
type GetHelpdeskNotificationRespNotificationCreateUser struct {
	UserID    string `json:"user_id,omitempty"`    // 非必填, 用户id
	AvatarURL string `json:"avatar_url,omitempty"` // 非必填, 头像地址
	Name      string `json:"name,omitempty"`       // 非必填, 用户名称
}

// GetHelpdeskNotificationRespNotificationDepartment ...
type GetHelpdeskNotificationRespNotificationDepartment struct {
	DepartmentID string `json:"department_id,omitempty"` // 部门ID
	Name         string `json:"name,omitempty"`          // 非必填, 部门名称
}

// GetHelpdeskNotificationRespNotificationNewStaffScopeDepartment ...
type GetHelpdeskNotificationRespNotificationNewStaffScopeDepartment struct {
	DepartmentID string `json:"department_id,omitempty"` // 部门ID
	Name         string `json:"name,omitempty"`          // 非必填, 部门名称
}

// GetHelpdeskNotificationRespNotificationUpdateUser ...
type GetHelpdeskNotificationRespNotificationUpdateUser struct {
	UserID    string `json:"user_id,omitempty"`    // 非必填, 用户id
	AvatarURL string `json:"avatar_url,omitempty"` // 非必填, 头像地址
	Name      string `json:"name,omitempty"`       // 非必填, 用户名称
}

// GetHelpdeskNotificationRespNotificationUser ...
type GetHelpdeskNotificationRespNotificationUser struct {
	UserID    string `json:"user_id,omitempty"`    // 非必填, 用户id
	AvatarURL string `json:"avatar_url,omitempty"` // 非必填, 头像地址
	Name      string `json:"name,omitempty"`       // 非必填, 用户名称
}

// getHelpdeskNotificationResp ...
type getHelpdeskNotificationResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskNotificationResp `json:"data,omitempty"`
}
