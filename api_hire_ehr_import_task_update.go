// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateHireEHRImportTask 在处理完导入 e-HR 事件后, 可调用该接口, 更新  e-HR 导入任务结果。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/ehr_import_task/patch
// new doc: https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/onboard/patch-2
func (r *HireService) UpdateHireEHRImportTask(ctx context.Context, request *UpdateHireEHRImportTaskReq, options ...MethodOptionFunc) (*UpdateHireEHRImportTaskResp, *Response, error) {
	if r.cli.mock.mockHireUpdateHireEHRImportTask != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Hire#UpdateHireEHRImportTask mock enable")
		return r.cli.mock.mockHireUpdateHireEHRImportTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "UpdateHireEHRImportTask",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/ehr_import_tasks/:ehr_import_task_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateHireEHRImportTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireUpdateHireEHRImportTask mock HireUpdateHireEHRImportTask method
func (r *Mock) MockHireUpdateHireEHRImportTask(f func(ctx context.Context, request *UpdateHireEHRImportTaskReq, options ...MethodOptionFunc) (*UpdateHireEHRImportTaskResp, *Response, error)) {
	r.mockHireUpdateHireEHRImportTask = f
}

// UnMockHireUpdateHireEHRImportTask un-mock HireUpdateHireEHRImportTask method
func (r *Mock) UnMockHireUpdateHireEHRImportTask() {
	r.mockHireUpdateHireEHRImportTask = nil
}

// UpdateHireEHRImportTaskReq ...
type UpdateHireEHRImportTaskReq struct {
	EHRImportTaskID string  `path:"ehr_import_task_id" json:"-"` // 导入任务 ID, 示例值: "623455234"
	FailReason      *string `json:"fail_reason,omitempty"`       // 失败原因, 仅在导入结果为失败时可用, 示例值: "当前 HC 不可用"
	RedirectURL     *string `json:"redirect_url,omitempty"`      // 跳转链接, 若需返回跳转链接, 请前往飞书招聘「设置 - 生态对接 - e-HR / OA 办公系统 - 『导入 e-HR』功能设置」中开启「支持对接的 e-HR / OA 系统返回外部链接」开关, 示例值: "https://example.com"
	State           int64   `json:"state,omitempty"`             // 导入结果, 示例值: 2, 可选值有: 1: 导入成功, 2: 导入失败
}

// UpdateHireEHRImportTaskResp ...
type UpdateHireEHRImportTaskResp struct {
}

// updateHireEHRImportTaskResp ...
type updateHireEHRImportTaskResp struct {
	Code  int64                        `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                       `json:"msg,omitempty"`  // 错误描述
	Data  *UpdateHireEHRImportTaskResp `json:"data,omitempty"`
	Error *ErrorDetail                 `json:"error,omitempty"`
}
