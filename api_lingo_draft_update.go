// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateLingoDraft 根据 draft_id 更新草稿内容, 已审批的草稿无法编辑。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/draft/update
func (r *LingoService) UpdateLingoDraft(ctx context.Context, request *UpdateLingoDraftReq, options ...MethodOptionFunc) (*UpdateLingoDraftResp, *Response, error) {
	if r.cli.mock.mockLingoUpdateLingoDraft != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Lingo#UpdateLingoDraft mock enable")
		return r.cli.mock.mockLingoUpdateLingoDraft(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Lingo",
		API:                   "UpdateLingoDraft",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/lingo/v1/drafts/:draft_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateLingoDraftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockLingoUpdateLingoDraft mock LingoUpdateLingoDraft method
func (r *Mock) MockLingoUpdateLingoDraft(f func(ctx context.Context, request *UpdateLingoDraftReq, options ...MethodOptionFunc) (*UpdateLingoDraftResp, *Response, error)) {
	r.mockLingoUpdateLingoDraft = f
}

// UnMockLingoUpdateLingoDraft un-mock LingoUpdateLingoDraft method
func (r *Mock) UnMockLingoUpdateLingoDraft() {
	r.mockLingoUpdateLingoDraft = nil
}

// UpdateLingoDraftReq ...
type UpdateLingoDraftReq struct {
	DraftID     string                          `path:"draft_id" json:"-"`      // 草稿ID, 示例值: "7241543272228814852"
	UserIDType  *IDType                         `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ID          *string                         `json:"id,omitempty"`           // 词条 ID （需要更新某个词条时填写, 若是创建新词条可不填写）, 示例值: "enterprise_40217521"
	MainKeys    []*UpdateLingoDraftReqMainKey   `json:"main_keys,omitempty"`    // 词条名, 最大长度: `1`
	Aliases     []*UpdateLingoDraftReqAliase    `json:"aliases,omitempty"`      // 别名, 最大长度: `10`
	Description *string                         `json:"description,omitempty"`  // 详情描述, 示例值: "词典是飞书提供的一款知识管理工具, 通过飞书词典可以帮助企业将分散的知识信息进行聚合, 并通过UGC的方式, 促进企业知识的保鲜和流通", 最大长度: `5000` 字符
	RelatedMeta *UpdateLingoDraftReqRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	RichText    *string                         `json:"rich_text,omitempty"`    // 富文本格式（当填写富文本内容时, description字段将会失效可不填写）, 支持的格式参考[飞书词典指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/overview)中的释义部分, 示例值: "<b>加粗</b><i>斜体</i><p><a href=\"https://feishu.cn\">链接</a></p><p><span>词典是飞书提供的一款知识管理工具, 通过飞书词典可以帮助企业将分散的知识信息进行聚合, 并通过UGC的方式, 促进企业知识的保鲜和流通</span></p>", 最大长度: `5000` 字符
	I18nDescs   []*UpdateLingoDraftReqI18nDesc  `json:"i18n_descs,omitempty"`   // 国际化的词条释义, 最大长度: `3`
}

// UpdateLingoDraftReqAliase ...
type UpdateLingoDraftReqAliase struct {
	Key           string                                  `json:"key,omitempty"`            // 名称, 示例值: "飞书词典"
	DisplayStatus *UpdateLingoDraftReqAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// UpdateLingoDraftReqAliaseDisplayStatus ...
type UpdateLingoDraftReqAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许在 IM 和 Doc 等场景进行高亮提示, 示例值: true
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许在飞书中被搜索到, 示例值: true
}

// UpdateLingoDraftReqI18nDesc ...
type UpdateLingoDraftReqI18nDesc struct {
	Language    int64   `json:"language,omitempty"`    // 语言类型, 示例值: 1, 可选值有: 1: 中文, 2: 英文, 3: 日文
	Description *string `json:"description,omitempty"` // 纯文本释义, 示例值: "词典是飞书提供的一款知识管理工具, 通过飞书词典可以帮助企业将分散的知识信息进行聚合, 并通过UGC的方式, 促进企业知识的保鲜和流通", 长度范围: `1` ～ `5000` 字符
	RichText    *string `json:"rich_text,omitempty"`   // 富文本描述, 示例值: "<p>词典是飞书提供的一款知识管理工具, 通过飞书词典可以帮助企业将分散的知识信息进行聚合, 并通过UGC的方式, 促进企业知识的保鲜和流通</p>", 长度范围: `1` ～ `5000` 字符
}

// UpdateLingoDraftReqMainKey ...
type UpdateLingoDraftReqMainKey struct {
	Key           string                                   `json:"key,omitempty"`            // 名称, 示例值: "飞书词典"
	DisplayStatus *UpdateLingoDraftReqMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// UpdateLingoDraftReqMainKeyDisplayStatus ...
type UpdateLingoDraftReqMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许在 IM 和 Doc 等场景进行高亮提示, 示例值: true
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许在飞书中被搜索到, 示例值: true
}

// UpdateLingoDraftReqRelatedMeta ...
type UpdateLingoDraftReqRelatedMeta struct {
	Users           []*UpdateLingoDraftReqRelatedMetaUser           `json:"users,omitempty"`           // 关联用户信息
	Chats           []*UpdateLingoDraftReqRelatedMetaChat           `json:"chats,omitempty"`           // 关联群组信息
	Docs            []*UpdateLingoDraftReqRelatedMetaDoc            `json:"docs,omitempty"`            // 关联文档信息
	Oncalls         []*UpdateLingoDraftReqRelatedMetaOncall         `json:"oncalls,omitempty"`         // 关联值班者信息
	Links           []*UpdateLingoDraftReqRelatedMetaLink           `json:"links,omitempty"`           // 关联链接信息
	Abbreviations   []*UpdateLingoDraftReqRelatedMetaAbbreviation   `json:"abbreviations,omitempty"`   // 相关词条信息
	Classifications []*UpdateLingoDraftReqRelatedMetaClassification `json:"classifications,omitempty"` // 当前词条所属分类, 词条只能属于二级分类, 且每个一级分类下只能选择一个二级分类。
	Images          []*UpdateLingoDraftReqRelatedMetaImage          `json:"images,omitempty"`          // 上传的相关图片, 最大长度: `10`
}

// UpdateLingoDraftReqRelatedMetaAbbreviation ...
type UpdateLingoDraftReqRelatedMetaAbbreviation struct {
	ID *string `json:"id,omitempty"` // 相关其他词条 id, 示例值: "enterprise_51587960"
}

// UpdateLingoDraftReqRelatedMetaChat ...
type UpdateLingoDraftReqRelatedMetaChat struct {
	ID string `json:"id,omitempty"` // 数据 id, 示例值: "格式请看请求体示例"
}

// UpdateLingoDraftReqRelatedMetaClassification ...
type UpdateLingoDraftReqRelatedMetaClassification struct {
	ID       string  `json:"id,omitempty"`        // 二级分类 ID, 示例值: "70496069267***37761"
	FatherID *string `json:"father_id,omitempty"` // 对应一级分类 ID, 示例值: "7049606926702837777"
}

// UpdateLingoDraftReqRelatedMetaDoc ...
type UpdateLingoDraftReqRelatedMetaDoc struct {
	Title *string `json:"title,omitempty"` // 标题, 示例值: "飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值: "https://www.feishu.cn/hc/zh-CN", 正则校验: `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:.;]+[-A-Za-z0-9+&@#/%=~_|]`
}

// UpdateLingoDraftReqRelatedMetaImage ...
type UpdateLingoDraftReqRelatedMetaImage struct {
	Token string `json:"token,omitempty"` // 通过文件接口上传后的图片 token, 示例值: "boxbcEcmKiDia3evgqWTpvdc7jc"
}

// UpdateLingoDraftReqRelatedMetaLink ...
type UpdateLingoDraftReqRelatedMetaLink struct {
	Title *string `json:"title,omitempty"` // 标题, 示例值: "飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值: "https://www.feishu.cn/hc/zh-CN", 正则校验: `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:.;]+[-A-Za-z0-9+&@#/%=~_|]`
}

// UpdateLingoDraftReqRelatedMetaOncall ...
type UpdateLingoDraftReqRelatedMetaOncall struct {
	ID string `json:"id,omitempty"` // 数据 id, 示例值: "格式请看请求体示例"
}

// UpdateLingoDraftReqRelatedMetaUser ...
type UpdateLingoDraftReqRelatedMetaUser struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值: "格式请看请求体示例"
	Title *string `json:"title,omitempty"` // 标题, 示例值: "飞书官网"
}

// UpdateLingoDraftResp ...
type UpdateLingoDraftResp struct {
	Draft *UpdateLingoDraftRespDraft `json:"draft,omitempty"` // 草稿
}

// UpdateLingoDraftRespDraft ...
type UpdateLingoDraftRespDraft struct {
	DraftID string                           `json:"draft_id,omitempty"` // 草稿 Id
	Entity  *UpdateLingoDraftRespDraftEntity `json:"entity,omitempty"`   // 实体词
}

// UpdateLingoDraftRespDraftEntity ...
type UpdateLingoDraftRespDraftEntity struct {
	ID          string                                      `json:"id,omitempty"`           // 词条 ID （需要更新某个词条时填写, 若是创建新词条可不填写）
	MainKeys    []*UpdateLingoDraftRespDraftEntityMainKey   `json:"main_keys,omitempty"`    // 词条名
	Aliases     []*UpdateLingoDraftRespDraftEntityAliase    `json:"aliases,omitempty"`      // 别名
	Description string                                      `json:"description,omitempty"`  // 详情描述
	Creator     string                                      `json:"creator,omitempty"`      // 创建者
	CreateTime  string                                      `json:"create_time,omitempty"`  // 词条创建时间（秒级时间戳）
	Updater     string                                      `json:"updater,omitempty"`      // 最近一次更新者
	UpdateTime  string                                      `json:"update_time,omitempty"`  // 最近一次更新词条时间（秒级时间戳）
	RelatedMeta *UpdateLingoDraftRespDraftEntityRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	Statistics  *UpdateLingoDraftRespDraftEntityStatistics  `json:"statistics,omitempty"`   // 当前词条收到的反馈数据
	OuterInfo   *UpdateLingoDraftRespDraftEntityOuterInfo   `json:"outer_info,omitempty"`   // 外部系统关联数据
	RichText    string                                      `json:"rich_text,omitempty"`    // 富文本格式（当填写富文本内容时, description字段将会失效可不填写）, 支持的格式参考[飞书词典指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/overview)中的释义部分
	Source      int64                                       `json:"source,omitempty"`       // 词条的创建来源, 1: 用户主动创建, 2: 批量导入, 3: 官方词, 4: OpenAPI 创建
	I18nDescs   []*UpdateLingoDraftRespDraftEntityI18nDesc  `json:"i18n_descs,omitempty"`   // 国际化的词条释义
}

// UpdateLingoDraftRespDraftEntityAliase ...
type UpdateLingoDraftRespDraftEntityAliase struct {
	Key           string                                              `json:"key,omitempty"`            // 名称
	DisplayStatus *UpdateLingoDraftRespDraftEntityAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// UpdateLingoDraftRespDraftEntityAliaseDisplayStatus ...
type UpdateLingoDraftRespDraftEntityAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许在 IM 和 Doc 等场景进行高亮提示
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许在飞书中被搜索到
}

// UpdateLingoDraftRespDraftEntityI18nDesc ...
type UpdateLingoDraftRespDraftEntityI18nDesc struct {
	Language    int64  `json:"language,omitempty"`    // 语言类型, 可选值有: 1: 中文, 2: 英文, 3: 日文
	Description string `json:"description,omitempty"` // 纯文本释义
	RichText    string `json:"rich_text,omitempty"`   // 富文本描述
}

// UpdateLingoDraftRespDraftEntityMainKey ...
type UpdateLingoDraftRespDraftEntityMainKey struct {
	Key           string                                               `json:"key,omitempty"`            // 名称
	DisplayStatus *UpdateLingoDraftRespDraftEntityMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// UpdateLingoDraftRespDraftEntityMainKeyDisplayStatus ...
type UpdateLingoDraftRespDraftEntityMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许在 IM 和 Doc 等场景进行高亮提示
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许在飞书中被搜索到
}

// UpdateLingoDraftRespDraftEntityOuterInfo ...
type UpdateLingoDraftRespDraftEntityOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 外部系统（不能包含中横线 "-"）
	OuterID  string `json:"outer_id,omitempty"` // 词条在外部系统中对应的唯一 ID（不能包含中横线 "-"）
}

// UpdateLingoDraftRespDraftEntityRelatedMeta ...
type UpdateLingoDraftRespDraftEntityRelatedMeta struct {
	Users           []*UpdateLingoDraftRespDraftEntityRelatedMetaUser           `json:"users,omitempty"`           // 关联用户信息
	Chats           []*UpdateLingoDraftRespDraftEntityRelatedMetaChat           `json:"chats,omitempty"`           // 关联群组信息
	Docs            []*UpdateLingoDraftRespDraftEntityRelatedMetaDoc            `json:"docs,omitempty"`            // 关联文档信息
	Oncalls         []*UpdateLingoDraftRespDraftEntityRelatedMetaOncall         `json:"oncalls,omitempty"`         // 关联值班者信息
	Links           []*UpdateLingoDraftRespDraftEntityRelatedMetaLink           `json:"links,omitempty"`           // 关联链接信息
	Abbreviations   []*UpdateLingoDraftRespDraftEntityRelatedMetaAbbreviation   `json:"abbreviations,omitempty"`   // 相关词条信息
	Classifications []*UpdateLingoDraftRespDraftEntityRelatedMetaClassification `json:"classifications,omitempty"` // 当前词条所属分类, 词条只能属于二级分类, 且每个一级分类下只能选择一个二级分类。
	Images          []*UpdateLingoDraftRespDraftEntityRelatedMetaImage          `json:"images,omitempty"`          // 上传的相关图片
}

// UpdateLingoDraftRespDraftEntityRelatedMetaAbbreviation ...
type UpdateLingoDraftRespDraftEntityRelatedMetaAbbreviation struct {
	ID string `json:"id,omitempty"` // 相关其他词条 id
}

// UpdateLingoDraftRespDraftEntityRelatedMetaChat ...
type UpdateLingoDraftRespDraftEntityRelatedMetaChat struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// UpdateLingoDraftRespDraftEntityRelatedMetaClassification ...
type UpdateLingoDraftRespDraftEntityRelatedMetaClassification struct {
	ID       string `json:"id,omitempty"`        // 二级分类 ID
	FatherID string `json:"father_id,omitempty"` // 对应一级分类 ID
}

// UpdateLingoDraftRespDraftEntityRelatedMetaDoc ...
type UpdateLingoDraftRespDraftEntityRelatedMetaDoc struct {
	Title string `json:"title,omitempty"` // 标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// UpdateLingoDraftRespDraftEntityRelatedMetaImage ...
type UpdateLingoDraftRespDraftEntityRelatedMetaImage struct {
	Token string `json:"token,omitempty"` // 通过文件接口上传后的图片 token
}

// UpdateLingoDraftRespDraftEntityRelatedMetaLink ...
type UpdateLingoDraftRespDraftEntityRelatedMetaLink struct {
	Title string `json:"title,omitempty"` // 标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// UpdateLingoDraftRespDraftEntityRelatedMetaOncall ...
type UpdateLingoDraftRespDraftEntityRelatedMetaOncall struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// UpdateLingoDraftRespDraftEntityRelatedMetaUser ...
type UpdateLingoDraftRespDraftEntityRelatedMetaUser struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// UpdateLingoDraftRespDraftEntityStatistics ...
type UpdateLingoDraftRespDraftEntityStatistics struct {
	LikeCount    int64 `json:"like_count,omitempty"`    // 点赞数量
	DislikeCount int64 `json:"dislike_count,omitempty"` // 当前词条版本收到的负反馈数量
}

// updateLingoDraftResp ...
type updateLingoDraftResp struct {
	Code  int64                 `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                `json:"msg,omitempty"`  // 错误描述
	Data  *UpdateLingoDraftResp `json:"data,omitempty"`
	Error *ErrorDetail          `json:"error,omitempty"`
}
