// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetLingoEntityList 分页拉取词条列表数据, 支持拉取租户内(或指定词库内)的全部词条。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/entity/list
func (r *LingoService) GetLingoEntityList(ctx context.Context, request *GetLingoEntityListReq, options ...MethodOptionFunc) (*GetLingoEntityListResp, *Response, error) {
	if r.cli.mock.mockLingoGetLingoEntityList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Lingo#GetLingoEntityList mock enable")
		return r.cli.mock.mockLingoGetLingoEntityList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Lingo",
		API:                   "GetLingoEntityList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/lingo/v1/entities",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getLingoEntityListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockLingoGetLingoEntityList mock LingoGetLingoEntityList method
func (r *Mock) MockLingoGetLingoEntityList(f func(ctx context.Context, request *GetLingoEntityListReq, options ...MethodOptionFunc) (*GetLingoEntityListResp, *Response, error)) {
	r.mockLingoGetLingoEntityList = f
}

// UnMockLingoGetLingoEntityList un-mock LingoGetLingoEntityList method
func (r *Mock) UnMockLingoGetLingoEntityList() {
	r.mockLingoGetLingoEntityList = nil
}

// GetLingoEntityListReq ...
type GetLingoEntityListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值: 20, 默认值: `20`, 取值范围: `1` ～ `100`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: 408ecac018b2e3518db37275e812aad7bb8ad3e755fc886f322ac6c430ba
	Provider   *string `query:"provider" json:"-"`     // 相关外部系统【可用来过滤词条数据】, 示例值: 星云, 长度范围: `2` ～ `32` 字符
	RepoID     *string `query:"repo_id" json:"-"`      // 词库 id(不传时默认返回全员词库数据), 如以应用身份拉取非全员词库的词条, 需要在“词库设置”页面添加应用；若以用户身份拉取非全员词库的词条, 该用户需要拥有对应词库的可见权限, 示例值: 7152790921053274113
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// GetLingoEntityListResp ...
type GetLingoEntityListResp struct {
	Entities  []*GetLingoEntityListRespEntity `json:"entities,omitempty"`   // 词条列表
	PageToken string                          `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                            `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetLingoEntityListRespEntity ...
type GetLingoEntityListRespEntity struct {
	ID          string                                   `json:"id,omitempty"`           // 词条 ID
	MainKeys    []*GetLingoEntityListRespEntityMainKey   `json:"main_keys,omitempty"`    // 词条名
	Aliases     []*GetLingoEntityListRespEntityAliase    `json:"aliases,omitempty"`      // 别名
	Description string                                   `json:"description,omitempty"`  // 纯文本格式词条释义。注: description 和 rich_text 至少有一个, 否则会报错: 1540001
	Creator     string                                   `json:"creator,omitempty"`      // 创建者
	CreateTime  string                                   `json:"create_time,omitempty"`  // 词条创建时间（秒级时间戳）
	Updater     string                                   `json:"updater,omitempty"`      // 最近一次更新者
	UpdateTime  string                                   `json:"update_time,omitempty"`  // 最近一次更新词条时间（秒级时间戳）
	RelatedMeta *GetLingoEntityListRespEntityRelatedMeta `json:"related_meta,omitempty"` // 更多相关信息
	Statistics  *GetLingoEntityListRespEntityStatistics  `json:"statistics,omitempty"`   // 当前词条收到的反馈数据
	OuterInfo   *GetLingoEntityListRespEntityOuterInfo   `json:"outer_info,omitempty"`   // 外部系统关联数据
	RichText    string                                   `json:"rich_text,omitempty"`    // 富文本格式（当填写富文本内容时, description字段将会失效可不填写）, 支持的格式参考[飞书词典指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/overview)中的释义部分
	Source      int64                                    `json:"source,omitempty"`       // 词条的创建来源, 1: 用户主动创建, 2: 批量导入, 3: 官方词, 4: OpenAPI 创建
	I18nDescs   []*GetLingoEntityListRespEntityI18nDesc  `json:"i18n_descs,omitempty"`   // 国际化的词条释义
}

// GetLingoEntityListRespEntityAliase ...
type GetLingoEntityListRespEntityAliase struct {
	Key           string                                           `json:"key,omitempty"`            // 名称
	DisplayStatus *GetLingoEntityListRespEntityAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// GetLingoEntityListRespEntityAliaseDisplayStatus ...
type GetLingoEntityListRespEntityAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许在 IM 和 Doc 等场景进行高亮提示
	AllowSearch    bool `json:"allow_search,omitempty"`    // 对应名称是否在搜索结果中展示
}

// GetLingoEntityListRespEntityI18nDesc ...
type GetLingoEntityListRespEntityI18nDesc struct {
	Language    int64  `json:"language,omitempty"`    // 语言类型, 可选值有: 1: 中文, 2: 英文, 3: 日文
	Description string `json:"description,omitempty"` // 纯文本释义
	RichText    string `json:"rich_text,omitempty"`   // 富文本描述
}

// GetLingoEntityListRespEntityMainKey ...
type GetLingoEntityListRespEntityMainKey struct {
	Key           string                                            `json:"key,omitempty"`            // 名称
	DisplayStatus *GetLingoEntityListRespEntityMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// GetLingoEntityListRespEntityMainKeyDisplayStatus ...
type GetLingoEntityListRespEntityMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许在 IM 和 Doc 等场景进行高亮提示
	AllowSearch    bool `json:"allow_search,omitempty"`    // 对应名称是否在搜索结果中展示
}

// GetLingoEntityListRespEntityOuterInfo ...
type GetLingoEntityListRespEntityOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 外部系统（不能包含中横线 "-"）
	OuterID  string `json:"outer_id,omitempty"` // 词条在外部系统中对应的唯一 ID（不能包含中横线 "-"）
}

// GetLingoEntityListRespEntityRelatedMeta ...
type GetLingoEntityListRespEntityRelatedMeta struct {
	Users           []*GetLingoEntityListRespEntityRelatedMetaUser           `json:"users,omitempty"`           // 相关联系人
	Chats           []*GetLingoEntityListRespEntityRelatedMetaChat           `json:"chats,omitempty"`           // 相关服务中的相关公开群
	Docs            []*GetLingoEntityListRespEntityRelatedMetaDoc            `json:"docs,omitempty"`            // 相关云文档
	Oncalls         []*GetLingoEntityListRespEntityRelatedMetaOncall         `json:"oncalls,omitempty"`         // 相关服务中的相关值班号
	Links           []*GetLingoEntityListRespEntityRelatedMetaLink           `json:"links,omitempty"`           // 相关链接
	Abbreviations   []*GetLingoEntityListRespEntityRelatedMetaAbbreviation   `json:"abbreviations,omitempty"`   // 相关词条
	Classifications []*GetLingoEntityListRespEntityRelatedMetaClassification `json:"classifications,omitempty"` // 当前词条所属分类, 词条只能属于二级分类, 且每个一级分类下只能选择一个二级分类。
	Images          []*GetLingoEntityListRespEntityRelatedMetaImage          `json:"images,omitempty"`          // 上传的相关图片
}

// GetLingoEntityListRespEntityRelatedMetaAbbreviation ...
type GetLingoEntityListRespEntityRelatedMetaAbbreviation struct {
	ID string `json:"id,omitempty"` // 相关词条 ID
}

// GetLingoEntityListRespEntityRelatedMetaChat ...
type GetLingoEntityListRespEntityRelatedMetaChat struct {
	ID    string `json:"id,omitempty"`    // 对应相关信息 ID
	Title string `json:"title,omitempty"` // 对应相关信息的描述, 如相关联系人的描述、相关链接的标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetLingoEntityListRespEntityRelatedMetaClassification ...
type GetLingoEntityListRespEntityRelatedMetaClassification struct {
	ID       string `json:"id,omitempty"`        // 二级分类 ID
	FatherID string `json:"father_id,omitempty"` // 对应一级分类 ID
}

// GetLingoEntityListRespEntityRelatedMetaDoc ...
type GetLingoEntityListRespEntityRelatedMetaDoc struct {
	Title string `json:"title,omitempty"` // 对应相关信息的描述, 如相关联系人的描述、相关链接的标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetLingoEntityListRespEntityRelatedMetaImage ...
type GetLingoEntityListRespEntityRelatedMetaImage struct {
	Token string `json:"token,omitempty"` // 通过文件接口上传图片后, 获得的图片 token
}

// GetLingoEntityListRespEntityRelatedMetaLink ...
type GetLingoEntityListRespEntityRelatedMetaLink struct {
	Title string `json:"title,omitempty"` // 对应相关信息的描述, 如相关联系人的描述、相关链接的标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetLingoEntityListRespEntityRelatedMetaOncall ...
type GetLingoEntityListRespEntityRelatedMetaOncall struct {
	ID    string `json:"id,omitempty"`    // 对应相关信息 ID
	Title string `json:"title,omitempty"` // 对应相关信息的描述, 如相关联系人的描述、相关链接的标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetLingoEntityListRespEntityRelatedMetaUser ...
type GetLingoEntityListRespEntityRelatedMetaUser struct {
	ID    string `json:"id,omitempty"`    // 对应相关信息 ID
	Title string `json:"title,omitempty"` // 对应相关信息的描述, 如相关联系人的描述、相关链接的标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetLingoEntityListRespEntityStatistics ...
type GetLingoEntityListRespEntityStatistics struct {
	LikeCount    int64 `json:"like_count,omitempty"`    // 累计点赞
	DislikeCount int64 `json:"dislike_count,omitempty"` // 当前词条版本收到的负反馈数量
}

// getLingoEntityListResp ...
type getLingoEntityListResp struct {
	Code  int64                   `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                  `json:"msg,omitempty"`  // 错误描述
	Data  *GetLingoEntityListResp `json:"data,omitempty"`
	Error *ErrorDetail            `json:"error,omitempty"`
}
