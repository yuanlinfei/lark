// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateLingoEntity 通过此接口更新已有的词条, 无需经过词典管理员审核, 直接写入词库。因此, 调用该接口时应当慎重操作。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/entity/update
func (r *LingoService) UpdateLingoEntity(ctx context.Context, request *UpdateLingoEntityReq, options ...MethodOptionFunc) (*UpdateLingoEntityResp, *Response, error) {
	if r.cli.mock.mockLingoUpdateLingoEntity != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Lingo#UpdateLingoEntity mock enable")
		return r.cli.mock.mockLingoUpdateLingoEntity(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Lingo",
		API:                   "UpdateLingoEntity",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/lingo/v1/entities/:entity_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateLingoEntityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockLingoUpdateLingoEntity mock LingoUpdateLingoEntity method
func (r *Mock) MockLingoUpdateLingoEntity(f func(ctx context.Context, request *UpdateLingoEntityReq, options ...MethodOptionFunc) (*UpdateLingoEntityResp, *Response, error)) {
	r.mockLingoUpdateLingoEntity = f
}

// UnMockLingoUpdateLingoEntity un-mock LingoUpdateLingoEntity method
func (r *Mock) UnMockLingoUpdateLingoEntity() {
	r.mockLingoUpdateLingoEntity = nil
}

// UpdateLingoEntityReq ...
type UpdateLingoEntityReq struct {
	EntityID    string                           `path:"entity_id" json:"-"`     // 词条 ID, 示例值: "enterprise_40217521"
	UserIDType  *IDType                          `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	MainKeys    []*UpdateLingoEntityReqMainKey   `json:"main_keys,omitempty"`    // 词条名, 最大长度: `1`
	Aliases     []*UpdateLingoEntityReqAliase    `json:"aliases,omitempty"`      // 别名, 最大长度: `10`
	Description *string                          `json:"description,omitempty"`  // 详情描述, 示例值: "词典是飞书提供的一款知识管理工具, 通过飞书词典可以帮助企业将分散的知识信息进行聚合, 并通过UGC的方式, 促进企业知识的保鲜和流通", 最大长度: `5000` 字符
	RelatedMeta *UpdateLingoEntityReqRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	OuterInfo   *UpdateLingoEntityReqOuterInfo   `json:"outer_info,omitempty"`   // 外部 id 关联数据
	RichText    *string                          `json:"rich_text,omitempty"`    // 富文本格式（当填写富文本内容时, description字段将会失效可不填写）, 支持的格式参考[飞书词典指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/overview)中的释义部分, 示例值: "<b>加粗</b><i>斜体</i><p><a href=\"https://feishu.cn\">链接</a></p><p><span>词典是飞书提供的一款知识管理工具, 通过飞书词典可以帮助企业将分散的知识信息进行聚合, 并通过UGC的方式, 促进企业知识的保鲜和流通</span></p>", 最大长度: `5000` 字符
	I18nDescs   []*UpdateLingoEntityReqI18nDesc  `json:"i18n_descs,omitempty"`   // 国际化的词条释义, 最大长度: `3`
}

// UpdateLingoEntityReqAliase ...
type UpdateLingoEntityReqAliase struct {
	Key           string                                   `json:"key,omitempty"`            // 名称, 示例值: "飞书词典"
	DisplayStatus *UpdateLingoEntityReqAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// UpdateLingoEntityReqAliaseDisplayStatus ...
type UpdateLingoEntityReqAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许在 IM 和 Doc 等场景进行高亮提示, 示例值: true
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许在飞书中被搜索到, 示例值: true
}

// UpdateLingoEntityReqI18nDesc ...
type UpdateLingoEntityReqI18nDesc struct {
	Language    int64   `json:"language,omitempty"`    // 语言类型, 示例值: 1, 可选值有: 1: 中文, 2: 英文, 3: 日文
	Description *string `json:"description,omitempty"` // 纯文本释义, 示例值: "词典是飞书提供的一款知识管理工具, 通过飞书词典可以帮助企业将分散的知识信息进行聚合, 并通过UGC的方式, 促进企业知识的保鲜和流通", 长度范围: `1` ～ `5000` 字符
	RichText    *string `json:"rich_text,omitempty"`   // 富文本描述, 示例值: "<p>词典是飞书提供的一款知识管理工具, 通过飞书词典可以帮助企业将分散的知识信息进行聚合, 并通过UGC的方式, 促进企业知识的保鲜和流通</p>", 长度范围: `1` ～ `5000` 字符
}

// UpdateLingoEntityReqMainKey ...
type UpdateLingoEntityReqMainKey struct {
	Key           string                                    `json:"key,omitempty"`            // 名称, 示例值: "企业百科"
	DisplayStatus *UpdateLingoEntityReqMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// UpdateLingoEntityReqMainKeyDisplayStatus ...
type UpdateLingoEntityReqMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许在 IM 和 Doc 等场景进行高亮提示, 示例值: true
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许在飞书中被搜索到, 示例值: true
}

// UpdateLingoEntityReqOuterInfo ...
type UpdateLingoEntityReqOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 数据提供方（不能包含中横线 "-"）, 示例值: "星云", 长度范围: `2` ～ `32` 字符
	OuterID  string `json:"outer_id,omitempty"` // 唯一标识, 可用来和其他平台的内容进行绑定。需保证和百科词条唯一对应（不能包含中横线 "-"）, 示例值: "12345abc", 长度范围: `1` ～ `64` 字符
}

// UpdateLingoEntityReqRelatedMeta ...
type UpdateLingoEntityReqRelatedMeta struct {
	Users           []*UpdateLingoEntityReqRelatedMetaUser           `json:"users,omitempty"`           // 关联用户信息
	Chats           []*UpdateLingoEntityReqRelatedMetaChat           `json:"chats,omitempty"`           // 相关服务中的相关公开群
	Docs            []*UpdateLingoEntityReqRelatedMetaDoc            `json:"docs,omitempty"`            // 关联文档信息
	Oncalls         []*UpdateLingoEntityReqRelatedMetaOncall         `json:"oncalls,omitempty"`         // 相关服务中的相关值班号
	Links           []*UpdateLingoEntityReqRelatedMetaLink           `json:"links,omitempty"`           // 相关链接
	Abbreviations   []*UpdateLingoEntityReqRelatedMetaAbbreviation   `json:"abbreviations,omitempty"`   // 相关词条信息
	Classifications []*UpdateLingoEntityReqRelatedMetaClassification `json:"classifications,omitempty"` // 当前词条所属分类, 词条只能属于二级分类, 且每个一级分类下只能选择一个二级分类。
	Images          []*UpdateLingoEntityReqRelatedMetaImage          `json:"images,omitempty"`          // 上传的相关图片, 最大长度: `10`
}

// UpdateLingoEntityReqRelatedMetaAbbreviation ...
type UpdateLingoEntityReqRelatedMetaAbbreviation struct {
	ID *string `json:"id,omitempty"` // 相关其他词条 id, 示例值: "enterprise_51587960"
}

// UpdateLingoEntityReqRelatedMetaChat ...
type UpdateLingoEntityReqRelatedMetaChat struct {
	ID string `json:"id,omitempty"` // 对应相关信息 ID, 示例值: "格式请看请求体示例"
}

// UpdateLingoEntityReqRelatedMetaClassification ...
type UpdateLingoEntityReqRelatedMetaClassification struct {
	ID       string  `json:"id,omitempty"`        // 二级分类 ID, 示例值: "704960692637761"
	FatherID *string `json:"father_id,omitempty"` // 对应一级分类 ID, 示例值: "704960692637777"
}

// UpdateLingoEntityReqRelatedMetaDoc ...
type UpdateLingoEntityReqRelatedMetaDoc struct {
	Title *string `json:"title,omitempty"` // 标题, 示例值: "飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值: "https://www.feishu.cn/hc/zh-CN", 正则校验: `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:.;]+[-A-Za-z0-9+&@#/%=~_|]`
}

// UpdateLingoEntityReqRelatedMetaImage ...
type UpdateLingoEntityReqRelatedMetaImage struct {
	Token string `json:"token,omitempty"` // 通过文件接口上传后的图片 token, 示例值: "boxbcEcmKiDia3evgqWTpvdc7jc"
}

// UpdateLingoEntityReqRelatedMetaLink ...
type UpdateLingoEntityReqRelatedMetaLink struct {
	Title *string `json:"title,omitempty"` // 标题, 示例值: "飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值: "https://www.feishu.cn/hc/zh-CN", 正则校验: `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:.;]+[-A-Za-z0-9+&@#/%=~_|]`
}

// UpdateLingoEntityReqRelatedMetaOncall ...
type UpdateLingoEntityReqRelatedMetaOncall struct {
	ID string `json:"id,omitempty"` // 对应相关信息 ID, 示例值: "相关服务中的相关公开群"
}

// UpdateLingoEntityReqRelatedMetaUser ...
type UpdateLingoEntityReqRelatedMetaUser struct {
	ID    string  `json:"id,omitempty"`    // 对应相关信息 ID, 示例值: "格式请看请求体示例"
	Title *string `json:"title,omitempty"` // 标题, 示例值: "飞书官网"
}

// UpdateLingoEntityResp ...
type UpdateLingoEntityResp struct {
	Entity *UpdateLingoEntityRespEntity `json:"entity,omitempty"` // 词条信息
}

// UpdateLingoEntityRespEntity ...
type UpdateLingoEntityRespEntity struct {
	ID          string                                  `json:"id,omitempty"`           // 词条 ID （需要更新某个词条时填写, 若是创建新词条可不填写）
	MainKeys    []*UpdateLingoEntityRespEntityMainKey   `json:"main_keys,omitempty"`    // 词条名
	Aliases     []*UpdateLingoEntityRespEntityAliase    `json:"aliases,omitempty"`      // 别名
	Description string                                  `json:"description,omitempty"`  // 纯文本格式词条释义。注: description 和 rich_text 至少有一个, 否则会报错: 1540001
	Creator     string                                  `json:"creator,omitempty"`      // 创建者
	CreateTime  string                                  `json:"create_time,omitempty"`  // 词条创建时间
	Updater     string                                  `json:"updater,omitempty"`      // 最近一次更新者
	UpdateTime  string                                  `json:"update_time,omitempty"`  // 词条最近更新时间
	RelatedMeta *UpdateLingoEntityRespEntityRelatedMeta `json:"related_meta,omitempty"` // 更多相关信息
	Statistics  *UpdateLingoEntityRespEntityStatistics  `json:"statistics,omitempty"`   // 当前词条收到的反馈数据
	OuterInfo   *UpdateLingoEntityRespEntityOuterInfo   `json:"outer_info,omitempty"`   // 外部 id 关联数据
	RichText    string                                  `json:"rich_text,omitempty"`    // 富文本格式（当填写富文本内容时, description字段将会失效可不填写）, 支持的格式参考[飞书词典指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/overview)中的释义部分
	Source      int64                                   `json:"source,omitempty"`       // 词条的创建来源, 1: 用户主动创建, 2: 批量导入, 3: 官方词, 4: OpenAPI 创建
	I18nDescs   []*UpdateLingoEntityRespEntityI18nDesc  `json:"i18n_descs,omitempty"`   // 国际化的词条释义
}

// UpdateLingoEntityRespEntityAliase ...
type UpdateLingoEntityRespEntityAliase struct {
	Key           string                                          `json:"key,omitempty"`            // 名称
	DisplayStatus *UpdateLingoEntityRespEntityAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// UpdateLingoEntityRespEntityAliaseDisplayStatus ...
type UpdateLingoEntityRespEntityAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许在 IM 和 Doc 等场景进行高亮提示
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许在飞书中被搜索到
}

// UpdateLingoEntityRespEntityI18nDesc ...
type UpdateLingoEntityRespEntityI18nDesc struct {
	Language    int64  `json:"language,omitempty"`    // 语言类型, 可选值有: 1: 中文, 2: 英文, 3: 日文
	Description string `json:"description,omitempty"` // 纯文本释义
	RichText    string `json:"rich_text,omitempty"`   // 富文本描述
}

// UpdateLingoEntityRespEntityMainKey ...
type UpdateLingoEntityRespEntityMainKey struct {
	Key           string                                           `json:"key,omitempty"`            // 名称
	DisplayStatus *UpdateLingoEntityRespEntityMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// UpdateLingoEntityRespEntityMainKeyDisplayStatus ...
type UpdateLingoEntityRespEntityMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许在 IM 和 Doc 等场景进行高亮提示
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许在飞书中被搜索到
}

// UpdateLingoEntityRespEntityOuterInfo ...
type UpdateLingoEntityRespEntityOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 外部系统（不能包含中横线 "-"）
	OuterID  string `json:"outer_id,omitempty"` // 唯一标识, 可用来和其他平台的内容进行绑定。需保证和词典词条唯一对应（不能包含中横线 "-"）
}

// UpdateLingoEntityRespEntityRelatedMeta ...
type UpdateLingoEntityRespEntityRelatedMeta struct {
	Users           []*UpdateLingoEntityRespEntityRelatedMetaUser           `json:"users,omitempty"`           // 相关联系人
	Chats           []*UpdateLingoEntityRespEntityRelatedMetaChat           `json:"chats,omitempty"`           // 相关服务中的相关公开群
	Docs            []*UpdateLingoEntityRespEntityRelatedMetaDoc            `json:"docs,omitempty"`            // 相关云文档
	Oncalls         []*UpdateLingoEntityRespEntityRelatedMetaOncall         `json:"oncalls,omitempty"`         // 相关服务中的相关值班号
	Links           []*UpdateLingoEntityRespEntityRelatedMetaLink           `json:"links,omitempty"`           // 关联链接信息
	Abbreviations   []*UpdateLingoEntityRespEntityRelatedMetaAbbreviation   `json:"abbreviations,omitempty"`   // 相关词条信息
	Classifications []*UpdateLingoEntityRespEntityRelatedMetaClassification `json:"classifications,omitempty"` // 当前词条所属分类, 词条只能属于二级分类, 且每个一级分类下只能选择一个二级分类。
	Images          []*UpdateLingoEntityRespEntityRelatedMetaImage          `json:"images,omitempty"`          // 上传的相关图片
}

// UpdateLingoEntityRespEntityRelatedMetaAbbreviation ...
type UpdateLingoEntityRespEntityRelatedMetaAbbreviation struct {
	ID string `json:"id,omitempty"` // 相关词条 ID
}

// UpdateLingoEntityRespEntityRelatedMetaChat ...
type UpdateLingoEntityRespEntityRelatedMetaChat struct {
	ID    string `json:"id,omitempty"`    // 对应相关信息 ID
	Title string `json:"title,omitempty"` // 对应相关信息的描述, 如相关联系人的描述、相关链接的标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// UpdateLingoEntityRespEntityRelatedMetaClassification ...
type UpdateLingoEntityRespEntityRelatedMetaClassification struct {
	ID       string `json:"id,omitempty"`        // 二级分类 ID
	FatherID string `json:"father_id,omitempty"` // 对应一级分类 ID
}

// UpdateLingoEntityRespEntityRelatedMetaDoc ...
type UpdateLingoEntityRespEntityRelatedMetaDoc struct {
	Title string `json:"title,omitempty"` // 标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// UpdateLingoEntityRespEntityRelatedMetaImage ...
type UpdateLingoEntityRespEntityRelatedMetaImage struct {
	Token string `json:"token,omitempty"` // 通过文件接口上传后的图片 token
}

// UpdateLingoEntityRespEntityRelatedMetaLink ...
type UpdateLingoEntityRespEntityRelatedMetaLink struct {
	Title string `json:"title,omitempty"` // 标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// UpdateLingoEntityRespEntityRelatedMetaOncall ...
type UpdateLingoEntityRespEntityRelatedMetaOncall struct {
	ID    string `json:"id,omitempty"`    // 对应相关信息 ID
	Title string `json:"title,omitempty"` // 标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// UpdateLingoEntityRespEntityRelatedMetaUser ...
type UpdateLingoEntityRespEntityRelatedMetaUser struct {
	ID    string `json:"id,omitempty"`    // 对应相关信息 ID
	Title string `json:"title,omitempty"` // 对应相关信息的描述, 如相关联系人的描述、相关链接的标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// UpdateLingoEntityRespEntityStatistics ...
type UpdateLingoEntityRespEntityStatistics struct {
	LikeCount    int64 `json:"like_count,omitempty"`    // 点赞数量
	DislikeCount int64 `json:"dislike_count,omitempty"` // 当前词条版本收到的负反馈数量
}

// updateLingoEntityResp ...
type updateLingoEntityResp struct {
	Code  int64                  `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                 `json:"msg,omitempty"`  // 错误描述
	Data  *UpdateLingoEntityResp `json:"data,omitempty"`
	Error *ErrorDetail           `json:"error,omitempty"`
}
