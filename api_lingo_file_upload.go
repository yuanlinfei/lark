// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
	"io"
)

// UploadLingoFile 词条图片资源上传。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/file/upload
func (r *LingoService) UploadLingoFile(ctx context.Context, request *UploadLingoFileReq, options ...MethodOptionFunc) (*UploadLingoFileResp, *Response, error) {
	if r.cli.mock.mockLingoUploadLingoFile != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Lingo#UploadLingoFile mock enable")
		return r.cli.mock.mockLingoUploadLingoFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Lingo",
		API:                   "UploadLingoFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/lingo/v1/files/upload",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
		IsFile:                true,
	}
	resp := new(uploadLingoFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockLingoUploadLingoFile mock LingoUploadLingoFile method
func (r *Mock) MockLingoUploadLingoFile(f func(ctx context.Context, request *UploadLingoFileReq, options ...MethodOptionFunc) (*UploadLingoFileResp, *Response, error)) {
	r.mockLingoUploadLingoFile = f
}

// UnMockLingoUploadLingoFile un-mock LingoUploadLingoFile method
func (r *Mock) UnMockLingoUploadLingoFile() {
	r.mockLingoUploadLingoFile = nil
}

// UploadLingoFileReq ...
type UploadLingoFileReq struct {
	Name string    `json:"name,omitempty"` // 文件名称, 当前仅支持上传图片且图片格式为以下六种: icon、bmp、gif、png、jpeg、webp, 示例值: "示例图片.png", 长度范围: `1` ～ `100` 字符
	File io.Reader `json:"file,omitempty"` // 二进制文件内容, 高宽像素在 320-4096 像素之间, 大小在 3KB-10MB 的图片, 示例值: file binary
}

// UploadLingoFileResp ...
type UploadLingoFileResp struct {
	FileToken string `json:"file_token,omitempty"` // 文件 token
}

// uploadLingoFileResp ...
type uploadLingoFileResp struct {
	Code  int64                `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string               `json:"msg,omitempty"`  // 错误描述
	Data  *UploadLingoFileResp `json:"data,omitempty"`
	Error *ErrorDetail         `json:"error,omitempty"`
}
