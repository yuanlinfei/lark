// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetMessageSpecialFocusList 获取用户的特别关注列表。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/special_focus/list
//
// Deprecated
func (r *MessageService) GetMessageSpecialFocusList(ctx context.Context, request *GetMessageSpecialFocusListReq, options ...MethodOptionFunc) (*GetMessageSpecialFocusListResp, *Response, error) {
	if r.cli.mock.mockMessageGetMessageSpecialFocusList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Message#GetMessageSpecialFocusList mock enable")
		return r.cli.mock.mockMessageGetMessageSpecialFocusList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Message",
		API:                 "GetMessageSpecialFocusList",
		Method:              "GET",
		URL:                 r.cli.openBaseURL + "/open-apis/im/v1/special_focus",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getMessageSpecialFocusListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageGetMessageSpecialFocusList mock MessageGetMessageSpecialFocusList method
func (r *Mock) MockMessageGetMessageSpecialFocusList(f func(ctx context.Context, request *GetMessageSpecialFocusListReq, options ...MethodOptionFunc) (*GetMessageSpecialFocusListResp, *Response, error)) {
	r.mockMessageGetMessageSpecialFocusList = f
}

// UnMockMessageGetMessageSpecialFocusList un-mock MessageGetMessageSpecialFocusList method
func (r *Mock) UnMockMessageGetMessageSpecialFocusList() {
	r.mockMessageGetMessageSpecialFocusList = nil
}

// GetMessageSpecialFocusListReq ...
type GetMessageSpecialFocusListReq struct {
	MemberIDType *IDType `query:"member_id_type" json:"-"` // 指定接口返回的成员ID类型, 示例值: open_id, 可选值有: user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), 默认值: `open_id`
	PageSize     *int64  `query:"page_size" json:"-"`      // 分页大小, 示例值: 10, 默认值: `100`, 取值范围: `1` ～ `100`
	PageToken    *string `query:"page_token" json:"-"`     // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=
}

// GetMessageSpecialFocusListResp ...
type GetMessageSpecialFocusListResp struct {
	Items     []*GetMessageSpecialFocusListRespItem `json:"items,omitempty"`      // 特别关注成员ID列表
	PageToken string                                `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                                  `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetMessageSpecialFocusListRespItem ...
type GetMessageSpecialFocusListRespItem struct {
	ID     string `json:"id,omitempty"`      // 成员ID
	IDType IDType `json:"id_type,omitempty"` // 成员ID类型。根据member_id_type参数返回`open_id`、`user_id`或`union_id`类型的用户ID；机器人返回`app_id`, 可选值有: user_id: 以user_id来识别用户；需要有获取用户 userID的权限 ([什么是 User ID？](https://open.feishu.cn/document/home/user-identity-introduction/user-id)), union_id: 以union_id来识别用户([什么是 Union ID？](https://open.feishu.cn/document/home/user-identity-introduction/union-id)), open_id: 以open_id来识别用户([什么是 Open ID？](https://open.feishu.cn/document/home/user-identity-introduction/open-id)), app_id: 以app_id来识别成员([什么是App ID？](https://open.feishu.cn/document/ukTMukTMukTM/uYTM5UjL2ETO14iNxkTN/terminology#b047be0c))
}

// getMessageSpecialFocusListResp ...
type getMessageSpecialFocusListResp struct {
	Code  int64                           `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                          `json:"msg,omitempty"`  // 错误描述
	Data  *GetMessageSpecialFocusListResp `json:"data,omitempty"`
	Error *ErrorDetail                    `json:"error,omitempty"`
}
