// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetMinutesStatistics 通过这个接口, 可以获得妙记的访问情况统计, 包含PV、UV、访问过的 user id、访问过的 user timestamp。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/minutes-v1/minute-statistics/get
// new doc: https://open.feishu.cn/document/server-docs/minutes-v1/minute-statistics/get
func (r *MinutesService) GetMinutesStatistics(ctx context.Context, request *GetMinutesStatisticsReq, options ...MethodOptionFunc) (*GetMinutesStatisticsResp, *Response, error) {
	if r.cli.mock.mockMinutesGetMinutesStatistics != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Minutes#GetMinutesStatistics mock enable")
		return r.cli.mock.mockMinutesGetMinutesStatistics(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Minutes",
		API:                   "GetMinutesStatistics",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/minutes/v1/minutes/:minute_token/statistics",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getMinutesStatisticsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMinutesGetMinutesStatistics mock MinutesGetMinutesStatistics method
func (r *Mock) MockMinutesGetMinutesStatistics(f func(ctx context.Context, request *GetMinutesStatisticsReq, options ...MethodOptionFunc) (*GetMinutesStatisticsResp, *Response, error)) {
	r.mockMinutesGetMinutesStatistics = f
}

// UnMockMinutesGetMinutesStatistics un-mock MinutesGetMinutesStatistics method
func (r *Mock) UnMockMinutesGetMinutesStatistics() {
	r.mockMinutesGetMinutesStatistics = nil
}

// GetMinutesStatisticsReq ...
type GetMinutesStatisticsReq struct {
	MinuteToken string  `path:"minute_token" json:"-"`  // 妙记唯一标识。可从妙记链接中获取, 一般为链接中最后一串字符, 示例值: "obcnq3b9jl72l83w4f14xxxx", 长度范围: `24` ～ `24` 字符
	UserIDType  *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// GetMinutesStatisticsResp ...
type GetMinutesStatisticsResp struct {
	Statistics *GetMinutesStatisticsRespStatistics `json:"statistics,omitempty"` // 妙记浏览信息统计
}

// GetMinutesStatisticsRespStatistics ...
type GetMinutesStatisticsRespStatistics struct {
	UserViewCount string                                        `json:"user_view_count,omitempty"` // 用户浏览数
	PageViewCount string                                        `json:"page_view_count,omitempty"` // 页面浏览数量
	UserViewList  []*GetMinutesStatisticsRespStatisticsUserView `json:"user_view_list,omitempty"`  // 用户浏览列表
}

// GetMinutesStatisticsRespStatisticsUserView ...
type GetMinutesStatisticsRespStatisticsUserView struct {
	UserID   string `json:"user_id,omitempty"`   // 用户ID
	ViewTime string `json:"view_time,omitempty"` // 用户的最近查看时间timestamp（ms级别）
}

// getMinutesStatisticsResp ...
type getMinutesStatisticsResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *GetMinutesStatisticsResp `json:"data,omitempty"`
}
