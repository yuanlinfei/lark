// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// DeleteOKRProgressRecord 根据 ID 删除 OKR 进展记录。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/progress_record/delete
// new doc: https://open.feishu.cn/document/server-docs/okr-v1/progress_record/delete
func (r *OKRService) DeleteOKRProgressRecord(ctx context.Context, request *DeleteOKRProgressRecordReq, options ...MethodOptionFunc) (*DeleteOKRProgressRecordResp, *Response, error) {
	if r.cli.mock.mockOKRDeleteOKRProgressRecord != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] OKR#DeleteOKRProgressRecord mock enable")
		return r.cli.mock.mockOKRDeleteOKRProgressRecord(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "OKR",
		API:                   "DeleteOKRProgressRecord",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/okr/v1/progress_records/:progress_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteOKRProgressRecordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockOKRDeleteOKRProgressRecord mock OKRDeleteOKRProgressRecord method
func (r *Mock) MockOKRDeleteOKRProgressRecord(f func(ctx context.Context, request *DeleteOKRProgressRecordReq, options ...MethodOptionFunc) (*DeleteOKRProgressRecordResp, *Response, error)) {
	r.mockOKRDeleteOKRProgressRecord = f
}

// UnMockOKRDeleteOKRProgressRecord un-mock OKRDeleteOKRProgressRecord method
func (r *Mock) UnMockOKRDeleteOKRProgressRecord() {
	r.mockOKRDeleteOKRProgressRecord = nil
}

// DeleteOKRProgressRecordReq ...
type DeleteOKRProgressRecordReq struct {
	ProgressID string `path:"progress_id" json:"-"` // 待删除的 OKR进展记录 ID, 示例值: "7041857032248410131"
}

// DeleteOKRProgressRecordResp ...
type DeleteOKRProgressRecordResp struct {
}

// deleteOKRProgressRecordResp ...
type deleteOKRProgressRecordResp struct {
	Code  int64                        `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                       `json:"msg,omitempty"`  // 错误描述
	Data  *DeleteOKRProgressRecordResp `json:"data,omitempty"`
	Error *ErrorDetail                 `json:"error,omitempty"`
}
