// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateOKRProgressRecord 根据 OKR 进展记录 ID 更新进展详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/progress_record/update
// new doc: https://open.feishu.cn/document/server-docs/okr-v1/progress_record/update
func (r *OKRService) UpdateOKRProgressRecord(ctx context.Context, request *UpdateOKRProgressRecordReq, options ...MethodOptionFunc) (*UpdateOKRProgressRecordResp, *Response, error) {
	if r.cli.mock.mockOKRUpdateOKRProgressRecord != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] OKR#UpdateOKRProgressRecord mock enable")
		return r.cli.mock.mockOKRUpdateOKRProgressRecord(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "OKR",
		API:                   "UpdateOKRProgressRecord",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/okr/v1/progress_records/:progress_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateOKRProgressRecordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockOKRUpdateOKRProgressRecord mock OKRUpdateOKRProgressRecord method
func (r *Mock) MockOKRUpdateOKRProgressRecord(f func(ctx context.Context, request *UpdateOKRProgressRecordReq, options ...MethodOptionFunc) (*UpdateOKRProgressRecordResp, *Response, error)) {
	r.mockOKRUpdateOKRProgressRecord = f
}

// UnMockOKRUpdateOKRProgressRecord un-mock OKRUpdateOKRProgressRecord method
func (r *Mock) UnMockOKRUpdateOKRProgressRecord() {
	r.mockOKRUpdateOKRProgressRecord = nil
}

// UpdateOKRProgressRecordReq ...
type UpdateOKRProgressRecordReq struct {
	ProgressID string                             `path:"progress_id" json:"-"`   // 待更新的 OKR进展记录 ID, 示例值: "7041857032248410131"
	UserIDType *IDType                            `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Content    *UpdateOKRProgressRecordReqContent `json:"content,omitempty"`      // 进展详情 富文本格式
}

// UpdateOKRProgressRecordReqContent ...
type UpdateOKRProgressRecordReqContent struct {
	Blocks []*UpdateOKRProgressRecordReqContentBlock `json:"blocks,omitempty"` // 文档结构是按行排列的, 每行内容是一个 Block
}

// UpdateOKRProgressRecordReqContentBlock ...
type UpdateOKRProgressRecordReqContentBlock struct {
	Type      *string                                          `json:"type,omitempty"`      // 文档元素类型, 示例值: "paragraph", 可选值有: paragraph: 文本段落, gallery: 图片
	Paragraph *UpdateOKRProgressRecordReqContentBlockParagraph `json:"paragraph,omitempty"` // 文本段落
	Gallery   *UpdateOKRProgressRecordReqContentBlockGallery   `json:"gallery,omitempty"`   // 图片
}

// UpdateOKRProgressRecordReqContentBlockGallery ...
type UpdateOKRProgressRecordReqContentBlockGallery struct {
	ImageList []*UpdateOKRProgressRecordReqContentBlockGalleryImageList `json:"imageList,omitempty"` // 图片元素
}

// UpdateOKRProgressRecordReqContentBlockGalleryImageList ...
type UpdateOKRProgressRecordReqContentBlockGalleryImageList struct {
	FileToken *string  `json:"fileToken,omitempty"` // 图片 token, 通过上传图片接口获取, 示例值: "boxcnOj88GDkmWGm2zsTyCBqoLb"
	Src       *string  `json:"src,omitempty"`       // 图片链接, 示例值: "https://example/drive/home/"
	Width     *float64 `json:"width,omitempty"`     // 图片宽, 单位px, 示例值: 458
	Height    *float64 `json:"height,omitempty"`    // 图片高, 单位px, 示例值: 372
}

// UpdateOKRProgressRecordReqContentBlockParagraph ...
type UpdateOKRProgressRecordReqContentBlockParagraph struct {
	Style    *UpdateOKRProgressRecordReqContentBlockParagraphStyle     `json:"style,omitempty"`    // 段落样式
	Elements []*UpdateOKRProgressRecordReqContentBlockParagraphElement `json:"elements,omitempty"` // 段落元素组成一个段落
}

// UpdateOKRProgressRecordReqContentBlockParagraphElement ...
type UpdateOKRProgressRecordReqContentBlockParagraphElement struct {
	Type     *string                                                         `json:"type,omitempty"`     // 元素类型, 示例值: "textRun", 可选值有: textRun: 文本型元素, docsLink: 文档链接型元素, person: 艾特用户型元素
	TextRun  *UpdateOKRProgressRecordReqContentBlockParagraphElementTextRun  `json:"textRun,omitempty"`  // 文本
	DocsLink *UpdateOKRProgressRecordReqContentBlockParagraphElementDocsLink `json:"docsLink,omitempty"` // 飞书云文档
	Person   *UpdateOKRProgressRecordReqContentBlockParagraphElementPerson   `json:"person,omitempty"`   // 艾特用户
}

// UpdateOKRProgressRecordReqContentBlockParagraphElementDocsLink ...
type UpdateOKRProgressRecordReqContentBlockParagraphElementDocsLink struct {
	URL   *string `json:"url,omitempty"`   // 飞书云文档链接地址, 示例值: "https://xxx.feishu.cn/docx/xxxxxxxx"
	Title *string `json:"title,omitempty"` // 飞书云文档标题, 示例值: "项目说明文档"
}

// UpdateOKRProgressRecordReqContentBlockParagraphElementPerson ...
type UpdateOKRProgressRecordReqContentBlockParagraphElementPerson struct {
	OpenID *string `json:"openId,omitempty"` // 员工的OpenID, 示例值: "ou_3bbe8a09c20e89cce9bff989ed840674"
}

// UpdateOKRProgressRecordReqContentBlockParagraphElementTextRun ...
type UpdateOKRProgressRecordReqContentBlockParagraphElementTextRun struct {
	Text  *string                                                             `json:"text,omitempty"`  // 具体的文本内容, 示例值: "周报内容"
	Style *UpdateOKRProgressRecordReqContentBlockParagraphElementTextRunStyle `json:"style,omitempty"` // 文本内容的样式, 支持 BIUS、颜色等
}

// UpdateOKRProgressRecordReqContentBlockParagraphElementTextRunStyle ...
type UpdateOKRProgressRecordReqContentBlockParagraphElementTextRunStyle struct {
	Bold          *bool                                                                        `json:"bold,omitempty"`          // 是否加粗, 示例值: true
	StrikeThrough *bool                                                                        `json:"strikeThrough,omitempty"` // 是否删除, 示例值: true
	BackColor     *UpdateOKRProgressRecordReqContentBlockParagraphElementTextRunStyleBackColor `json:"backColor,omitempty"`     // 背景颜色
	TextColor     *UpdateOKRProgressRecordReqContentBlockParagraphElementTextRunStyleTextColor `json:"textColor,omitempty"`     // 字体颜色
	Link          *UpdateOKRProgressRecordReqContentBlockParagraphElementTextRunStyleLink      `json:"link,omitempty"`          // 链接地址
}

// UpdateOKRProgressRecordReqContentBlockParagraphElementTextRunStyleBackColor ...
type UpdateOKRProgressRecordReqContentBlockParagraphElementTextRunStyleBackColor struct {
	Red   *int64   `json:"red,omitempty"`   // 红 取值范围[0, 255], 示例值: 216
	Green *int64   `json:"green,omitempty"` // 绿 取值范围[0, 255], 示例值: 191
	Blue  *int64   `json:"blue,omitempty"`  // 蓝 取值范围[0, 255], 示例值: 188
	Alpha *float64 `json:"alpha,omitempty"` // 透明度 取值范围[0, 1], 示例值: 0.1
}

// UpdateOKRProgressRecordReqContentBlockParagraphElementTextRunStyleLink ...
type UpdateOKRProgressRecordReqContentBlockParagraphElementTextRunStyleLink struct {
	URL *string `json:"url,omitempty"` // 链接地址, 示例值: "https://www.xxxxx.com/"
}

// UpdateOKRProgressRecordReqContentBlockParagraphElementTextRunStyleTextColor ...
type UpdateOKRProgressRecordReqContentBlockParagraphElementTextRunStyleTextColor struct {
	Red   *int64   `json:"red,omitempty"`   // 红 取值范围[0, 255], 示例值: 216
	Green *int64   `json:"green,omitempty"` // 绿 取值范围[0, 255], 示例值: 191
	Blue  *int64   `json:"blue,omitempty"`  // 蓝 取值范围[0, 255], 示例值: 188
	Alpha *float64 `json:"alpha,omitempty"` // 透明度 取值范围[0, 1], 示例值: 0.1
}

// UpdateOKRProgressRecordReqContentBlockParagraphStyle ...
type UpdateOKRProgressRecordReqContentBlockParagraphStyle struct {
	List *UpdateOKRProgressRecordReqContentBlockParagraphStyleList `json:"list,omitempty"` // 有序列表/无序列表/任务列表
}

// UpdateOKRProgressRecordReqContentBlockParagraphStyleList ...
type UpdateOKRProgressRecordReqContentBlockParagraphStyleList struct {
	Type        *string `json:"type,omitempty"`        // 列表类型, 示例值: "number", 可选值有: number: 有序列表, bullet: 无序列表, checkBox: 任务列表, checkedBox: 已完成的任务列表, indent: tab缩进
	IndentLevel *int64  `json:"indentLevel,omitempty"` // 列表的缩进级别, 支持指定一行的缩进 除代码块以外的列表都支持设置缩进, 支持 1-16 级缩进, 取值范围: [1, 16], 示例值: 1
	Number      *int64  `json:"number,omitempty"`      // 用于指定列表的行号, 仅对有序列表和代码块生效 如果为有序列表设置了缩进, 行号可能会显示为字母或者罗马数字, 示例值: 1
}

// UpdateOKRProgressRecordResp ...
type UpdateOKRProgressRecordResp struct {
	ProgressID string                              `json:"progress_id,omitempty"` // OKR 进展ID
	ModifyTime string                              `json:"modify_time,omitempty"` // 进展更新时间 毫秒
	Content    *UpdateOKRProgressRecordRespContent `json:"content,omitempty"`     // 进展 对应的 Content 详细内容
}

// UpdateOKRProgressRecordRespContent ...
type UpdateOKRProgressRecordRespContent struct {
	Blocks []*UpdateOKRProgressRecordRespContentBlock `json:"blocks,omitempty"` // 文档结构是按行排列的, 每行内容是一个 Block
}

// UpdateOKRProgressRecordRespContentBlock ...
type UpdateOKRProgressRecordRespContentBlock struct {
	Type      string                                            `json:"type,omitempty"`      // 文档元素类型, 可选值有: paragraph: 文本段落, gallery: 图片
	Paragraph *UpdateOKRProgressRecordRespContentBlockParagraph `json:"paragraph,omitempty"` // 文本段落
	Gallery   *UpdateOKRProgressRecordRespContentBlockGallery   `json:"gallery,omitempty"`   // 图片
}

// UpdateOKRProgressRecordRespContentBlockGallery ...
type UpdateOKRProgressRecordRespContentBlockGallery struct {
	ImageList []*UpdateOKRProgressRecordRespContentBlockGalleryImageList `json:"imageList,omitempty"` // 图片元素
}

// UpdateOKRProgressRecordRespContentBlockGalleryImageList ...
type UpdateOKRProgressRecordRespContentBlockGalleryImageList struct {
	FileToken string  `json:"fileToken,omitempty"` // 图片 token, 通过上传图片接口获取
	Src       string  `json:"src,omitempty"`       // 图片链接
	Width     float64 `json:"width,omitempty"`     // 图片宽, 单位px
	Height    float64 `json:"height,omitempty"`    // 图片高, 单位px
}

// UpdateOKRProgressRecordRespContentBlockParagraph ...
type UpdateOKRProgressRecordRespContentBlockParagraph struct {
	Style    *UpdateOKRProgressRecordRespContentBlockParagraphStyle     `json:"style,omitempty"`    // 段落样式
	Elements []*UpdateOKRProgressRecordRespContentBlockParagraphElement `json:"elements,omitempty"` // 段落元素组成一个段落
}

// UpdateOKRProgressRecordRespContentBlockParagraphElement ...
type UpdateOKRProgressRecordRespContentBlockParagraphElement struct {
	Type     string                                                           `json:"type,omitempty"`     // 元素类型, 可选值有: textRun: 文本型元素, docsLink: 文档链接型元素, person: 艾特用户型元素
	TextRun  *UpdateOKRProgressRecordRespContentBlockParagraphElementTextRun  `json:"textRun,omitempty"`  // 文本
	DocsLink *UpdateOKRProgressRecordRespContentBlockParagraphElementDocsLink `json:"docsLink,omitempty"` // 飞书云文档
	Person   *UpdateOKRProgressRecordRespContentBlockParagraphElementPerson   `json:"person,omitempty"`   // 艾特用户
}

// UpdateOKRProgressRecordRespContentBlockParagraphElementDocsLink ...
type UpdateOKRProgressRecordRespContentBlockParagraphElementDocsLink struct {
	URL   string `json:"url,omitempty"`   // 飞书云文档链接地址
	Title string `json:"title,omitempty"` // 飞书云文档标题
}

// UpdateOKRProgressRecordRespContentBlockParagraphElementPerson ...
type UpdateOKRProgressRecordRespContentBlockParagraphElementPerson struct {
	OpenID string `json:"openId,omitempty"` // 员工的OpenID
}

// UpdateOKRProgressRecordRespContentBlockParagraphElementTextRun ...
type UpdateOKRProgressRecordRespContentBlockParagraphElementTextRun struct {
	Text  string                                                               `json:"text,omitempty"`  // 具体的文本内容
	Style *UpdateOKRProgressRecordRespContentBlockParagraphElementTextRunStyle `json:"style,omitempty"` // 文本内容的样式, 支持 BIUS、颜色等
}

// UpdateOKRProgressRecordRespContentBlockParagraphElementTextRunStyle ...
type UpdateOKRProgressRecordRespContentBlockParagraphElementTextRunStyle struct {
	Bold          bool                                                                          `json:"bold,omitempty"`          // 是否加粗
	StrikeThrough bool                                                                          `json:"strikeThrough,omitempty"` // 是否删除
	BackColor     *UpdateOKRProgressRecordRespContentBlockParagraphElementTextRunStyleBackColor `json:"backColor,omitempty"`     // 背景颜色
	TextColor     *UpdateOKRProgressRecordRespContentBlockParagraphElementTextRunStyleTextColor `json:"textColor,omitempty"`     // 字体颜色
	Link          *UpdateOKRProgressRecordRespContentBlockParagraphElementTextRunStyleLink      `json:"link,omitempty"`          // 链接地址
}

// UpdateOKRProgressRecordRespContentBlockParagraphElementTextRunStyleBackColor ...
type UpdateOKRProgressRecordRespContentBlockParagraphElementTextRunStyleBackColor struct {
	Red   int64   `json:"red,omitempty"`   // 红 取值范围[0, 255]
	Green int64   `json:"green,omitempty"` // 绿 取值范围[0, 255]
	Blue  int64   `json:"blue,omitempty"`  // 蓝 取值范围[0, 255]
	Alpha float64 `json:"alpha,omitempty"` // 透明度 取值范围[0, 1]
}

// UpdateOKRProgressRecordRespContentBlockParagraphElementTextRunStyleLink ...
type UpdateOKRProgressRecordRespContentBlockParagraphElementTextRunStyleLink struct {
	URL string `json:"url,omitempty"` // 链接地址
}

// UpdateOKRProgressRecordRespContentBlockParagraphElementTextRunStyleTextColor ...
type UpdateOKRProgressRecordRespContentBlockParagraphElementTextRunStyleTextColor struct {
	Red   int64   `json:"red,omitempty"`   // 红 取值范围[0, 255]
	Green int64   `json:"green,omitempty"` // 绿 取值范围[0, 255]
	Blue  int64   `json:"blue,omitempty"`  // 蓝 取值范围[0, 255]
	Alpha float64 `json:"alpha,omitempty"` // 透明度 取值范围[0, 1]
}

// UpdateOKRProgressRecordRespContentBlockParagraphStyle ...
type UpdateOKRProgressRecordRespContentBlockParagraphStyle struct {
	List *UpdateOKRProgressRecordRespContentBlockParagraphStyleList `json:"list,omitempty"` // 有序列表/无序列表/任务列表
}

// UpdateOKRProgressRecordRespContentBlockParagraphStyleList ...
type UpdateOKRProgressRecordRespContentBlockParagraphStyleList struct {
	Type        string `json:"type,omitempty"`        // 列表类型, 可选值有: number: 有序列表, bullet: 无序列表, checkBox: 任务列表, checkedBox: 已完成的任务列表, indent: tab缩进
	IndentLevel int64  `json:"indentLevel,omitempty"` // 列表的缩进级别, 支持指定一行的缩进 除代码块以外的列表都支持设置缩进, 支持 1-16 级缩进, 取值范围: [1, 16]
	Number      int64  `json:"number,omitempty"`      // 用于指定列表的行号, 仅对有序列表和代码块生效 如果为有序列表设置了缩进, 行号可能会显示为字母或者罗马数字
}

// updateOKRProgressRecordResp ...
type updateOKRProgressRecordResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *UpdateOKRProgressRecordResp `json:"data,omitempty"`
}
