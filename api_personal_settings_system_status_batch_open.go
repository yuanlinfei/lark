// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// BatchOpenPersonalSettingsSystemStatus 批量开启用户系统状态可用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/batch_open
// new doc: https://open.feishu.cn/document/server-docs/personal_settings-v1/system_status/batch_open
func (r *PersonalSettingsService) BatchOpenPersonalSettingsSystemStatus(ctx context.Context, request *BatchOpenPersonalSettingsSystemStatusReq, options ...MethodOptionFunc) (*BatchOpenPersonalSettingsSystemStatusResp, *Response, error) {
	if r.cli.mock.mockPersonalSettingsBatchOpenPersonalSettingsSystemStatus != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] PersonalSettings#BatchOpenPersonalSettingsSystemStatus mock enable")
		return r.cli.mock.mockPersonalSettingsBatchOpenPersonalSettingsSystemStatus(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "PersonalSettings",
		API:                   "BatchOpenPersonalSettingsSystemStatus",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/personal_settings/v1/system_statuses/:system_status_id/batch_open",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchOpenPersonalSettingsSystemStatusResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockPersonalSettingsBatchOpenPersonalSettingsSystemStatus mock PersonalSettingsBatchOpenPersonalSettingsSystemStatus method
func (r *Mock) MockPersonalSettingsBatchOpenPersonalSettingsSystemStatus(f func(ctx context.Context, request *BatchOpenPersonalSettingsSystemStatusReq, options ...MethodOptionFunc) (*BatchOpenPersonalSettingsSystemStatusResp, *Response, error)) {
	r.mockPersonalSettingsBatchOpenPersonalSettingsSystemStatus = f
}

// UnMockPersonalSettingsBatchOpenPersonalSettingsSystemStatus un-mock PersonalSettingsBatchOpenPersonalSettingsSystemStatus method
func (r *Mock) UnMockPersonalSettingsBatchOpenPersonalSettingsSystemStatus() {
	r.mockPersonalSettingsBatchOpenPersonalSettingsSystemStatus = nil
}

// BatchOpenPersonalSettingsSystemStatusReq ...
type BatchOpenPersonalSettingsSystemStatusReq struct {
	SystemStatusID string                                          `path:"system_status_id" json:"-"` // 系统状态ID, [获取系统状态ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/list), 示例值: "7101214603622940672"
	UserIDType     *IDType                                         `query:"user_id_type" json:"-"`    // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserList       []*BatchOpenPersonalSettingsSystemStatusReqUser `json:"user_list,omitempty"`       // 开启列表, 长度范围: `1` ～ `50`
}

// BatchOpenPersonalSettingsSystemStatusReqUser ...
type BatchOpenPersonalSettingsSystemStatusReqUser struct {
	UserID  string `json:"user_id,omitempty"`  // 用户ID, 传入的ID类型由user_id_type决定, 推荐使用 OpenID, 获取方式可参考文档[如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), 示例值: "ou_53edd3282dbc2fdbe5c593cfa5ce82ab"
	EndTime string `json:"end_time,omitempty"` // 结束时间, 传入的应为秒单位的时间戳, 距当前的时间跨度不能超过365天, 示例值: "1665990378"
}

// BatchOpenPersonalSettingsSystemStatusResp ...
type BatchOpenPersonalSettingsSystemStatusResp struct {
	ResultList []*BatchOpenPersonalSettingsSystemStatusRespResult `json:"result_list,omitempty"` // 开启结果
}

// BatchOpenPersonalSettingsSystemStatusRespResult ...
type BatchOpenPersonalSettingsSystemStatusRespResult struct {
	UserID  string `json:"user_id,omitempty"`  // 用户ID
	EndTime string `json:"end_time,omitempty"` // 结束时间, 传入的应为秒单位的时间戳, 距当前的时间跨度不能超过365天。
	Result  string `json:"result,omitempty"`   // 开启结果, 可选值有: success_show: 成功且在客户端展示, success_user_close_syn: 成功但是用户设置了默认不开启, success_user_in_higher_priority_system_status: 成功但是用户存在更高优先级的系统状态, fail: 失败, invisible_user_id: 用户ID不可见, invalid_user_id: 用户ID无效, resign_user_id: 用户离职
}

// batchOpenPersonalSettingsSystemStatusResp ...
type batchOpenPersonalSettingsSystemStatusResp struct {
	Code  int64                                      `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                                     `json:"msg,omitempty"`  // 错误描述
	Data  *BatchOpenPersonalSettingsSystemStatusResp `json:"data,omitempty"`
	Error *ErrorDetail                               `json:"error,omitempty"`
}
