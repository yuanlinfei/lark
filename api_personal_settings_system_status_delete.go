// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// DeletePersonalSettingsSystemStatus 删除租户维度的系统状态。
//
// 注意事项:
// - 操作的数据为租户维度数据, 请小心操作。
// - 删除系统状态后, 并不影响正在使用该状态用户下系统状态的客户端展示。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/delete
// new doc: https://open.feishu.cn/document/server-docs/personal_settings-v1/system_status/delete
func (r *PersonalSettingsService) DeletePersonalSettingsSystemStatus(ctx context.Context, request *DeletePersonalSettingsSystemStatusReq, options ...MethodOptionFunc) (*DeletePersonalSettingsSystemStatusResp, *Response, error) {
	if r.cli.mock.mockPersonalSettingsDeletePersonalSettingsSystemStatus != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] PersonalSettings#DeletePersonalSettingsSystemStatus mock enable")
		return r.cli.mock.mockPersonalSettingsDeletePersonalSettingsSystemStatus(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "PersonalSettings",
		API:                   "DeletePersonalSettingsSystemStatus",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/personal_settings/v1/system_statuses/:system_status_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deletePersonalSettingsSystemStatusResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockPersonalSettingsDeletePersonalSettingsSystemStatus mock PersonalSettingsDeletePersonalSettingsSystemStatus method
func (r *Mock) MockPersonalSettingsDeletePersonalSettingsSystemStatus(f func(ctx context.Context, request *DeletePersonalSettingsSystemStatusReq, options ...MethodOptionFunc) (*DeletePersonalSettingsSystemStatusResp, *Response, error)) {
	r.mockPersonalSettingsDeletePersonalSettingsSystemStatus = f
}

// UnMockPersonalSettingsDeletePersonalSettingsSystemStatus un-mock PersonalSettingsDeletePersonalSettingsSystemStatus method
func (r *Mock) UnMockPersonalSettingsDeletePersonalSettingsSystemStatus() {
	r.mockPersonalSettingsDeletePersonalSettingsSystemStatus = nil
}

// DeletePersonalSettingsSystemStatusReq ...
type DeletePersonalSettingsSystemStatusReq struct {
	SystemStatusID string `path:"system_status_id" json:"-"` // 系统状态ID, [获取系统状态ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/list), 示例值: "7101214603622940633"
}

// DeletePersonalSettingsSystemStatusResp ...
type DeletePersonalSettingsSystemStatusResp struct {
}

// deletePersonalSettingsSystemStatusResp ...
type deletePersonalSettingsSystemStatusResp struct {
	Code  int64                                   `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                                  `json:"msg,omitempty"`  // 错误描述
	Data  *DeletePersonalSettingsSystemStatusResp `json:"data,omitempty"`
	Error *ErrorDetail                            `json:"error,omitempty"`
}
