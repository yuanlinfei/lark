// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// SearchApp 用户可以通过关键字搜索到可见应用, 应用可见性与套件内搜索一致。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/app/create
// new doc: https://open.feishu.cn/document/server-docs/search-v2/suite-search/create-2
func (r *SearchService) SearchApp(ctx context.Context, request *SearchAppReq, options ...MethodOptionFunc) (*SearchAppResp, *Response, error) {
	if r.cli.mock.mockSearchSearchApp != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Search#SearchApp mock enable")
		return r.cli.mock.mockSearchSearchApp(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Search",
		API:                 "SearchApp",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/search/v2/app",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(searchAppResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchSearchApp mock SearchSearchApp method
func (r *Mock) MockSearchSearchApp(f func(ctx context.Context, request *SearchAppReq, options ...MethodOptionFunc) (*SearchAppResp, *Response, error)) {
	r.mockSearchSearchApp = f
}

// UnMockSearchSearchApp un-mock SearchSearchApp method
func (r *Mock) UnMockSearchSearchApp() {
	r.mockSearchSearchApp = nil
}

// SearchAppReq ...
type SearchAppReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值: 20, 默认值: `20`, 取值范围: `1` ～ `100`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: 9e91187f9107ef4d43cd71c3722cd97665e6cec51bf30a06328839bc9867
	Query      string  `json:"query,omitempty"`        // 搜索关键词, 示例值: "测试应用"
}

// SearchAppResp ...
type SearchAppResp struct {
	Items     []string `json:"items,omitempty"`      // app_id列表
	PageToken string   `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool     `json:"has_more,omitempty"`   // 是否还有更多项
}

// searchAppResp ...
type searchAppResp struct {
	Code  int64          `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string         `json:"msg,omitempty"`  // 错误描述
	Data  *SearchAppResp `json:"data,omitempty"`
	Error *ErrorDetail   `json:"error,omitempty"`
}
