// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// StopVCMeetingRecording 在会议中停止录制。
//
// 会议正在录制中, 且操作者具有相应权限（如果操作者为用户, 必须是会中当前主持人）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/stop
// new doc: https://open.feishu.cn/document/server-docs/vc-v1/meeting-recording/stop
func (r *VCService) StopVCMeetingRecording(ctx context.Context, request *StopVCMeetingRecordingReq, options ...MethodOptionFunc) (*StopVCMeetingRecordingResp, *Response, error) {
	if r.cli.mock.mockVCStopVCMeetingRecording != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] VC#StopVCMeetingRecording mock enable")
		return r.cli.mock.mockVCStopVCMeetingRecording(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "StopVCMeetingRecording",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/recording/stop",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(stopVCMeetingRecordingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCStopVCMeetingRecording mock VCStopVCMeetingRecording method
func (r *Mock) MockVCStopVCMeetingRecording(f func(ctx context.Context, request *StopVCMeetingRecordingReq, options ...MethodOptionFunc) (*StopVCMeetingRecordingResp, *Response, error)) {
	r.mockVCStopVCMeetingRecording = f
}

// UnMockVCStopVCMeetingRecording un-mock VCStopVCMeetingRecording method
func (r *Mock) UnMockVCStopVCMeetingRecording() {
	r.mockVCStopVCMeetingRecording = nil
}

// StopVCMeetingRecordingReq ...
type StopVCMeetingRecordingReq struct {
	MeetingID string `path:"meeting_id" json:"-"` // 会议ID（视频会议的唯一标识, 视频会议开始后才会产生）, 示例值: "6911188411932033028"
}

// StopVCMeetingRecordingResp ...
type StopVCMeetingRecordingResp struct {
}

// stopVCMeetingRecordingResp ...
type stopVCMeetingRecordingResp struct {
	Code  int64                       `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                      `json:"msg,omitempty"`  // 错误描述
	Data  *StopVCMeetingRecordingResp `json:"data,omitempty"`
	Error *ErrorDetail                `json:"error,omitempty"`
}
